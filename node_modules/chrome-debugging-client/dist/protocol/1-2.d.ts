/**
 * Debugging Protocol 1.2 Domains
 * Generated on Mon Dec 11 2017 15:06:38 GMT-0800 (PST)
 */
import { IDebuggingProtocolClient } from "../lib/types";
/** Actions and events related to the inspected page belong to the page domain. */
export declare class Page {
    private _domContentEventFired;
    private _loadEventFired;
    private _frameAttached;
    private _frameNavigated;
    private _frameDetached;
    private _javascriptDialogOpening;
    private _javascriptDialogClosed;
    private _interstitialShown;
    private _interstitialHidden;
    private _navigationRequested;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Enables page domain notifications. */
    enable(): Promise<void>;
    /** Disables page domain notifications. */
    disable(): Promise<void>;
    /** Reloads given page optionally ignoring the cache. */
    reload(params: Page.ReloadParameters): Promise<void>;
    /** Navigates current page to the given URL. */
    navigate(params: Page.NavigateParameters): Promise<Page.NavigateReturn>;
    /** Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable. */
    setGeolocationOverride(params: Page.SetGeolocationOverrideParameters): Promise<void>;
    /** Clears the overriden Geolocation Position and Error. */
    clearGeolocationOverride(): Promise<void>;
    /** Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload). */
    handleJavaScriptDialog(params: Page.HandleJavaScriptDialogParameters): Promise<void>;
    domContentEventFired: Page.DomContentEventFiredHandler | null;
    loadEventFired: Page.LoadEventFiredHandler | null;
    /** Fired when frame has been attached to its parent. */
    frameAttached: Page.FrameAttachedHandler | null;
    /** Fired once navigation of the frame has completed. Frame is now associated with the new loader. */
    frameNavigated: Page.FrameNavigatedHandler | null;
    /** Fired when frame has been detached from its parent. */
    frameDetached: Page.FrameDetachedHandler | null;
    /** Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to open. */
    javascriptDialogOpening: Page.JavascriptDialogOpeningHandler | null;
    /** Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been closed. */
    javascriptDialogClosed: Page.JavascriptDialogClosedHandler | null;
    /** Fired when interstitial page was shown */
    interstitialShown: Page.InterstitialShownHandler | null;
    /** Fired when interstitial page was hidden */
    interstitialHidden: Page.InterstitialHiddenHandler | null;
    /** Fired when a navigation is started if navigation throttles are enabled.  The navigation will be deferred until processNavigation is called. */
    navigationRequested: Page.NavigationRequestedHandler | null;
}
export declare namespace Page {
    /** Resource type as it was perceived by the rendering engine. */
    type ResourceType = "Document" | "Stylesheet" | "Image" | "Media" | "Font" | "Script" | "TextTrack" | "XHR" | "Fetch" | "EventSource" | "WebSocket" | "Manifest" | "Other";
    /** Unique frame identifier. */
    type FrameId = string;
    /** Information about the Frame on the page. */
    interface Frame {
        /** Frame unique identifier. */
        id: string;
        /** Parent frame identifier. */
        parentId?: string;
        /** Identifier of the loader associated with this frame. */
        loaderId: Network.LoaderId;
        /** Frame's name as specified in the tag. */
        name?: string;
        /** Frame document's URL. */
        url: string;
        /** Frame document's security origin. */
        securityOrigin: string;
        /** Frame document's mimeType as determined by the browser. */
        mimeType: string;
    }
    type DialogType = any;
    type DomContentEventFiredParameters = {
        timestamp: number;
    };
    type DomContentEventFiredHandler = (params: DomContentEventFiredParameters) => void;
    type LoadEventFiredParameters = {
        timestamp: number;
    };
    type LoadEventFiredHandler = (params: LoadEventFiredParameters) => void;
    type FrameAttachedParameters = {
        /** Id of the frame that has been attached. */
        frameId: FrameId;
        /** Parent frame identifier. */
        parentFrameId: FrameId;
    };
    type FrameAttachedHandler = (params: FrameAttachedParameters) => void;
    type FrameNavigatedParameters = {
        /** Frame object. */
        frame: Frame;
    };
    type FrameNavigatedHandler = (params: FrameNavigatedParameters) => void;
    type FrameDetachedParameters = {
        /** Id of the frame that has been detached. */
        frameId: FrameId;
    };
    type FrameDetachedHandler = (params: FrameDetachedParameters) => void;
    type JavascriptDialogOpeningParameters = {
        /** Message that will be displayed by the dialog. */
        message: string;
        /** Dialog type. */
        type: DialogType;
    };
    type JavascriptDialogOpeningHandler = (params: JavascriptDialogOpeningParameters) => void;
    type JavascriptDialogClosedParameters = {
        /** Whether dialog was confirmed. */
        result: boolean;
    };
    type JavascriptDialogClosedHandler = (params: JavascriptDialogClosedParameters) => void;
    type InterstitialShownHandler = () => void;
    type InterstitialHiddenHandler = () => void;
    type NavigationRequestedParameters = {
        /** Whether the navigation is taking place in the main frame or in a subframe. */
        isInMainFrame: boolean;
        /** Whether the navigation has encountered a server redirect or not. */
        isRedirect: boolean;
        navigationId: number;
        /** URL of requested navigation. */
        url: string;
    };
    type NavigationRequestedHandler = (params: NavigationRequestedParameters) => void;
    type ReloadParameters = {
        /** If true, browser cache is ignored (as if the user pressed Shift+refresh). */
        ignoreCache?: boolean;
        /** If set, the script will be injected into all frames of the inspected page after reload. */
        scriptToEvaluateOnLoad?: string;
    };
    type NavigateParameters = {
        /** URL to navigate the page to. */
        url: string;
    };
    type NavigateReturn = {
        /** Frame id that will be navigated. */
        frameId: FrameId;
    };
    type SetGeolocationOverrideParameters = {
        /** Mock latitude */
        latitude?: number;
        /** Mock longitude */
        longitude?: number;
        /** Mock accuracy */
        accuracy?: number;
    };
    type HandleJavaScriptDialogParameters = {
        /** Whether to accept or dismiss the dialog. */
        accept: boolean;
        /** The text to enter into the dialog prompt before accepting. Used only if this is a prompt dialog. */
        promptText?: string;
    };
}
/** This domain emulates different environments for the page. */
export declare class Emulation {
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Overrides the values of device screen dimensions (window.screen.width, window.screen.height, window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media query results). */
    setDeviceMetricsOverride(params: Emulation.SetDeviceMetricsOverrideParameters): Promise<void>;
    /** Clears the overriden device metrics. */
    clearDeviceMetricsOverride(): Promise<void>;
    /** Toggles mouse event-based touch event emulation. */
    setTouchEmulationEnabled(params: Emulation.SetTouchEmulationEnabledParameters): Promise<void>;
    /** Emulates the given media for CSS media queries. */
    setEmulatedMedia(params: Emulation.SetEmulatedMediaParameters): Promise<void>;
}
export declare namespace Emulation {
    /** Screen orientation. */
    interface ScreenOrientation {
        /** Orientation type. */
        type: "portraitPrimary" | "portraitSecondary" | "landscapePrimary" | "landscapeSecondary";
        /** Orientation angle. */
        angle: number;
    }
    type SetDeviceMetricsOverrideParameters = {
        /** Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override. */
        width: number;
        /** Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override. */
        height: number;
        /** Overriding device scale factor value. 0 disables the override. */
        deviceScaleFactor: number;
        /** Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more. */
        mobile: boolean;
        /** Whether a view that exceeds the available browser window area should be scaled down to fit. */
        fitWindow: boolean;
        /** Scale to apply to resulting view image. Ignored in |fitWindow| mode. */
        scale?: number;
        /** Not used. */
        offsetX?: number;
        /** Not used. */
        offsetY?: number;
        /** Overriding screen width value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|. */
        screenWidth?: number;
        /** Overriding screen height value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|. */
        screenHeight?: number;
        /** Overriding view X position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|. */
        positionX?: number;
        /** Overriding view Y position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|. */
        positionY?: number;
        /** Screen orientation override. */
        screenOrientation?: ScreenOrientation;
    };
    type SetTouchEmulationEnabledParameters = {
        /** Whether the touch event emulation should be enabled. */
        enabled: boolean;
        /** Touch/gesture events configuration. Default: current platform. */
        configuration?: "mobile" | "desktop";
    };
    type SetEmulatedMediaParameters = {
        /** Media type to emulate. Empty string disables the override. */
        media: string;
    };
}
/** Network domain allows tracking network activities of the page. It exposes information about http, file, data and other requests and responses, their headers, bodies, timing, etc. */
export declare class Network {
    private _requestWillBeSent;
    private _requestServedFromCache;
    private _responseReceived;
    private _dataReceived;
    private _loadingFinished;
    private _loadingFailed;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Enables network tracking, network events will now be delivered to the client. */
    enable(params: Network.EnableParameters): Promise<void>;
    /** Disables network tracking, prevents network events from being sent to the client. */
    disable(): Promise<void>;
    /** Allows overriding user agent with the given string. */
    setUserAgentOverride(params: Network.SetUserAgentOverrideParameters): Promise<void>;
    /** Specifies whether to always send extra HTTP headers with the requests from this page. */
    setExtraHTTPHeaders(params: Network.SetExtraHTTPHeadersParameters): Promise<void>;
    /** Returns content served for the given request. */
    getResponseBody(params: Network.GetResponseBodyParameters): Promise<Network.GetResponseBodyReturn>;
    /** Tells whether clearing browser cache is supported. */
    canClearBrowserCache(): Promise<Network.CanClearBrowserCacheReturn>;
    /** Clears browser cache. */
    clearBrowserCache(): Promise<void>;
    /** Tells whether clearing browser cookies is supported. */
    canClearBrowserCookies(): Promise<Network.CanClearBrowserCookiesReturn>;
    /** Clears browser cookies. */
    clearBrowserCookies(): Promise<void>;
    /** Activates emulation of network conditions. */
    emulateNetworkConditions(params: Network.EmulateNetworkConditionsParameters): Promise<void>;
    /** Toggles ignoring cache for each request. If <code>true</code>, cache will not be used. */
    setCacheDisabled(params: Network.SetCacheDisabledParameters): Promise<void>;
    /** Fired when page is about to send HTTP request. */
    requestWillBeSent: Network.RequestWillBeSentHandler | null;
    /** Fired if request ended up loading from cache. */
    requestServedFromCache: Network.RequestServedFromCacheHandler | null;
    /** Fired when HTTP response is available. */
    responseReceived: Network.ResponseReceivedHandler | null;
    /** Fired when data chunk was received over the network. */
    dataReceived: Network.DataReceivedHandler | null;
    /** Fired when HTTP request has finished loading. */
    loadingFinished: Network.LoadingFinishedHandler | null;
    /** Fired when HTTP request has failed to load. */
    loadingFailed: Network.LoadingFailedHandler | null;
}
export declare namespace Network {
    /** Unique loader identifier. */
    type LoaderId = string;
    /** Unique request identifier. */
    type RequestId = string;
    /** Number of seconds since epoch. */
    type Timestamp = number;
    /** Request / response headers as keys / values of JSON object. */
    type Headers = any;
    /** Loading priority of a resource request. */
    type ConnectionType = "none" | "cellular2g" | "cellular3g" | "cellular4g" | "bluetooth" | "ethernet" | "wifi" | "wimax" | "other";
    /** Represents the cookie's 'SameSite' status: https://tools.ietf.org/html/draft-west-first-party-cookies */
    type CookieSameSite = "Strict" | "Lax";
    /** Timing information for the request. */
    interface ResourceTiming {
        /** Timing's requestTime is a baseline in seconds, while the other numbers are ticks in milliseconds relatively to this requestTime. */
        requestTime: number;
        /** Started resolving proxy. */
        proxyStart: number;
        /** Finished resolving proxy. */
        proxyEnd: number;
        /** Started DNS address resolve. */
        dnsStart: number;
        /** Finished DNS address resolve. */
        dnsEnd: number;
        /** Started connecting to the remote host. */
        connectStart: number;
        /** Connected to the remote host. */
        connectEnd: number;
        /** Started SSL handshake. */
        sslStart: number;
        /** Finished SSL handshake. */
        sslEnd: number;
        /** Started running ServiceWorker. */
        workerStart: number;
        /** Finished Starting ServiceWorker. */
        workerReady: number;
        /** Started sending request. */
        sendStart: number;
        /** Finished sending request. */
        sendEnd: number;
        /** Time the server started pushing request. */
        pushStart: number;
        /** Time the server finished pushing request. */
        pushEnd: number;
        /** Finished receiving response headers. */
        receiveHeadersEnd: number;
    }
    /** Loading priority of a resource request. */
    type ResourcePriority = "VeryLow" | "Low" | "Medium" | "High" | "VeryHigh";
    /** HTTP request data. */
    interface Request {
        /** Request URL. */
        url: string;
        /** HTTP request method. */
        method: string;
        /** HTTP request headers. */
        headers: Headers;
        /** HTTP POST request data. */
        postData?: string;
        /** The mixed content status of the request, as defined in http://www.w3.org/TR/mixed-content/ */
        mixedContentType?: "blockable" | "optionally-blockable" | "none";
        /** Priority of the resource request at the time request is sent. */
        initialPriority: ResourcePriority;
    }
    /** Details of a signed certificate timestamp (SCT). */
    interface SignedCertificateTimestamp {
        /** Validation status. */
        status: string;
        /** Origin. */
        origin: string;
        /** Log name / description. */
        logDescription: string;
        /** Log ID. */
        logId: string;
        /** Issuance date. */
        timestamp: Timestamp;
        /** Hash algorithm. */
        hashAlgorithm: string;
        /** Signature algorithm. */
        signatureAlgorithm: string;
        /** Signature data. */
        signatureData: string;
    }
    /** Security details about a request. */
    interface SecurityDetails {
        /** Protocol name (e.g. "TLS 1.2" or "QUIC"). */
        protocol: string;
        /** Key Exchange used by the connection. */
        keyExchange: string;
        /** (EC)DH group used by the connection, if applicable. */
        keyExchangeGroup?: string;
        /** Cipher name. */
        cipher: string;
        /** TLS MAC. Note that AEAD ciphers do not have separate MACs. */
        mac?: string;
        /** Certificate ID value. */
        certificateId: Security.CertificateId;
        /** Certificate subject name. */
        subjectName: string;
        /** Subject Alternative Name (SAN) DNS names and IP addresses. */
        sanList: string[];
        /** Name of the issuing CA. */
        issuer: string;
        /** Certificate valid from date. */
        validFrom: Timestamp;
        /** Certificate valid to (expiration) date */
        validTo: Timestamp;
        /** List of signed certificate timestamps (SCTs). */
        signedCertificateTimestampList: SignedCertificateTimestamp[];
    }
    /** HTTP response data. */
    interface Response {
        /** Response URL. This URL can be different from CachedResource.url in case of redirect. */
        url: string;
        /** HTTP response status code. */
        status: number;
        /** HTTP response status text. */
        statusText: string;
        /** HTTP response headers. */
        headers: Headers;
        /** HTTP response headers text. */
        headersText?: string;
        /** Resource mimeType as determined by the browser. */
        mimeType: string;
        /** Refined HTTP request headers that were actually transmitted over the network. */
        requestHeaders?: Headers;
        /** HTTP request headers text. */
        requestHeadersText?: string;
        /** Specifies whether physical connection was actually reused for this request. */
        connectionReused: boolean;
        /** Physical connection id that was actually used for this request. */
        connectionId: number;
        /** Remote IP address. */
        remoteIPAddress?: string;
        /** Remote port. */
        remotePort?: number;
        /** Specifies that the request was served from the disk cache. */
        fromDiskCache?: boolean;
        /** Specifies that the request was served from the ServiceWorker. */
        fromServiceWorker?: boolean;
        /** Total number of bytes received for this request so far. */
        encodedDataLength: number;
        /** Timing information for the given request. */
        timing?: ResourceTiming;
        /** Protocol used to fetch this request. */
        protocol?: string;
        /** Security state of the request resource. */
        securityState: Security.SecurityState;
        /** Security details for the request. */
        securityDetails?: SecurityDetails;
    }
    /** Information about the cached resource. */
    interface CachedResource {
        /** Resource URL. This is the url of the original network request. */
        url: string;
        /** Type of this resource. */
        type: Page.ResourceType;
        /** Cached response data. */
        response?: Response;
        /** Cached response body size. */
        bodySize: number;
    }
    /** Information about the request initiator. */
    interface Initiator {
        /** Type of this initiator. */
        type: "parser" | "script" | "other";
        /** Initiator JavaScript stack trace, set for Script only. */
        stack?: Runtime.StackTrace;
        /** Initiator URL, set for Parser type only. */
        url?: string;
        /** Initiator line number, set for Parser type only (0-based). */
        lineNumber?: number;
    }
    type BlockedReason = any;
    type RequestWillBeSentParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** Frame identifier. */
        frameId: Page.FrameId;
        /** Loader identifier. */
        loaderId: LoaderId;
        /** URL of the document this request is loaded for. */
        documentURL: string;
        /** Request data. */
        request: Request;
        /** Timestamp. */
        timestamp: Timestamp;
        /** UTC Timestamp. */
        wallTime: Timestamp;
        /** Request initiator. */
        initiator: Initiator;
        /** Redirect response data. */
        redirectResponse?: Response;
        /** Type of this resource. */
        type?: Page.ResourceType;
    };
    type RequestWillBeSentHandler = (params: RequestWillBeSentParameters) => void;
    type RequestServedFromCacheParameters = {
        /** Request identifier. */
        requestId: RequestId;
    };
    type RequestServedFromCacheHandler = (params: RequestServedFromCacheParameters) => void;
    type ResponseReceivedParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** Frame identifier. */
        frameId: Page.FrameId;
        /** Loader identifier. */
        loaderId: LoaderId;
        /** Timestamp. */
        timestamp: Timestamp;
        /** Resource type. */
        type: Page.ResourceType;
        /** Response data. */
        response: Response;
    };
    type ResponseReceivedHandler = (params: ResponseReceivedParameters) => void;
    type DataReceivedParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** Timestamp. */
        timestamp: Timestamp;
        /** Data chunk length. */
        dataLength: number;
        /** Actual bytes received (might be less than dataLength for compressed encodings). */
        encodedDataLength: number;
    };
    type DataReceivedHandler = (params: DataReceivedParameters) => void;
    type LoadingFinishedParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** Timestamp. */
        timestamp: Timestamp;
        /** Total number of bytes received for this request. */
        encodedDataLength: number;
    };
    type LoadingFinishedHandler = (params: LoadingFinishedParameters) => void;
    type LoadingFailedParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** Timestamp. */
        timestamp: Timestamp;
        /** Resource type. */
        type: Page.ResourceType;
        /** User friendly error message. */
        errorText: string;
        /** True if loading was canceled. */
        canceled?: boolean;
        /** The reason why loading was blocked, if any. */
        blockedReason?: BlockedReason;
    };
    type LoadingFailedHandler = (params: LoadingFailedParameters) => void;
    type EnableParameters = {
        /** Buffer size in bytes to use when preserving network payloads (XHRs, etc). */
        maxTotalBufferSize?: number;
        /** Per-resource buffer size in bytes to use when preserving network payloads (XHRs, etc). */
        maxResourceBufferSize?: number;
    };
    type SetUserAgentOverrideParameters = {
        /** User agent to use. */
        userAgent: string;
    };
    type SetExtraHTTPHeadersParameters = {
        /** Map with extra HTTP headers. */
        headers: Headers;
    };
    type GetResponseBodyParameters = {
        /** Identifier of the network request to get content for. */
        requestId: RequestId;
    };
    type GetResponseBodyReturn = {
        /** Response body. */
        body: string;
        /** True, if content was sent as base64. */
        base64Encoded: boolean;
    };
    type CanClearBrowserCacheReturn = {
        /** True if browser cache can be cleared. */
        result: boolean;
    };
    type CanClearBrowserCookiesReturn = {
        /** True if browser cookies can be cleared. */
        result: boolean;
    };
    type EmulateNetworkConditionsParameters = {
        /** True to emulate internet disconnection. */
        offline: boolean;
        /** Additional latency (ms). */
        latency: number;
        /** Maximal aggregated download throughput. */
        downloadThroughput: number;
        /** Maximal aggregated upload throughput. */
        uploadThroughput: number;
        /** Connection type if known. */
        connectionType?: ConnectionType;
    };
    type SetCacheDisabledParameters = {
        /** Cache disabled state. */
        cacheDisabled: boolean;
    };
}
/** This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object that has an <code>id</code>. This <code>id</code> can be used to get additional information on the Node, resolve it into the JavaScript object wrapper, etc. It is important that client receives DOM events only for the nodes that are known to the client. Backend keeps track of the nodes that were sent to the client and never sends the same node twice. It is client's responsibility to collect information about the nodes that were sent to the client.<p>Note that <code>iframe</code> owner elements will return corresponding document elements as their child nodes.</p> */
export declare class DOM {
    private _documentUpdated;
    private _setChildNodes;
    private _attributeModified;
    private _attributeRemoved;
    private _characterDataModified;
    private _childNodeCountUpdated;
    private _childNodeInserted;
    private _childNodeRemoved;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Enables DOM agent for the given page. */
    enable(): Promise<void>;
    /** Disables DOM agent for the given page. */
    disable(): Promise<void>;
    /** Returns the root DOM node to the caller. */
    getDocument(): Promise<DOM.GetDocumentReturn>;
    /** Requests that children of the node with given id are returned to the caller in form of <code>setChildNodes</code> events where not only immediate children are retrieved, but all children down to the specified depth. */
    requestChildNodes(params: DOM.RequestChildNodesParameters): Promise<void>;
    /** Executes <code>querySelector</code> on a given node. */
    querySelector(params: DOM.QuerySelectorParameters): Promise<DOM.QuerySelectorReturn>;
    /** Executes <code>querySelectorAll</code> on a given node. */
    querySelectorAll(params: DOM.QuerySelectorAllParameters): Promise<DOM.QuerySelectorAllReturn>;
    /** Sets node name for a node with given id. */
    setNodeName(params: DOM.SetNodeNameParameters): Promise<DOM.SetNodeNameReturn>;
    /** Sets node value for a node with given id. */
    setNodeValue(params: DOM.SetNodeValueParameters): Promise<void>;
    /** Removes node with given id. */
    removeNode(params: DOM.RemoveNodeParameters): Promise<void>;
    /** Sets attribute for an element with given id. */
    setAttributeValue(params: DOM.SetAttributeValueParameters): Promise<void>;
    /** Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name/value pairs. */
    setAttributesAsText(params: DOM.SetAttributesAsTextParameters): Promise<void>;
    /** Removes attribute with given name from an element with given id. */
    removeAttribute(params: DOM.RemoveAttributeParameters): Promise<void>;
    /** Returns node's HTML markup. */
    getOuterHTML(params: DOM.GetOuterHTMLParameters): Promise<DOM.GetOuterHTMLReturn>;
    /** Sets node HTML markup, returns new node id. */
    setOuterHTML(params: DOM.SetOuterHTMLParameters): Promise<void>;
    /** Requests that the node is sent to the caller given the JavaScript node object reference. All nodes that form the path from the node to the root are also sent to the client as a series of <code>setChildNodes</code> notifications. */
    requestNode(params: DOM.RequestNodeParameters): Promise<DOM.RequestNodeReturn>;
    /** Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport. */
    highlightRect(params: DOM.HighlightRectParameters): Promise<void>;
    /** Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified. */
    highlightNode(params: DOM.HighlightNodeParameters): Promise<void>;
    /** Hides DOM node highlight. */
    hideHighlight(): Promise<void>;
    /** Resolves JavaScript node object for given node id. */
    resolveNode(params: DOM.ResolveNodeParameters): Promise<DOM.ResolveNodeReturn>;
    /** Returns attributes for the specified node. */
    getAttributes(params: DOM.GetAttributesParameters): Promise<DOM.GetAttributesReturn>;
    /** Moves node into the new container, places it before the given anchor. */
    moveTo(params: DOM.MoveToParameters): Promise<DOM.MoveToReturn>;
    /** Fired when <code>Document</code> has been totally updated. Node ids are no longer valid. */
    documentUpdated: DOM.DocumentUpdatedHandler | null;
    /** Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids. */
    setChildNodes: DOM.SetChildNodesHandler | null;
    /** Fired when <code>Element</code>'s attribute is modified. */
    attributeModified: DOM.AttributeModifiedHandler | null;
    /** Fired when <code>Element</code>'s attribute is removed. */
    attributeRemoved: DOM.AttributeRemovedHandler | null;
    /** Mirrors <code>DOMCharacterDataModified</code> event. */
    characterDataModified: DOM.CharacterDataModifiedHandler | null;
    /** Fired when <code>Container</code>'s child node count has changed. */
    childNodeCountUpdated: DOM.ChildNodeCountUpdatedHandler | null;
    /** Mirrors <code>DOMNodeInserted</code> event. */
    childNodeInserted: DOM.ChildNodeInsertedHandler | null;
    /** Mirrors <code>DOMNodeRemoved</code> event. */
    childNodeRemoved: DOM.ChildNodeRemovedHandler | null;
}
export declare namespace DOM {
    /** Unique DOM node identifier. */
    type NodeId = number;
    /** Pseudo element type. */
    type PseudoType = "first-line" | "first-letter" | "before" | "after" | "backdrop" | "selection" | "first-line-inherited" | "scrollbar" | "scrollbar-thumb" | "scrollbar-button" | "scrollbar-track" | "scrollbar-track-piece" | "scrollbar-corner" | "resizer" | "input-list-button";
    /** Shadow root type. */
    type ShadowRootType = "user-agent" | "open" | "closed";
    /** DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type. */
    interface Node {
        /** Node identifier that is passed into the rest of the DOM messages as the <code>nodeId</code>. Backend will only push node with given <code>id</code> once. It is aware of all requested nodes and will only fire DOM events for nodes known to the client. */
        nodeId: NodeId;
        /** <code>Node</code>'s nodeType. */
        nodeType: number;
        /** <code>Node</code>'s nodeName. */
        nodeName: string;
        /** <code>Node</code>'s localName. */
        localName: string;
        /** <code>Node</code>'s nodeValue. */
        nodeValue: string;
        /** Child count for <code>Container</code> nodes. */
        childNodeCount?: number;
        /** Child nodes of this node when requested with children. */
        children?: Node[];
        /** Attributes of the <code>Element</code> node in the form of flat array <code>[name1, value1, name2, value2]</code>. */
        attributes?: string[];
        /** Document URL that <code>Document</code> or <code>FrameOwner</code> node points to. */
        documentURL?: string;
        /** Base URL that <code>Document</code> or <code>FrameOwner</code> node uses for URL completion. */
        baseURL?: string;
        /** <code>DocumentType</code>'s publicId. */
        publicId?: string;
        /** <code>DocumentType</code>'s systemId. */
        systemId?: string;
        /** <code>DocumentType</code>'s internalSubset. */
        internalSubset?: string;
        /** <code>Document</code>'s XML version in case of XML documents. */
        xmlVersion?: string;
        /** <code>Attr</code>'s name. */
        name?: string;
        /** <code>Attr</code>'s value. */
        value?: string;
        /** Pseudo element type for this node. */
        pseudoType?: PseudoType;
        /** Shadow root type. */
        shadowRootType?: ShadowRootType;
        /** Frame ID for frame owner elements. */
        frameId?: Page.FrameId;
        /** Content document for frame owner elements. */
        contentDocument?: Node;
        /** Shadow root list for given element host. */
        shadowRoots?: Node[];
        /** Content document fragment for template elements. */
        templateContent?: Node;
        /** Pseudo elements associated with this node. */
        pseudoElements?: Node[];
        /** Import document for the HTMLImport links. */
        importedDocument?: Node;
        /** Distributed nodes for given insertion point. */
        distributedNodes?: BackendNode[];
    }
    /** A structure holding an RGBA color. */
    interface RGBA {
        /** The red component, in the [0-255] range. */
        r: number;
        /** The green component, in the [0-255] range. */
        g: number;
        /** The blue component, in the [0-255] range. */
        b: number;
        /** The alpha component, in the [0-1] range (default: 1). */
        a?: number;
    }
    /** Configuration data for the highlighting of page elements. */
    interface HighlightConfig {
        /** Whether the node info tooltip should be shown (default: false). */
        showInfo?: boolean;
        /** Whether the rulers should be shown (default: false). */
        showRulers?: boolean;
        /** Whether the extension lines from node to the rulers should be shown (default: false). */
        showExtensionLines?: boolean;
        displayAsMaterial?: boolean;
        /** The content box highlight fill color (default: transparent). */
        contentColor?: RGBA;
        /** The padding highlight fill color (default: transparent). */
        paddingColor?: RGBA;
        /** The border highlight fill color (default: transparent). */
        borderColor?: RGBA;
        /** The margin highlight fill color (default: transparent). */
        marginColor?: RGBA;
        /** The event target element highlight fill color (default: transparent). */
        eventTargetColor?: RGBA;
        /** The shape outside fill color (default: transparent). */
        shapeColor?: RGBA;
        /** The shape margin fill color (default: transparent). */
        shapeMarginColor?: RGBA;
        /** Selectors to highlight relevant nodes. */
        selectorList?: string;
    }
    type BackendNode = any;
    type BackendNodeId = any;
    type DocumentUpdatedHandler = () => void;
    type SetChildNodesParameters = {
        /** Parent node id to populate with children. */
        parentId: NodeId;
        /** Child nodes array. */
        nodes: Node[];
    };
    type SetChildNodesHandler = (params: SetChildNodesParameters) => void;
    type AttributeModifiedParameters = {
        /** Id of the node that has changed. */
        nodeId: NodeId;
        /** Attribute name. */
        name: string;
        /** Attribute value. */
        value: string;
    };
    type AttributeModifiedHandler = (params: AttributeModifiedParameters) => void;
    type AttributeRemovedParameters = {
        /** Id of the node that has changed. */
        nodeId: NodeId;
        /** A ttribute name. */
        name: string;
    };
    type AttributeRemovedHandler = (params: AttributeRemovedParameters) => void;
    type CharacterDataModifiedParameters = {
        /** Id of the node that has changed. */
        nodeId: NodeId;
        /** New text value. */
        characterData: string;
    };
    type CharacterDataModifiedHandler = (params: CharacterDataModifiedParameters) => void;
    type ChildNodeCountUpdatedParameters = {
        /** Id of the node that has changed. */
        nodeId: NodeId;
        /** New node count. */
        childNodeCount: number;
    };
    type ChildNodeCountUpdatedHandler = (params: ChildNodeCountUpdatedParameters) => void;
    type ChildNodeInsertedParameters = {
        /** Id of the node that has changed. */
        parentNodeId: NodeId;
        /** If of the previous siblint. */
        previousNodeId: NodeId;
        /** Inserted node data. */
        node: Node;
    };
    type ChildNodeInsertedHandler = (params: ChildNodeInsertedParameters) => void;
    type ChildNodeRemovedParameters = {
        /** Parent id. */
        parentNodeId: NodeId;
        /** Id of the node that has been removed. */
        nodeId: NodeId;
    };
    type ChildNodeRemovedHandler = (params: ChildNodeRemovedParameters) => void;
    type GetDocumentReturn = {
        /** Resulting node. */
        root: Node;
    };
    type RequestChildNodesParameters = {
        /** Id of the node to get children for. */
        nodeId: NodeId;
        /** The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0. */
        depth?: number;
    };
    type QuerySelectorParameters = {
        /** Id of the node to query upon. */
        nodeId: NodeId;
        /** Selector string. */
        selector: string;
    };
    type QuerySelectorReturn = {
        /** Query selector result. */
        nodeId: NodeId;
    };
    type QuerySelectorAllParameters = {
        /** Id of the node to query upon. */
        nodeId: NodeId;
        /** Selector string. */
        selector: string;
    };
    type QuerySelectorAllReturn = {
        /** Query selector result. */
        nodeIds: NodeId[];
    };
    type SetNodeNameParameters = {
        /** Id of the node to set name for. */
        nodeId: NodeId;
        /** New node's name. */
        name: string;
    };
    type SetNodeNameReturn = {
        /** New node's id. */
        nodeId: NodeId;
    };
    type SetNodeValueParameters = {
        /** Id of the node to set value for. */
        nodeId: NodeId;
        /** New node's value. */
        value: string;
    };
    type RemoveNodeParameters = {
        /** Id of the node to remove. */
        nodeId: NodeId;
    };
    type SetAttributeValueParameters = {
        /** Id of the element to set attribute for. */
        nodeId: NodeId;
        /** Attribute name. */
        name: string;
        /** Attribute value. */
        value: string;
    };
    type SetAttributesAsTextParameters = {
        /** Id of the element to set attributes for. */
        nodeId: NodeId;
        /** Text with a number of attributes. Will parse this text using HTML parser. */
        text: string;
        /** Attribute name to replace with new attributes derived from text in case text parsed successfully. */
        name?: string;
    };
    type RemoveAttributeParameters = {
        /** Id of the element to remove attribute from. */
        nodeId: NodeId;
        /** Name of the attribute to remove. */
        name: string;
    };
    type GetOuterHTMLParameters = {
        /** Id of the node to get markup for. */
        nodeId: NodeId;
    };
    type GetOuterHTMLReturn = {
        /** Outer HTML markup. */
        outerHTML: string;
    };
    type SetOuterHTMLParameters = {
        /** Id of the node to set markup for. */
        nodeId: NodeId;
        /** Outer HTML markup to set. */
        outerHTML: string;
    };
    type RequestNodeParameters = {
        /** JavaScript object id to convert into node. */
        objectId: Runtime.RemoteObjectId;
    };
    type RequestNodeReturn = {
        /** Node id for given object. */
        nodeId: NodeId;
    };
    type HighlightRectParameters = {
        /** X coordinate */
        x: number;
        /** Y coordinate */
        y: number;
        /** Rectangle width */
        width: number;
        /** Rectangle height */
        height: number;
        /** The highlight fill color (default: transparent). */
        color?: RGBA;
        /** The highlight outline color (default: transparent). */
        outlineColor?: RGBA;
    };
    type HighlightNodeParameters = {
        /** A descriptor for the highlight appearance. */
        highlightConfig: HighlightConfig;
        /** Identifier of the node to highlight. */
        nodeId?: NodeId;
        /** Identifier of the backend node to highlight. */
        backendNodeId?: BackendNodeId;
        /** JavaScript object id of the node to be highlighted. */
        objectId?: Runtime.RemoteObjectId;
    };
    type ResolveNodeParameters = {
        /** Id of the node to resolve. */
        nodeId: NodeId;
        /** Symbolic group name that can be used to release multiple objects. */
        objectGroup?: string;
    };
    type ResolveNodeReturn = {
        /** JavaScript object wrapper for given node. */
        object: Runtime.RemoteObject;
    };
    type GetAttributesParameters = {
        /** Id of the node to retrieve attibutes for. */
        nodeId: NodeId;
    };
    type GetAttributesReturn = {
        /** An interleaved array of node attribute names and values. */
        attributes: string[];
    };
    type MoveToParameters = {
        /** Id of the node to move. */
        nodeId: NodeId;
        /** Id of the element to drop the moved node into. */
        targetNodeId: NodeId;
        /** Drop node before this one (if absent, the moved node becomes the last child of <code>targetNodeId</code>). */
        insertBeforeNodeId?: NodeId;
    };
    type MoveToReturn = {
        /** New id of the moved node. */
        nodeId: NodeId;
    };
}
/** DOM debugging allows setting breakpoints on particular DOM operations and events. JavaScript execution will stop on these operations as if there was a regular breakpoint set. */
export declare class DOMDebugger {
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Sets breakpoint on particular operation with DOM. */
    setDOMBreakpoint(params: DOMDebugger.SetDOMBreakpointParameters): Promise<void>;
    /** Removes DOM breakpoint that was set using <code>setDOMBreakpoint</code>. */
    removeDOMBreakpoint(params: DOMDebugger.RemoveDOMBreakpointParameters): Promise<void>;
    /** Sets breakpoint on particular DOM event. */
    setEventListenerBreakpoint(params: DOMDebugger.SetEventListenerBreakpointParameters): Promise<void>;
    /** Removes breakpoint on particular DOM event. */
    removeEventListenerBreakpoint(params: DOMDebugger.RemoveEventListenerBreakpointParameters): Promise<void>;
    /** Sets breakpoint on XMLHttpRequest. */
    setXHRBreakpoint(params: DOMDebugger.SetXHRBreakpointParameters): Promise<void>;
    /** Removes breakpoint from XMLHttpRequest. */
    removeXHRBreakpoint(params: DOMDebugger.RemoveXHRBreakpointParameters): Promise<void>;
}
export declare namespace DOMDebugger {
    /** DOM breakpoint type. */
    type DOMBreakpointType = "subtree-modified" | "attribute-modified" | "node-removed";
    type SetDOMBreakpointParameters = {
        /** Identifier of the node to set breakpoint on. */
        nodeId: DOM.NodeId;
        /** Type of the operation to stop upon. */
        type: DOMBreakpointType;
    };
    type RemoveDOMBreakpointParameters = {
        /** Identifier of the node to remove breakpoint from. */
        nodeId: DOM.NodeId;
        /** Type of the breakpoint to remove. */
        type: DOMBreakpointType;
    };
    type SetEventListenerBreakpointParameters = {
        /** DOM Event name to stop on (any DOM event will do). */
        eventName: string;
        /** EventTarget interface name to stop on. If equal to <code>"*"</code> or not provided, will stop on any EventTarget. */
        targetName?: string;
    };
    type RemoveEventListenerBreakpointParameters = {
        /** Event name. */
        eventName: string;
        /** EventTarget interface name. */
        targetName?: string;
    };
    type SetXHRBreakpointParameters = {
        /** Resource URL substring. All XHRs having this substring in the URL will get stopped upon. */
        url: string;
    };
    type RemoveXHRBreakpointParameters = {
        /** Resource URL substring. */
        url: string;
    };
}
export declare class Input {
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Dispatches a key event to the page. */
    dispatchKeyEvent(params: Input.DispatchKeyEventParameters): Promise<void>;
    /** Dispatches a mouse event to the page. */
    dispatchMouseEvent(params: Input.DispatchMouseEventParameters): Promise<void>;
}
export declare namespace Input {
    type DispatchKeyEventParameters = {
        /** Type of the key event. */
        type: "keyDown" | "keyUp" | "rawKeyDown" | "char";
        /** Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0). */
        modifiers?: number;
        /** Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time). */
        timestamp?: number;
        /** Text as generated by processing a virtual key code with a keyboard layout. Not needed for for <code>keyUp</code> and <code>rawKeyDown</code> events (default: "") */
        text?: string;
        /** Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: ""). */
        unmodifiedText?: string;
        /** Unique key identifier (e.g., 'U+0041') (default: ""). */
        keyIdentifier?: string;
        /** Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: ""). */
        code?: string;
        /** Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: ""). */
        key?: string;
        /** Windows virtual key code (default: 0). */
        windowsVirtualKeyCode?: number;
        /** Native virtual key code (default: 0). */
        nativeVirtualKeyCode?: number;
        /** Whether the event was generated from auto repeat (default: false). */
        autoRepeat?: boolean;
        /** Whether the event was generated from the keypad (default: false). */
        isKeypad?: boolean;
        /** Whether the event was a system key event (default: false). */
        isSystemKey?: boolean;
    };
    type DispatchMouseEventParameters = {
        /** Type of the mouse event. */
        type: "mousePressed" | "mouseReleased" | "mouseMoved";
        /** X coordinate of the event relative to the main frame's viewport. */
        x: number;
        /** Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport. */
        y: number;
        /** Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0). */
        modifiers?: number;
        /** Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time). */
        timestamp?: number;
        /** Mouse button (default: "none"). */
        button?: "none" | "left" | "middle" | "right";
        /** Number of times the mouse button was clicked (default: 0). */
        clickCount?: number;
    };
}
/** Provides information about the protocol schema. */
export declare class Schema {
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Returns supported domains. */
    getDomains(): Promise<Schema.GetDomainsReturn>;
}
export declare namespace Schema {
    /** Description of the protocol domain. */
    interface Domain {
        /** Domain name. */
        name: string;
        /** Domain version. */
        version: string;
    }
    type GetDomainsReturn = {
        /** List of supported domains. */
        domains: Domain[];
    };
}
/** Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects. Evaluation results are returned as mirror object that expose object type, string representation and unique identifier that can be used for further object reference. Original objects are maintained in memory unless they are either explicitly released or are released along with the other objects in their object group. */
export declare class Runtime {
    private _executionContextCreated;
    private _executionContextDestroyed;
    private _executionContextsCleared;
    private _exceptionThrown;
    private _exceptionRevoked;
    private _consoleAPICalled;
    private _inspectRequested;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Evaluates expression on global object. */
    evaluate(params: Runtime.EvaluateParameters): Promise<Runtime.EvaluateReturn>;
    /** Add handler to promise with given promise object id. */
    awaitPromise(params: Runtime.AwaitPromiseParameters): Promise<Runtime.AwaitPromiseReturn>;
    /** Calls function with given declaration on the given object. Object group of the result is inherited from the target object. */
    callFunctionOn(params: Runtime.CallFunctionOnParameters): Promise<Runtime.CallFunctionOnReturn>;
    /** Returns properties of a given object. Object group of the result is inherited from the target object. */
    getProperties(params: Runtime.GetPropertiesParameters): Promise<Runtime.GetPropertiesReturn>;
    /** Releases remote object with given id. */
    releaseObject(params: Runtime.ReleaseObjectParameters): Promise<void>;
    /** Releases all remote objects that belong to a given group. */
    releaseObjectGroup(params: Runtime.ReleaseObjectGroupParameters): Promise<void>;
    /** Tells inspected instance to run if it was waiting for debugger to attach. */
    runIfWaitingForDebugger(): Promise<void>;
    /** Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context. */
    enable(): Promise<void>;
    /** Disables reporting of execution contexts creation. */
    disable(): Promise<void>;
    /** Discards collected exceptions and console API calls. */
    discardConsoleEntries(): Promise<void>;
    /** Compiles expression. */
    compileScript(params: Runtime.CompileScriptParameters): Promise<Runtime.CompileScriptReturn>;
    /** Runs script with given id in a given context. */
    runScript(params: Runtime.RunScriptParameters): Promise<Runtime.RunScriptReturn>;
    /** Issued when new execution context is created. */
    executionContextCreated: Runtime.ExecutionContextCreatedHandler | null;
    /** Issued when execution context is destroyed. */
    executionContextDestroyed: Runtime.ExecutionContextDestroyedHandler | null;
    /** Issued when all executionContexts were cleared in browser */
    executionContextsCleared: Runtime.ExecutionContextsClearedHandler | null;
    /** Issued when exception was thrown and unhandled. */
    exceptionThrown: Runtime.ExceptionThrownHandler | null;
    /** Issued when unhandled exception was revoked. */
    exceptionRevoked: Runtime.ExceptionRevokedHandler | null;
    /** Issued when console API was called. */
    consoleAPICalled: Runtime.ConsoleAPICalledHandler | null;
    /** Issued when object should be inspected (for example, as a result of inspect() command line API call). */
    inspectRequested: Runtime.InspectRequestedHandler | null;
}
export declare namespace Runtime {
    /** Unique script identifier. */
    type ScriptId = string;
    /** Unique object identifier. */
    type RemoteObjectId = string;
    /** Primitive value which cannot be JSON-stringified. */
    type UnserializableValue = "Infinity" | "NaN" | "-Infinity" | "-0";
    /** Mirror object referencing original JavaScript object. */
    interface RemoteObject {
        /** Object type. */
        type: "object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol";
        /** Object subtype hint. Specified for <code>object</code> type values only. */
        subtype?: "array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "iterator" | "generator" | "error" | "proxy" | "promise" | "typedarray";
        /** Object class (constructor) name. Specified for <code>object</code> type values only. */
        className?: string;
        /** Remote object value in case of primitive values or JSON values (if it was requested). */
        value?: any;
        /** Primitive value which can not be JSON-stringified does not have <code>value</code>, but gets this property. */
        unserializableValue?: UnserializableValue;
        /** String representation of the object. */
        description?: string;
        /** Unique object identifier (for non-primitive values). */
        objectId?: RemoteObjectId;
        /** Preview containing abbreviated property values. Specified for <code>object</code> type values only. */
        preview?: ObjectPreview;
        customPreview?: CustomPreview;
    }
    /** Object property descriptor. */
    interface PropertyDescriptor {
        /** Property name or symbol description. */
        name: string;
        /** The value associated with the property. */
        value?: RemoteObject;
        /** True if the value associated with the property may be changed (data descriptors only). */
        writable?: boolean;
        /** A function which serves as a getter for the property, or <code>undefined</code> if there is no getter (accessor descriptors only). */
        get?: RemoteObject;
        /** A function which serves as a setter for the property, or <code>undefined</code> if there is no setter (accessor descriptors only). */
        set?: RemoteObject;
        /** True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. */
        configurable: boolean;
        /** True if this property shows up during enumeration of the properties on the corresponding object. */
        enumerable: boolean;
        /** True if the result was thrown during the evaluation. */
        wasThrown?: boolean;
        /** True if the property is owned for the object. */
        isOwn?: boolean;
        /** Property symbol object, if the property is of the <code>symbol</code> type. */
        symbol?: RemoteObject;
    }
    /** Object internal property descriptor. This property isn't normally visible in JavaScript code. */
    interface InternalPropertyDescriptor {
        /** Conventional property name. */
        name: string;
        /** The value associated with the property. */
        value?: RemoteObject;
    }
    /** Represents function call argument. Either remote object id <code>objectId</code>, primitive <code>value</code>, unserializable primitive value or neither of (for undefined) them should be specified. */
    interface CallArgument {
        /** Primitive value. */
        value?: any;
        /** Primitive value which can not be JSON-stringified. */
        unserializableValue?: UnserializableValue;
        /** Remote object handle. */
        objectId?: RemoteObjectId;
    }
    /** Id of an execution context. */
    type ExecutionContextId = number;
    /** Description of an isolated world. */
    interface ExecutionContextDescription {
        /** Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed. */
        id: ExecutionContextId;
        /** Execution context origin. */
        origin: string;
        /** Human readable name describing given context. */
        name: string;
        /** Embedder-specific auxiliary data. */
        auxData?: any;
    }
    /** Detailed information about exception (or error) that was thrown during script compilation or execution. */
    interface ExceptionDetails {
        /** Exception id. */
        exceptionId: number;
        /** Exception text, which should be used together with exception object when available. */
        text: string;
        /** Line number of the exception location (0-based). */
        lineNumber: number;
        /** Column number of the exception location (0-based). */
        columnNumber: number;
        /** Script ID of the exception location. */
        scriptId?: ScriptId;
        /** URL of the exception location, to be used when the script was not reported. */
        url?: string;
        /** JavaScript stack trace if available. */
        stackTrace?: StackTrace;
        /** Exception object if available. */
        exception?: RemoteObject;
        /** Identifier of the context where exception happened. */
        executionContextId?: ExecutionContextId;
    }
    /** Number of milliseconds since epoch. */
    type Timestamp = number;
    /** Stack entry for runtime errors and assertions. */
    interface CallFrame {
        /** JavaScript function name. */
        functionName: string;
        /** JavaScript script id. */
        scriptId: ScriptId;
        /** JavaScript script name or url. */
        url: string;
        /** JavaScript script line number (0-based). */
        lineNumber: number;
        /** JavaScript script column number (0-based). */
        columnNumber: number;
    }
    /** Call frames for assertions or error messages. */
    interface StackTrace {
        /** String label of this stack trace. For async traces this may be a name of the function that initiated the async call. */
        description?: string;
        /** JavaScript function name. */
        callFrames: CallFrame[];
        /** Asynchronous JavaScript stack trace that preceded this stack, if available. */
        parent?: StackTrace;
    }
    type ObjectPreview = any;
    type CustomPreview = any;
    type ExecutionContextCreatedParameters = {
        /** A newly created execution contex. */
        context: ExecutionContextDescription;
    };
    type ExecutionContextCreatedHandler = (params: ExecutionContextCreatedParameters) => void;
    type ExecutionContextDestroyedParameters = {
        /** Id of the destroyed context */
        executionContextId: ExecutionContextId;
    };
    type ExecutionContextDestroyedHandler = (params: ExecutionContextDestroyedParameters) => void;
    type ExecutionContextsClearedHandler = () => void;
    type ExceptionThrownParameters = {
        /** Timestamp of the exception. */
        timestamp: Timestamp;
        exceptionDetails: ExceptionDetails;
    };
    type ExceptionThrownHandler = (params: ExceptionThrownParameters) => void;
    type ExceptionRevokedParameters = {
        /** Reason describing why exception was revoked. */
        reason: string;
        /** The id of revoked exception, as reported in <code>exceptionUnhandled</code>. */
        exceptionId: number;
    };
    type ExceptionRevokedHandler = (params: ExceptionRevokedParameters) => void;
    type ConsoleAPICalledParameters = {
        /** Type of the call. */
        type: "log" | "debug" | "info" | "error" | "warning" | "dir" | "dirxml" | "table" | "trace" | "clear" | "startGroup" | "startGroupCollapsed" | "endGroup" | "assert" | "profile" | "profileEnd";
        /** Call arguments. */
        args: RemoteObject[];
        /** Identifier of the context where the call was made. */
        executionContextId: ExecutionContextId;
        /** Call timestamp. */
        timestamp: Timestamp;
        /** Stack trace captured when the call was made. */
        stackTrace?: StackTrace;
    };
    type ConsoleAPICalledHandler = (params: ConsoleAPICalledParameters) => void;
    type InspectRequestedParameters = {
        object: RemoteObject;
        hints: any;
    };
    type InspectRequestedHandler = (params: InspectRequestedParameters) => void;
    type EvaluateParameters = {
        /** Expression to evaluate. */
        expression: string;
        /** Symbolic group name that can be used to release multiple objects. */
        objectGroup?: string;
        /** Determines whether Command Line API should be available during the evaluation. */
        includeCommandLineAPI?: boolean;
        /** In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state. */
        silent?: boolean;
        /** Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page. */
        contextId?: ExecutionContextId;
        /** Whether the result is expected to be a JSON object that should be sent by value. */
        returnByValue?: boolean;
        /** Whether preview should be generated for the result. */
        generatePreview?: boolean;
        /** Whether execution should be treated as initiated by user in the UI. */
        userGesture?: boolean;
        /** Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error. */
        awaitPromise?: boolean;
    };
    type EvaluateReturn = {
        /** Evaluation result. */
        result: RemoteObject;
        /** Exception details. */
        exceptionDetails?: ExceptionDetails;
    };
    type AwaitPromiseParameters = {
        /** Identifier of the promise. */
        promiseObjectId: RemoteObjectId;
        /** Whether the result is expected to be a JSON object that should be sent by value. */
        returnByValue?: boolean;
        /** Whether preview should be generated for the result. */
        generatePreview?: boolean;
    };
    type AwaitPromiseReturn = {
        /** Promise result. Will contain rejected value if promise was rejected. */
        result: RemoteObject;
        /** Exception details if stack strace is available. */
        exceptionDetails?: ExceptionDetails;
    };
    type CallFunctionOnParameters = {
        /** Identifier of the object to call function on. */
        objectId: RemoteObjectId;
        /** Declaration of the function to call. */
        functionDeclaration: string;
        /** Call arguments. All call arguments must belong to the same JavaScript world as the target object. */
        arguments?: CallArgument[];
        /** In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state. */
        silent?: boolean;
        /** Whether the result is expected to be a JSON object which should be sent by value. */
        returnByValue?: boolean;
        /** Whether preview should be generated for the result. */
        generatePreview?: boolean;
        /** Whether execution should be treated as initiated by user in the UI. */
        userGesture?: boolean;
        /** Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error. */
        awaitPromise?: boolean;
    };
    type CallFunctionOnReturn = {
        /** Call result. */
        result: RemoteObject;
        /** Exception details. */
        exceptionDetails?: ExceptionDetails;
    };
    type GetPropertiesParameters = {
        /** Identifier of the object to return properties for. */
        objectId: RemoteObjectId;
        /** If true, returns properties belonging only to the element itself, not to its prototype chain. */
        ownProperties?: boolean;
        /** If true, returns accessor properties (with getter/setter) only; internal properties are not returned either. */
        accessorPropertiesOnly?: boolean;
        /** Whether preview should be generated for the results. */
        generatePreview?: boolean;
    };
    type GetPropertiesReturn = {
        /** Object properties. */
        result: PropertyDescriptor[];
        /** Internal object properties (only of the element itself). */
        internalProperties?: InternalPropertyDescriptor[];
        /** Exception details. */
        exceptionDetails?: ExceptionDetails;
    };
    type ReleaseObjectParameters = {
        /** Identifier of the object to release. */
        objectId: RemoteObjectId;
    };
    type ReleaseObjectGroupParameters = {
        /** Symbolic object group name. */
        objectGroup: string;
    };
    type CompileScriptParameters = {
        /** Expression to compile. */
        expression: string;
        /** Source url to be set for the script. */
        sourceURL: string;
        /** Specifies whether the compiled script should be persisted. */
        persistScript: boolean;
        /** Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page. */
        executionContextId?: ExecutionContextId;
    };
    type CompileScriptReturn = {
        /** Id of the script. */
        scriptId?: ScriptId;
        /** Exception details. */
        exceptionDetails?: ExceptionDetails;
    };
    type RunScriptParameters = {
        /** Id of the script to run. */
        scriptId: ScriptId;
        /** Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page. */
        executionContextId?: ExecutionContextId;
        /** Symbolic group name that can be used to release multiple objects. */
        objectGroup?: string;
        /** In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state. */
        silent?: boolean;
        /** Determines whether Command Line API should be available during the evaluation. */
        includeCommandLineAPI?: boolean;
        /** Whether the result is expected to be a JSON object which should be sent by value. */
        returnByValue?: boolean;
        /** Whether preview should be generated for the result. */
        generatePreview?: boolean;
        /** Whether execution should wait for promise to be resolved. If the result of evaluation is not a Promise, it's considered to be an error. */
        awaitPromise?: boolean;
    };
    type RunScriptReturn = {
        /** Run result. */
        result: RemoteObject;
        /** Exception details. */
        exceptionDetails?: ExceptionDetails;
    };
}
/** Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing breakpoints, stepping through execution, exploring stack traces, etc. */
export declare class Debugger {
    private _scriptParsed;
    private _scriptFailedToParse;
    private _breakpointResolved;
    private _paused;
    private _resumed;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received. */
    enable(): Promise<void>;
    /** Disables debugger for given page. */
    disable(): Promise<void>;
    /** Activates / deactivates all breakpoints on the page. */
    setBreakpointsActive(params: Debugger.SetBreakpointsActiveParameters): Promise<void>;
    /** Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc). */
    setSkipAllPauses(params: Debugger.SetSkipAllPausesParameters): Promise<void>;
    /** Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads. */
    setBreakpointByUrl(params: Debugger.SetBreakpointByUrlParameters): Promise<Debugger.SetBreakpointByUrlReturn>;
    /** Sets JavaScript breakpoint at a given location. */
    setBreakpoint(params: Debugger.SetBreakpointParameters): Promise<Debugger.SetBreakpointReturn>;
    /** Removes JavaScript breakpoint. */
    removeBreakpoint(params: Debugger.RemoveBreakpointParameters): Promise<void>;
    /** Continues execution until specific location is reached. */
    continueToLocation(params: Debugger.ContinueToLocationParameters): Promise<void>;
    /** Steps over the statement. */
    stepOver(): Promise<void>;
    /** Steps into the function call. */
    stepInto(): Promise<void>;
    /** Steps out of the function call. */
    stepOut(): Promise<void>;
    /** Stops on the next JavaScript statement. */
    pause(): Promise<void>;
    /** Resumes JavaScript execution. */
    resume(): Promise<void>;
    /** Edits JavaScript source live. */
    setScriptSource(params: Debugger.SetScriptSourceParameters): Promise<Debugger.SetScriptSourceReturn>;
    /** Restarts particular call frame from the beginning. */
    restartFrame(params: Debugger.RestartFrameParameters): Promise<Debugger.RestartFrameReturn>;
    /** Returns source for the script with given id. */
    getScriptSource(params: Debugger.GetScriptSourceParameters): Promise<Debugger.GetScriptSourceReturn>;
    /** Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>. */
    setPauseOnExceptions(params: Debugger.SetPauseOnExceptionsParameters): Promise<void>;
    /** Evaluates expression on a given call frame. */
    evaluateOnCallFrame(params: Debugger.EvaluateOnCallFrameParameters): Promise<Debugger.EvaluateOnCallFrameReturn>;
    /** Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually. */
    setVariableValue(params: Debugger.SetVariableValueParameters): Promise<void>;
    /** Enables or disables async call stacks tracking. */
    setAsyncCallStackDepth(params: Debugger.SetAsyncCallStackDepthParameters): Promise<void>;
    /** Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger. */
    scriptParsed: Debugger.ScriptParsedHandler | null;
    /** Fired when virtual machine fails to parse the script. */
    scriptFailedToParse: Debugger.ScriptFailedToParseHandler | null;
    /** Fired when breakpoint is resolved to an actual script and location. */
    breakpointResolved: Debugger.BreakpointResolvedHandler | null;
    /** Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria. */
    paused: Debugger.PausedHandler | null;
    /** Fired when the virtual machine resumed execution. */
    resumed: Debugger.ResumedHandler | null;
}
export declare namespace Debugger {
    /** Breakpoint identifier. */
    type BreakpointId = string;
    /** Call frame identifier. */
    type CallFrameId = string;
    /** Location in the source code. */
    interface Location {
        /** Script identifier as reported in the <code>Debugger.scriptParsed</code>. */
        scriptId: Runtime.ScriptId;
        /** Line number in the script (0-based). */
        lineNumber: number;
        /** Column number in the script (0-based). */
        columnNumber?: number;
    }
    /** JavaScript call frame. Array of call frames form the call stack. */
    interface CallFrame {
        /** Call frame identifier. This identifier is only valid while the virtual machine is paused. */
        callFrameId: CallFrameId;
        /** Name of the JavaScript function called on this call frame. */
        functionName: string;
        /** Location in the source code. */
        functionLocation?: Location;
        /** Location in the source code. */
        location: Location;
        /** Scope chain for this call frame. */
        scopeChain: Scope[];
        /** <code>this</code> object for this call frame. */
        this: Runtime.RemoteObject;
        /** The value being returned, if the function is at return point. */
        returnValue?: Runtime.RemoteObject;
    }
    /** Scope description. */
    interface Scope {
        /** Scope type. */
        type: "global" | "local" | "with" | "closure" | "catch" | "block" | "script";
        /** Object representing the scope. For <code>global</code> and <code>with</code> scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties. */
        object: Runtime.RemoteObject;
        name?: string;
        /** Location in the source code where scope starts */
        startLocation?: Location;
        /** Location in the source code where scope ends */
        endLocation?: Location;
    }
    type ScriptParsedParameters = {
        /** Identifier of the script parsed. */
        scriptId: Runtime.ScriptId;
        /** URL or name of the script parsed (if any). */
        url: string;
        /** Line offset of the script within the resource with given URL (for script tags). */
        startLine: number;
        /** Column offset of the script within the resource with given URL. */
        startColumn: number;
        /** Last line of the script. */
        endLine: number;
        /** Length of the last line of the script. */
        endColumn: number;
        /** Specifies script creation context. */
        executionContextId: Runtime.ExecutionContextId;
        /** Content hash of the script. */
        hash: string;
        /** Embedder-specific auxiliary data. */
        executionContextAuxData?: any;
        /** True, if this script is generated as a result of the live edit operation. */
        isLiveEdit?: boolean;
        /** URL of source map associated with script (if any). */
        sourceMapURL?: string;
        /** True, if this script has sourceURL. */
        hasSourceURL?: boolean;
    };
    type ScriptParsedHandler = (params: ScriptParsedParameters) => void;
    type ScriptFailedToParseParameters = {
        /** Identifier of the script parsed. */
        scriptId: Runtime.ScriptId;
        /** URL or name of the script parsed (if any). */
        url: string;
        /** Line offset of the script within the resource with given URL (for script tags). */
        startLine: number;
        /** Column offset of the script within the resource with given URL. */
        startColumn: number;
        /** Last line of the script. */
        endLine: number;
        /** Length of the last line of the script. */
        endColumn: number;
        /** Specifies script creation context. */
        executionContextId: Runtime.ExecutionContextId;
        /** Content hash of the script. */
        hash: string;
        /** Embedder-specific auxiliary data. */
        executionContextAuxData?: any;
        /** URL of source map associated with script (if any). */
        sourceMapURL?: string;
        /** True, if this script has sourceURL. */
        hasSourceURL?: boolean;
    };
    type ScriptFailedToParseHandler = (params: ScriptFailedToParseParameters) => void;
    type BreakpointResolvedParameters = {
        /** Breakpoint unique identifier. */
        breakpointId: BreakpointId;
        /** Actual breakpoint location. */
        location: Location;
    };
    type BreakpointResolvedHandler = (params: BreakpointResolvedParameters) => void;
    type PausedParameters = {
        /** Call stack the virtual machine stopped on. */
        callFrames: CallFrame[];
        /** Pause reason. */
        reason: "XHR" | "DOM" | "EventListener" | "exception" | "assert" | "debugCommand" | "promiseRejection" | "other";
        /** Object containing break-specific auxiliary properties. */
        data?: any;
        /** Hit breakpoints IDs */
        hitBreakpoints?: string[];
        /** Async stack trace, if any. */
        asyncStackTrace?: Runtime.StackTrace;
    };
    type PausedHandler = (params: PausedParameters) => void;
    type ResumedHandler = () => void;
    type SetBreakpointsActiveParameters = {
        /** New value for breakpoints active state. */
        active: boolean;
    };
    type SetSkipAllPausesParameters = {
        /** New value for skip pauses state. */
        skip: boolean;
    };
    type SetBreakpointByUrlParameters = {
        /** Line number to set breakpoint at. */
        lineNumber: number;
        /** URL of the resources to set breakpoint on. */
        url?: string;
        /** Regex pattern for the URLs of the resources to set breakpoints on. Either <code>url</code> or <code>urlRegex</code> must be specified. */
        urlRegex?: string;
        /** Offset in the line to set breakpoint at. */
        columnNumber?: number;
        /** Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true. */
        condition?: string;
    };
    type SetBreakpointByUrlReturn = {
        /** Id of the created breakpoint for further reference. */
        breakpointId: BreakpointId;
        /** List of the locations this breakpoint resolved into upon addition. */
        locations: Location[];
    };
    type SetBreakpointParameters = {
        /** Location to set breakpoint in. */
        location: Location;
        /** Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true. */
        condition?: string;
    };
    type SetBreakpointReturn = {
        /** Id of the created breakpoint for further reference. */
        breakpointId: BreakpointId;
        /** Location this breakpoint resolved into. */
        actualLocation: Location;
    };
    type RemoveBreakpointParameters = {
        breakpointId: BreakpointId;
    };
    type ContinueToLocationParameters = {
        /** Location to continue to. */
        location: Location;
    };
    type SetScriptSourceParameters = {
        /** Id of the script to edit. */
        scriptId: Runtime.ScriptId;
        /** New content of the script. */
        scriptSource: string;
        /**  If true the change will not actually be applied. Dry run may be used to get result description without actually modifying the code. */
        dryRun?: boolean;
    };
    type SetScriptSourceReturn = {
        /** New stack trace in case editing has happened while VM was stopped. */
        callFrames?: CallFrame[];
        /** Whether current call stack  was modified after applying the changes. */
        stackChanged?: boolean;
        /** Async stack trace, if any. */
        asyncStackTrace?: Runtime.StackTrace;
        /** Exception details if any. */
        exceptionDetails?: Runtime.ExceptionDetails;
    };
    type RestartFrameParameters = {
        /** Call frame identifier to evaluate on. */
        callFrameId: CallFrameId;
    };
    type RestartFrameReturn = {
        /** New stack trace. */
        callFrames: CallFrame[];
        /** Async stack trace, if any. */
        asyncStackTrace?: Runtime.StackTrace;
    };
    type GetScriptSourceParameters = {
        /** Id of the script to get source for. */
        scriptId: Runtime.ScriptId;
    };
    type GetScriptSourceReturn = {
        /** Script source. */
        scriptSource: string;
    };
    type SetPauseOnExceptionsParameters = {
        /** Pause on exceptions mode. */
        state: "none" | "uncaught" | "all";
    };
    type EvaluateOnCallFrameParameters = {
        /** Call frame identifier to evaluate on. */
        callFrameId: CallFrameId;
        /** Expression to evaluate. */
        expression: string;
        /** String object group name to put result into (allows rapid releasing resulting object handles using <code>releaseObjectGroup</code>). */
        objectGroup?: string;
        /** Specifies whether command line API should be available to the evaluated expression, defaults to false. */
        includeCommandLineAPI?: boolean;
        /** In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state. */
        silent?: boolean;
        /** Whether the result is expected to be a JSON object that should be sent by value. */
        returnByValue?: boolean;
        /** Whether preview should be generated for the result. */
        generatePreview?: boolean;
    };
    type EvaluateOnCallFrameReturn = {
        /** Object wrapper for the evaluation result. */
        result: Runtime.RemoteObject;
        /** Exception details. */
        exceptionDetails?: Runtime.ExceptionDetails;
    };
    type SetVariableValueParameters = {
        /** 0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch' scope types are allowed. Other scopes could be manipulated manually. */
        scopeNumber: number;
        /** Variable name. */
        variableName: string;
        /** New variable value. */
        newValue: Runtime.CallArgument;
        /** Id of callframe that holds variable. */
        callFrameId: CallFrameId;
    };
    type SetAsyncCallStackDepthParameters = {
        /** Maximum depth of async call stacks. Setting to <code>0</code> will effectively disable collecting async call stacks (default). */
        maxDepth: number;
    };
}
export declare class Profiler {
    private _consoleProfileStarted;
    private _consoleProfileFinished;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    enable(): Promise<void>;
    disable(): Promise<void>;
    /** Changes CPU profiler sampling interval. Must be called before CPU profiles recording started. */
    setSamplingInterval(params: Profiler.SetSamplingIntervalParameters): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<Profiler.StopReturn>;
    /** Sent when new profile recodring is started using console.profile() call. */
    consoleProfileStarted: Profiler.ConsoleProfileStartedHandler | null;
    consoleProfileFinished: Profiler.ConsoleProfileFinishedHandler | null;
}
export declare namespace Profiler {
    /** Profile node. Holds callsite information, execution statistics and child nodes. */
    interface ProfileNode {
        /** Unique id of the node. */
        id: number;
        /** Function location. */
        callFrame: Runtime.CallFrame;
        /** Number of samples where this node was on top of the call stack. */
        hitCount?: number;
        /** Child node ids. */
        children?: number[];
        /** The reason of being not optimized. The function may be deoptimized or marked as don't optimize. */
        deoptReason?: string;
        /** An array of source position ticks. */
        positionTicks?: PositionTickInfo[];
    }
    /** Profile. */
    interface Profile {
        /** The list of profile nodes. First item is the root node. */
        nodes: ProfileNode[];
        /** Profiling start timestamp in microseconds. */
        startTime: number;
        /** Profiling end timestamp in microseconds. */
        endTime: number;
        /** Ids of samples top nodes. */
        samples?: number[];
        /** Time intervals between adjacent samples in microseconds. The first delta is relative to the profile startTime. */
        timeDeltas?: number[];
    }
    type PositionTickInfo = any;
    type ConsoleProfileStartedParameters = {
        id: string;
        /** Location of console.profile(). */
        location: Debugger.Location;
        /** Profile title passed as an argument to console.profile(). */
        title?: string;
    };
    type ConsoleProfileStartedHandler = (params: ConsoleProfileStartedParameters) => void;
    type ConsoleProfileFinishedParameters = {
        id: string;
        /** Location of console.profileEnd(). */
        location: Debugger.Location;
        profile: Profile;
        /** Profile title passed as an argument to console.profile(). */
        title?: string;
    };
    type ConsoleProfileFinishedHandler = (params: ConsoleProfileFinishedParameters) => void;
    type SetSamplingIntervalParameters = {
        /** New sampling interval in microseconds. */
        interval: number;
    };
    type StopReturn = {
        /** Recorded profile. */
        profile: Profile;
    };
}
export declare namespace Security {
    type CertificateId = any;
    type SecurityState = any;
}

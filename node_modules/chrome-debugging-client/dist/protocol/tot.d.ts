/**
 * Debugging Protocol Domains
 * Generated on Mon Dec 11 2017 15:06:39 GMT-0800 (PST)
 */
import { IDebuggingProtocolClient } from "../lib/types";
export declare class Accessibility {
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Fetches the accessibility node and partial accessibility tree for this DOM node, if it exists. */
    getPartialAXTree(params: Accessibility.GetPartialAXTreeParameters): Promise<Accessibility.GetPartialAXTreeReturn>;
}
export declare namespace Accessibility {
    /** Unique accessibility node identifier. */
    type AXNodeId = string;
    /** Enum of possible property types. */
    type AXValueType = "boolean" | "tristate" | "booleanOrUndefined" | "idref" | "idrefList" | "integer" | "node" | "nodeList" | "number" | "string" | "computedString" | "token" | "tokenList" | "domRelation" | "role" | "internalRole" | "valueUndefined";
    /** Enum of possible property sources. */
    type AXValueSourceType = "attribute" | "implicit" | "style" | "contents" | "placeholder" | "relatedElement";
    /** Enum of possible native property sources (as a subtype of a particular AXValueSourceType). */
    type AXValueNativeSourceType = "figcaption" | "label" | "labelfor" | "labelwrapped" | "legend" | "tablecaption" | "title" | "other";
    /** A single source for a computed AX property. */
    interface AXValueSource {
        /** What type of source this is. */
        type: AXValueSourceType;
        /** The value of this property source. */
        value?: AXValue;
        /** The name of the relevant attribute, if any. */
        attribute?: string;
        /** The value of the relevant attribute, if any. */
        attributeValue?: AXValue;
        /** Whether this source is superseded by a higher priority source. */
        superseded?: boolean;
        /** The native markup source for this value, e.g. a <label> element. */
        nativeSource?: AXValueNativeSourceType;
        /** The value, such as a node or node list, of the native source. */
        nativeSourceValue?: AXValue;
        /** Whether the value for this property is invalid. */
        invalid?: boolean;
        /** Reason for the value being invalid, if it is. */
        invalidReason?: string;
    }
    interface AXRelatedNode {
        /** The BackendNodeId of the related DOM node. */
        backendDOMNodeId: DOM.BackendNodeId;
        /** The IDRef value provided, if any. */
        idref?: string;
        /** The text alternative of this node in the current context. */
        text?: string;
    }
    interface AXProperty {
        /** The name of this property. */
        name: AXPropertyName;
        /** The value of this property. */
        value: AXValue;
    }
    /** A single computed AX property. */
    interface AXValue {
        /** The type of this value. */
        type: AXValueType;
        /** The computed value of this property. */
        value?: any;
        /** One or more related nodes, if applicable. */
        relatedNodes?: AXRelatedNode[];
        /** The sources which contributed to the computation of this property. */
        sources?: AXValueSource[];
    }
    /** Values of AXProperty name: from 'busy' to 'roledescription' - states which apply to every AX
  node, from 'live' to 'root' - attributes which apply to nodes in live regions, from
  'autocomplete' to 'valuetext' - attributes which apply to widgets, from 'checked' to 'selected'
  - states which apply to widgets, from 'activedescendant' to 'owns' - relationships between
  elements other than parent/child/sibling. */
    type AXPropertyName = "busy" | "disabled" | "hidden" | "hiddenRoot" | "invalid" | "keyshortcuts" | "roledescription" | "live" | "atomic" | "relevant" | "root" | "autocomplete" | "haspopup" | "level" | "multiselectable" | "orientation" | "multiline" | "readonly" | "required" | "valuemin" | "valuemax" | "valuetext" | "checked" | "expanded" | "modal" | "pressed" | "selected" | "activedescendant" | "controls" | "describedby" | "details" | "errormessage" | "flowto" | "labelledby" | "owns";
    /** A node in the accessibility tree. */
    interface AXNode {
        /** Unique identifier for this node. */
        nodeId: AXNodeId;
        /** Whether this node is ignored for accessibility */
        ignored: boolean;
        /** Collection of reasons why this node is hidden. */
        ignoredReasons?: AXProperty[];
        /** This `Node`'s role, whether explicit or implicit. */
        role?: AXValue;
        /** The accessible name for this `Node`. */
        name?: AXValue;
        /** The accessible description for this `Node`. */
        description?: AXValue;
        /** The value for this `Node`. */
        value?: AXValue;
        /** All other properties */
        properties?: AXProperty[];
        /** IDs for each of this node's child nodes. */
        childIds?: AXNodeId[];
        /** The backend ID for the associated DOM node, if any. */
        backendDOMNodeId?: DOM.BackendNodeId;
    }
    type GetPartialAXTreeParameters = {
        /** ID of node to get the partial accessibility tree for. */
        nodeId: DOM.NodeId;
        /** Whether to fetch this nodes ancestors, siblings and children. Defaults to true. */
        fetchRelatives?: boolean;
    };
    type GetPartialAXTreeReturn = {
        /** The `Accessibility.AXNode` for this DOM node, if it exists, plus its ancestors, siblings and
    children, if requested. */
        nodes: AXNode[];
    };
}
export declare class Animation {
    private _animationCanceled;
    private _animationCreated;
    private _animationStarted;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Disables animation domain notifications. */
    disable(): Promise<void>;
    /** Enables animation domain notifications. */
    enable(): Promise<void>;
    /** Returns the current time of the an animation. */
    getCurrentTime(params: Animation.GetCurrentTimeParameters): Promise<Animation.GetCurrentTimeReturn>;
    /** Gets the playback rate of the document timeline. */
    getPlaybackRate(): Promise<Animation.GetPlaybackRateReturn>;
    /** Releases a set of animations to no longer be manipulated. */
    releaseAnimations(params: Animation.ReleaseAnimationsParameters): Promise<void>;
    /** Gets the remote object of the Animation. */
    resolveAnimation(params: Animation.ResolveAnimationParameters): Promise<Animation.ResolveAnimationReturn>;
    /** Seek a set of animations to a particular time within each animation. */
    seekAnimations(params: Animation.SeekAnimationsParameters): Promise<void>;
    /** Sets the paused state of a set of animations. */
    setPaused(params: Animation.SetPausedParameters): Promise<void>;
    /** Sets the playback rate of the document timeline. */
    setPlaybackRate(params: Animation.SetPlaybackRateParameters): Promise<void>;
    /** Sets the timing of an animation node. */
    setTiming(params: Animation.SetTimingParameters): Promise<void>;
    /** Event for when an animation has been cancelled. */
    animationCanceled: Animation.AnimationCanceledHandler | null;
    /** Event for each animation that has been created. */
    animationCreated: Animation.AnimationCreatedHandler | null;
    /** Event for animation that has been started. */
    animationStarted: Animation.AnimationStartedHandler | null;
}
export declare namespace Animation {
    /** Animation instance. */
    interface Animation {
        /** `Animation`'s id. */
        id: string;
        /** `Animation`'s name. */
        name: string;
        /** `Animation`'s internal paused state. */
        pausedState: boolean;
        /** `Animation`'s play state. */
        playState: string;
        /** `Animation`'s playback rate. */
        playbackRate: number;
        /** `Animation`'s start time. */
        startTime: number;
        /** `Animation`'s current time. */
        currentTime: number;
        /** Animation type of `Animation`. */
        type: "CSSTransition" | "CSSAnimation" | "WebAnimation";
        /** `Animation`'s source animation node. */
        source?: AnimationEffect;
        /** A unique ID for `Animation` representing the sources that triggered this CSS
    animation/transition. */
        cssId?: string;
    }
    /** AnimationEffect instance */
    interface AnimationEffect {
        /** `AnimationEffect`'s delay. */
        delay: number;
        /** `AnimationEffect`'s end delay. */
        endDelay: number;
        /** `AnimationEffect`'s iteration start. */
        iterationStart: number;
        /** `AnimationEffect`'s iterations. */
        iterations: number;
        /** `AnimationEffect`'s iteration duration. */
        duration: number;
        /** `AnimationEffect`'s playback direction. */
        direction: string;
        /** `AnimationEffect`'s fill mode. */
        fill: string;
        /** `AnimationEffect`'s target node. */
        backendNodeId?: DOM.BackendNodeId;
        /** `AnimationEffect`'s keyframes. */
        keyframesRule?: KeyframesRule;
        /** `AnimationEffect`'s timing function. */
        easing: string;
    }
    /** Keyframes Rule */
    interface KeyframesRule {
        /** CSS keyframed animation's name. */
        name?: string;
        /** List of animation keyframes. */
        keyframes: KeyframeStyle[];
    }
    /** Keyframe Style */
    interface KeyframeStyle {
        /** Keyframe's time offset. */
        offset: string;
        /** `AnimationEffect`'s timing function. */
        easing: string;
    }
    type AnimationCanceledParameters = {
        /** Id of the animation that was cancelled. */
        id: string;
    };
    type AnimationCanceledHandler = (params: AnimationCanceledParameters) => void;
    type AnimationCreatedParameters = {
        /** Id of the animation that was created. */
        id: string;
    };
    type AnimationCreatedHandler = (params: AnimationCreatedParameters) => void;
    type AnimationStartedParameters = {
        /** Animation that was started. */
        animation: Animation;
    };
    type AnimationStartedHandler = (params: AnimationStartedParameters) => void;
    type GetCurrentTimeParameters = {
        /** Id of animation. */
        id: string;
    };
    type GetCurrentTimeReturn = {
        /** Current time of the page. */
        currentTime: number;
    };
    type GetPlaybackRateReturn = {
        /** Playback rate for animations on page. */
        playbackRate: number;
    };
    type ReleaseAnimationsParameters = {
        /** List of animation ids to seek. */
        animations: string[];
    };
    type ResolveAnimationParameters = {
        /** Animation id. */
        animationId: string;
    };
    type ResolveAnimationReturn = {
        /** Corresponding remote object. */
        remoteObject: Runtime.RemoteObject;
    };
    type SeekAnimationsParameters = {
        /** List of animation ids to seek. */
        animations: string[];
        /** Set the current time of each animation. */
        currentTime: number;
    };
    type SetPausedParameters = {
        /** Animations to set the pause state of. */
        animations: string[];
        /** Paused state to set to. */
        paused: boolean;
    };
    type SetPlaybackRateParameters = {
        /** Playback rate for animations on page */
        playbackRate: number;
    };
    type SetTimingParameters = {
        /** Animation id. */
        animationId: string;
        /** Duration of the animation. */
        duration: number;
        /** Delay of the animation. */
        delay: number;
    };
}
export declare class ApplicationCache {
    private _applicationCacheStatusUpdated;
    private _networkStateUpdated;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Enables application cache domain notifications. */
    enable(): Promise<void>;
    /** Returns relevant application cache data for the document in given frame. */
    getApplicationCacheForFrame(params: ApplicationCache.GetApplicationCacheForFrameParameters): Promise<ApplicationCache.GetApplicationCacheForFrameReturn>;
    /** Returns array of frame identifiers with manifest urls for each frame containing a document
  associated with some application cache. */
    getFramesWithManifests(): Promise<ApplicationCache.GetFramesWithManifestsReturn>;
    /** Returns manifest URL for document in the given frame. */
    getManifestForFrame(params: ApplicationCache.GetManifestForFrameParameters): Promise<ApplicationCache.GetManifestForFrameReturn>;
    applicationCacheStatusUpdated: ApplicationCache.ApplicationCacheStatusUpdatedHandler | null;
    networkStateUpdated: ApplicationCache.NetworkStateUpdatedHandler | null;
}
export declare namespace ApplicationCache {
    /** Detailed application cache resource information. */
    interface ApplicationCacheResource {
        /** Resource url. */
        url: string;
        /** Resource size. */
        size: number;
        /** Resource type. */
        type: string;
    }
    /** Detailed application cache information. */
    interface ApplicationCache {
        /** Manifest URL. */
        manifestURL: string;
        /** Application cache size. */
        size: number;
        /** Application cache creation time. */
        creationTime: number;
        /** Application cache update time. */
        updateTime: number;
        /** Application cache resources. */
        resources: ApplicationCacheResource[];
    }
    /** Frame identifier - manifest URL pair. */
    interface FrameWithManifest {
        /** Frame identifier. */
        frameId: Page.FrameId;
        /** Manifest URL. */
        manifestURL: string;
        /** Application cache status. */
        status: number;
    }
    type ApplicationCacheStatusUpdatedParameters = {
        /** Identifier of the frame containing document whose application cache updated status. */
        frameId: Page.FrameId;
        /** Manifest URL. */
        manifestURL: string;
        /** Updated application cache status. */
        status: number;
    };
    type ApplicationCacheStatusUpdatedHandler = (params: ApplicationCacheStatusUpdatedParameters) => void;
    type NetworkStateUpdatedParameters = {
        isNowOnline: boolean;
    };
    type NetworkStateUpdatedHandler = (params: NetworkStateUpdatedParameters) => void;
    type GetApplicationCacheForFrameParameters = {
        /** Identifier of the frame containing document whose application cache is retrieved. */
        frameId: Page.FrameId;
    };
    type GetApplicationCacheForFrameReturn = {
        /** Relevant application cache data for the document in given frame. */
        applicationCache: ApplicationCache;
    };
    type GetFramesWithManifestsReturn = {
        /** Array of frame identifiers with manifest urls for each frame containing a document
    associated with some application cache. */
        frameIds: FrameWithManifest[];
    };
    type GetManifestForFrameParameters = {
        /** Identifier of the frame containing document whose manifest is retrieved. */
        frameId: Page.FrameId;
    };
    type GetManifestForFrameReturn = {
        /** Manifest URL for document in the given frame. */
        manifestURL: string;
    };
}
/** Audits domain allows investigation of page violations and possible improvements. */
export declare class Audits {
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Returns the response body and size if it were re-encoded with the specified settings. Only
  applies to images. */
    getEncodedResponse(params: Audits.GetEncodedResponseParameters): Promise<Audits.GetEncodedResponseReturn>;
}
export declare namespace Audits {
    type GetEncodedResponseParameters = {
        /** Identifier of the network request to get content for. */
        requestId: Network.RequestId;
        /** The encoding to use. */
        encoding: "webp" | "jpeg" | "png";
        /** The quality of the encoding (0-1). (defaults to 1) */
        quality?: number;
        /** Whether to only return the size information (defaults to false). */
        sizeOnly?: boolean;
    };
    type GetEncodedResponseReturn = {
        /** The encoded body as a base64 string. Omitted if sizeOnly is true. */
        body?: string;
        /** Size before re-encoding. */
        originalSize: number;
        /** Size after re-encoding. */
        encodedSize: number;
    };
}
/** The Browser domain defines methods and events for browser managing. */
export declare class Browser {
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Close browser gracefully. */
    close(): Promise<void>;
    /** Returns version information. */
    getVersion(): Promise<Browser.GetVersionReturn>;
    /** Get position and size of the browser window. */
    getWindowBounds(params: Browser.GetWindowBoundsParameters): Promise<Browser.GetWindowBoundsReturn>;
    /** Get the browser window that contains the devtools target. */
    getWindowForTarget(params: Browser.GetWindowForTargetParameters): Promise<Browser.GetWindowForTargetReturn>;
    /** Set position and/or size of the browser window. */
    setWindowBounds(params: Browser.SetWindowBoundsParameters): Promise<void>;
}
export declare namespace Browser {
    type WindowID = number;
    /** The state of the browser window. */
    type WindowState = "normal" | "minimized" | "maximized" | "fullscreen";
    /** Browser window bounds information */
    interface Bounds {
        /** The offset from the left edge of the screen to the window in pixels. */
        left?: number;
        /** The offset from the top edge of the screen to the window in pixels. */
        top?: number;
        /** The window width in pixels. */
        width?: number;
        /** The window height in pixels. */
        height?: number;
        /** The window state. Default to normal. */
        windowState?: WindowState;
    }
    type GetVersionReturn = {
        /** Protocol version. */
        protocolVersion: string;
        /** Product name. */
        product: string;
        /** Product revision. */
        revision: string;
        /** User-Agent. */
        userAgent: string;
        /** V8 version. */
        jsVersion: string;
    };
    type GetWindowBoundsParameters = {
        /** Browser window id. */
        windowId: WindowID;
    };
    type GetWindowBoundsReturn = {
        /** Bounds information of the window. When window state is 'minimized', the restored window
    position and size are returned. */
        bounds: Bounds;
    };
    type GetWindowForTargetParameters = {
        /** Devtools agent host id. */
        targetId: Target.TargetID;
    };
    type GetWindowForTargetReturn = {
        /** Browser window id. */
        windowId: WindowID;
        /** Bounds information of the window. When window state is 'minimized', the restored window
    position and size are returned. */
        bounds: Bounds;
    };
    type SetWindowBoundsParameters = {
        /** Browser window id. */
        windowId: WindowID;
        /** New window bounds. The 'minimized', 'maximized' and 'fullscreen' states cannot be combined
    with 'left', 'top', 'width' or 'height'. Leaves unspecified fields unchanged. */
        bounds: Bounds;
    };
}
/** This domain exposes CSS read/write operations. All CSS objects (stylesheets, rules, and styles)
have an associated `id` used in subsequent operations on the related object. Each object type has
a specific `id` structure, and those are not interchangeable between objects of different kinds.
CSS objects can be loaded using the `get*ForNode()` calls (which accept a DOM node id). A client
can also keep track of stylesheets via the `styleSheetAdded`/`styleSheetRemoved` events and
subsequently load the required stylesheet contents using the `getStyleSheet[Text]()` methods. */
export declare class CSS {
    private _fontsUpdated;
    private _mediaQueryResultChanged;
    private _styleSheetAdded;
    private _styleSheetChanged;
    private _styleSheetRemoved;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Inserts a new rule with the given `ruleText` in a stylesheet with given `styleSheetId`, at the
  position specified by `location`. */
    addRule(params: CSS.AddRuleParameters): Promise<CSS.AddRuleReturn>;
    /** Returns all class names from specified stylesheet. */
    collectClassNames(params: CSS.CollectClassNamesParameters): Promise<CSS.CollectClassNamesReturn>;
    /** Creates a new special "via-inspector" stylesheet in the frame with given `frameId`. */
    createStyleSheet(params: CSS.CreateStyleSheetParameters): Promise<CSS.CreateStyleSheetReturn>;
    /** Disables the CSS agent for the given page. */
    disable(): Promise<void>;
    /** Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been
  enabled until the result of this command is received. */
    enable(): Promise<void>;
    /** Ensures that the given node will have specified pseudo-classes whenever its style is computed by
  the browser. */
    forcePseudoState(params: CSS.ForcePseudoStateParameters): Promise<void>;
    getBackgroundColors(params: CSS.GetBackgroundColorsParameters): Promise<CSS.GetBackgroundColorsReturn>;
    /** Returns the computed style for a DOM node identified by `nodeId`. */
    getComputedStyleForNode(params: CSS.GetComputedStyleForNodeParameters): Promise<CSS.GetComputedStyleForNodeReturn>;
    /** Returns the styles defined inline (explicitly in the "style" attribute and implicitly, using DOM
  attributes) for a DOM node identified by `nodeId`. */
    getInlineStylesForNode(params: CSS.GetInlineStylesForNodeParameters): Promise<CSS.GetInlineStylesForNodeReturn>;
    /** Returns requested styles for a DOM node identified by `nodeId`. */
    getMatchedStylesForNode(params: CSS.GetMatchedStylesForNodeParameters): Promise<CSS.GetMatchedStylesForNodeReturn>;
    /** Returns all media queries parsed by the rendering engine. */
    getMediaQueries(): Promise<CSS.GetMediaQueriesReturn>;
    /** Requests information about platform fonts which we used to render child TextNodes in the given
  node. */
    getPlatformFontsForNode(params: CSS.GetPlatformFontsForNodeParameters): Promise<CSS.GetPlatformFontsForNodeReturn>;
    /** Returns the current textual content and the URL for a stylesheet. */
    getStyleSheetText(params: CSS.GetStyleSheetTextParameters): Promise<CSS.GetStyleSheetTextReturn>;
    /** Find a rule with the given active property for the given node and set the new value for this
  property */
    setEffectivePropertyValueForNode(params: CSS.SetEffectivePropertyValueForNodeParameters): Promise<void>;
    /** Modifies the keyframe rule key text. */
    setKeyframeKey(params: CSS.SetKeyframeKeyParameters): Promise<CSS.SetKeyframeKeyReturn>;
    /** Modifies the rule selector. */
    setMediaText(params: CSS.SetMediaTextParameters): Promise<CSS.SetMediaTextReturn>;
    /** Modifies the rule selector. */
    setRuleSelector(params: CSS.SetRuleSelectorParameters): Promise<CSS.SetRuleSelectorReturn>;
    /** Sets the new stylesheet text. */
    setStyleSheetText(params: CSS.SetStyleSheetTextParameters): Promise<CSS.SetStyleSheetTextReturn>;
    /** Applies specified style edits one after another in the given order. */
    setStyleTexts(params: CSS.SetStyleTextsParameters): Promise<CSS.SetStyleTextsReturn>;
    /** Enables the selector recording. */
    startRuleUsageTracking(): Promise<void>;
    /** The list of rules with an indication of whether these were used */
    stopRuleUsageTracking(): Promise<CSS.StopRuleUsageTrackingReturn>;
    /** Obtain list of rules that became used since last call to this method (or since start of coverage
  instrumentation) */
    takeCoverageDelta(): Promise<CSS.TakeCoverageDeltaReturn>;
    /** Fires whenever a web font gets loaded. */
    fontsUpdated: CSS.FontsUpdatedHandler | null;
    /** Fires whenever a MediaQuery result changes (for example, after a browser window has been
  resized.) The current implementation considers only viewport-dependent media features. */
    mediaQueryResultChanged: CSS.MediaQueryResultChangedHandler | null;
    /** Fired whenever an active document stylesheet is added. */
    styleSheetAdded: CSS.StyleSheetAddedHandler | null;
    /** Fired whenever a stylesheet is changed as a result of the client operation. */
    styleSheetChanged: CSS.StyleSheetChangedHandler | null;
    /** Fired whenever an active document stylesheet is removed. */
    styleSheetRemoved: CSS.StyleSheetRemovedHandler | null;
}
export declare namespace CSS {
    type StyleSheetId = string;
    /** Stylesheet type: "injected" for stylesheets injected via extension, "user-agent" for user-agent
  stylesheets, "inspector" for stylesheets created by the inspector (i.e. those holding the "via
  inspector" rules), "regular" for regular stylesheets. */
    type StyleSheetOrigin = "injected" | "user-agent" | "inspector" | "regular";
    /** CSS rule collection for a single pseudo style. */
    interface PseudoElementMatches {
        /** Pseudo element type. */
        pseudoType: DOM.PseudoType;
        /** Matches of CSS rules applicable to the pseudo style. */
        matches: RuleMatch[];
    }
    /** Inherited CSS rule collection from ancestor node. */
    interface InheritedStyleEntry {
        /** The ancestor node's inline style, if any, in the style inheritance chain. */
        inlineStyle?: CSSStyle;
        /** Matches of CSS rules matching the ancestor node in the style inheritance chain. */
        matchedCSSRules: RuleMatch[];
    }
    /** Match data for a CSS rule. */
    interface RuleMatch {
        /** CSS rule in the match. */
        rule: CSSRule;
        /** Matching selector indices in the rule's selectorList selectors (0-based). */
        matchingSelectors: number[];
    }
    /** Data for a simple selector (these are delimited by commas in a selector list). */
    interface Value {
        /** Value text. */
        text: string;
        /** Value range in the underlying resource (if available). */
        range?: SourceRange;
    }
    /** Selector list data. */
    interface SelectorList {
        /** Selectors in the list. */
        selectors: Value[];
        /** Rule selector text. */
        text: string;
    }
    /** CSS stylesheet metainformation. */
    interface CSSStyleSheetHeader {
        /** The stylesheet identifier. */
        styleSheetId: StyleSheetId;
        /** Owner frame identifier. */
        frameId: Page.FrameId;
        /** Stylesheet resource URL. */
        sourceURL: string;
        /** URL of source map associated with the stylesheet (if any). */
        sourceMapURL?: string;
        /** Stylesheet origin. */
        origin: StyleSheetOrigin;
        /** Stylesheet title. */
        title: string;
        /** The backend id for the owner node of the stylesheet. */
        ownerNode?: DOM.BackendNodeId;
        /** Denotes whether the stylesheet is disabled. */
        disabled: boolean;
        /** Whether the sourceURL field value comes from the sourceURL comment. */
        hasSourceURL?: boolean;
        /** Whether this stylesheet is created for STYLE tag by parser. This flag is not set for
    document.written STYLE tags. */
        isInline: boolean;
        /** Line offset of the stylesheet within the resource (zero based). */
        startLine: number;
        /** Column offset of the stylesheet within the resource (zero based). */
        startColumn: number;
        /** Size of the content (in characters). */
        length: number;
    }
    /** CSS rule representation. */
    interface CSSRule {
        /** The css style sheet identifier (absent for user agent stylesheet and user-specified
    stylesheet rules) this rule came from. */
        styleSheetId?: StyleSheetId;
        /** Rule selector data. */
        selectorList: SelectorList;
        /** Parent stylesheet's origin. */
        origin: StyleSheetOrigin;
        /** Associated style declaration. */
        style: CSSStyle;
        /** Media list array (for rules involving media queries). The array enumerates media queries
    starting with the innermost one, going outwards. */
        media?: CSSMedia[];
    }
    /** CSS coverage information. */
    interface RuleUsage {
        /** The css style sheet identifier (absent for user agent stylesheet and user-specified
    stylesheet rules) this rule came from. */
        styleSheetId: StyleSheetId;
        /** Offset of the start of the rule (including selector) from the beginning of the stylesheet. */
        startOffset: number;
        /** Offset of the end of the rule body from the beginning of the stylesheet. */
        endOffset: number;
        /** Indicates whether the rule was actually used by some element in the page. */
        used: boolean;
    }
    /** Text range within a resource. All numbers are zero-based. */
    interface SourceRange {
        /** Start line of range. */
        startLine: number;
        /** Start column of range (inclusive). */
        startColumn: number;
        /** End line of range */
        endLine: number;
        /** End column of range (exclusive). */
        endColumn: number;
    }
    interface ShorthandEntry {
        /** Shorthand name. */
        name: string;
        /** Shorthand value. */
        value: string;
        /** Whether the property has "!important" annotation (implies `false` if absent). */
        important?: boolean;
    }
    interface CSSComputedStyleProperty {
        /** Computed style property name. */
        name: string;
        /** Computed style property value. */
        value: string;
    }
    /** CSS style representation. */
    interface CSSStyle {
        /** The css style sheet identifier (absent for user agent stylesheet and user-specified
    stylesheet rules) this rule came from. */
        styleSheetId?: StyleSheetId;
        /** CSS properties in the style. */
        cssProperties: CSSProperty[];
        /** Computed values for all shorthands found in the style. */
        shorthandEntries: ShorthandEntry[];
        /** Style declaration text (if available). */
        cssText?: string;
        /** Style declaration range in the enclosing stylesheet (if available). */
        range?: SourceRange;
    }
    /** CSS property declaration data. */
    interface CSSProperty {
        /** The property name. */
        name: string;
        /** The property value. */
        value: string;
        /** Whether the property has "!important" annotation (implies `false` if absent). */
        important?: boolean;
        /** Whether the property is implicit (implies `false` if absent). */
        implicit?: boolean;
        /** The full property text as specified in the style. */
        text?: string;
        /** Whether the property is understood by the browser (implies `true` if absent). */
        parsedOk?: boolean;
        /** Whether the property is disabled by the user (present for source-based properties only). */
        disabled?: boolean;
        /** The entire property range in the enclosing style declaration (if available). */
        range?: SourceRange;
    }
    /** CSS media rule descriptor. */
    interface CSSMedia {
        /** Media query text. */
        text: string;
        /** Source of the media query: "mediaRule" if specified by a @media rule, "importRule" if
    specified by an @import rule, "linkedSheet" if specified by a "media" attribute in a linked
    stylesheet's LINK tag, "inlineSheet" if specified by a "media" attribute in an inline
    stylesheet's STYLE tag. */
        source: "mediaRule" | "importRule" | "linkedSheet" | "inlineSheet";
        /** URL of the document containing the media query description. */
        sourceURL?: string;
        /** The associated rule (@media or @import) header range in the enclosing stylesheet (if
    available). */
        range?: SourceRange;
        /** Identifier of the stylesheet containing this object (if exists). */
        styleSheetId?: StyleSheetId;
        /** Array of media queries. */
        mediaList?: MediaQuery[];
    }
    /** Media query descriptor. */
    interface MediaQuery {
        /** Array of media query expressions. */
        expressions: MediaQueryExpression[];
        /** Whether the media query condition is satisfied. */
        active: boolean;
    }
    /** Media query expression descriptor. */
    interface MediaQueryExpression {
        /** Media query expression value. */
        value: number;
        /** Media query expression units. */
        unit: string;
        /** Media query expression feature. */
        feature: string;
        /** The associated range of the value text in the enclosing stylesheet (if available). */
        valueRange?: SourceRange;
        /** Computed length of media query expression (if applicable). */
        computedLength?: number;
    }
    /** Information about amount of glyphs that were rendered with given font. */
    interface PlatformFontUsage {
        /** Font's family name reported by platform. */
        familyName: string;
        /** Indicates if the font was downloaded or resolved locally. */
        isCustomFont: boolean;
        /** Amount of glyphs that were rendered with this font. */
        glyphCount: number;
    }
    /** CSS keyframes rule representation. */
    interface CSSKeyframesRule {
        /** Animation name. */
        animationName: Value;
        /** List of keyframes. */
        keyframes: CSSKeyframeRule[];
    }
    /** CSS keyframe rule representation. */
    interface CSSKeyframeRule {
        /** The css style sheet identifier (absent for user agent stylesheet and user-specified
    stylesheet rules) this rule came from. */
        styleSheetId?: StyleSheetId;
        /** Parent stylesheet's origin. */
        origin: StyleSheetOrigin;
        /** Associated key text. */
        keyText: Value;
        /** Associated style declaration. */
        style: CSSStyle;
    }
    /** A descriptor of operation to mutate style declaration text. */
    interface StyleDeclarationEdit {
        /** The css style sheet identifier. */
        styleSheetId: StyleSheetId;
        /** The range of the style text in the enclosing stylesheet. */
        range: SourceRange;
        /** New style text. */
        text: string;
    }
    type FontsUpdatedHandler = () => void;
    type MediaQueryResultChangedHandler = () => void;
    type StyleSheetAddedParameters = {
        /** Added stylesheet metainfo. */
        header: CSSStyleSheetHeader;
    };
    type StyleSheetAddedHandler = (params: StyleSheetAddedParameters) => void;
    type StyleSheetChangedParameters = {
        styleSheetId: StyleSheetId;
    };
    type StyleSheetChangedHandler = (params: StyleSheetChangedParameters) => void;
    type StyleSheetRemovedParameters = {
        /** Identifier of the removed stylesheet. */
        styleSheetId: StyleSheetId;
    };
    type StyleSheetRemovedHandler = (params: StyleSheetRemovedParameters) => void;
    type AddRuleParameters = {
        /** The css style sheet identifier where a new rule should be inserted. */
        styleSheetId: StyleSheetId;
        /** The text of a new rule. */
        ruleText: string;
        /** Text position of a new rule in the target style sheet. */
        location: SourceRange;
    };
    type AddRuleReturn = {
        /** The newly created rule. */
        rule: CSSRule;
    };
    type CollectClassNamesParameters = {
        styleSheetId: StyleSheetId;
    };
    type CollectClassNamesReturn = {
        /** Class name list. */
        classNames: string[];
    };
    type CreateStyleSheetParameters = {
        /** Identifier of the frame where "via-inspector" stylesheet should be created. */
        frameId: Page.FrameId;
    };
    type CreateStyleSheetReturn = {
        /** Identifier of the created "via-inspector" stylesheet. */
        styleSheetId: StyleSheetId;
    };
    type ForcePseudoStateParameters = {
        /** The element id for which to force the pseudo state. */
        nodeId: DOM.NodeId;
        /** Element pseudo classes to force when computing the element's style. */
        forcedPseudoClasses: string[];
    };
    type GetBackgroundColorsParameters = {
        /** Id of the node to get background colors for. */
        nodeId: DOM.NodeId;
    };
    type GetBackgroundColorsReturn = {
        /** The range of background colors behind this element, if it contains any visible text. If no
    visible text is present, this will be undefined. In the case of a flat background color,
    this will consist of simply that color. In the case of a gradient, this will consist of each
    of the color stops. For anything more complicated, this will be an empty array. Images will
    be ignored (as if the image had failed to load). */
        backgroundColors?: string[];
        /** The computed font size for this node, as a CSS computed value string (e.g. '12px'). */
        computedFontSize?: string;
        /** The computed font weight for this node, as a CSS computed value string (e.g. 'normal' or
    '100'). */
        computedFontWeight?: string;
        /** The computed font size for the document body, as a computed CSS value string (e.g. '16px'). */
        computedBodyFontSize?: string;
    };
    type GetComputedStyleForNodeParameters = {
        nodeId: DOM.NodeId;
    };
    type GetComputedStyleForNodeReturn = {
        /** Computed style for the specified DOM node. */
        computedStyle: CSSComputedStyleProperty[];
    };
    type GetInlineStylesForNodeParameters = {
        nodeId: DOM.NodeId;
    };
    type GetInlineStylesForNodeReturn = {
        /** Inline style for the specified DOM node. */
        inlineStyle?: CSSStyle;
        /** Attribute-defined element style (e.g. resulting from "width=20 height=100%"). */
        attributesStyle?: CSSStyle;
    };
    type GetMatchedStylesForNodeParameters = {
        nodeId: DOM.NodeId;
    };
    type GetMatchedStylesForNodeReturn = {
        /** Inline style for the specified DOM node. */
        inlineStyle?: CSSStyle;
        /** Attribute-defined element style (e.g. resulting from "width=20 height=100%"). */
        attributesStyle?: CSSStyle;
        /** CSS rules matching this node, from all applicable stylesheets. */
        matchedCSSRules?: RuleMatch[];
        /** Pseudo style matches for this node. */
        pseudoElements?: PseudoElementMatches[];
        /** A chain of inherited styles (from the immediate node parent up to the DOM tree root). */
        inherited?: InheritedStyleEntry[];
        /** A list of CSS keyframed animations matching this node. */
        cssKeyframesRules?: CSSKeyframesRule[];
    };
    type GetMediaQueriesReturn = {
        medias: CSSMedia[];
    };
    type GetPlatformFontsForNodeParameters = {
        nodeId: DOM.NodeId;
    };
    type GetPlatformFontsForNodeReturn = {
        /** Usage statistics for every employed platform font. */
        fonts: PlatformFontUsage[];
    };
    type GetStyleSheetTextParameters = {
        styleSheetId: StyleSheetId;
    };
    type GetStyleSheetTextReturn = {
        /** The stylesheet text. */
        text: string;
    };
    type SetEffectivePropertyValueForNodeParameters = {
        /** The element id for which to set property. */
        nodeId: DOM.NodeId;
        propertyName: string;
        value: string;
    };
    type SetKeyframeKeyParameters = {
        styleSheetId: StyleSheetId;
        range: SourceRange;
        keyText: string;
    };
    type SetKeyframeKeyReturn = {
        /** The resulting key text after modification. */
        keyText: Value;
    };
    type SetMediaTextParameters = {
        styleSheetId: StyleSheetId;
        range: SourceRange;
        text: string;
    };
    type SetMediaTextReturn = {
        /** The resulting CSS media rule after modification. */
        media: CSSMedia;
    };
    type SetRuleSelectorParameters = {
        styleSheetId: StyleSheetId;
        range: SourceRange;
        selector: string;
    };
    type SetRuleSelectorReturn = {
        /** The resulting selector list after modification. */
        selectorList: SelectorList;
    };
    type SetStyleSheetTextParameters = {
        styleSheetId: StyleSheetId;
        text: string;
    };
    type SetStyleSheetTextReturn = {
        /** URL of source map associated with script (if any). */
        sourceMapURL?: string;
    };
    type SetStyleTextsParameters = {
        edits: StyleDeclarationEdit[];
    };
    type SetStyleTextsReturn = {
        /** The resulting styles after modification. */
        styles: CSSStyle[];
    };
    type StopRuleUsageTrackingReturn = {
        ruleUsage: RuleUsage[];
    };
    type TakeCoverageDeltaReturn = {
        coverage: RuleUsage[];
    };
}
export declare class CacheStorage {
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Deletes a cache. */
    deleteCache(params: CacheStorage.DeleteCacheParameters): Promise<void>;
    /** Deletes a cache entry. */
    deleteEntry(params: CacheStorage.DeleteEntryParameters): Promise<void>;
    /** Requests cache names. */
    requestCacheNames(params: CacheStorage.RequestCacheNamesParameters): Promise<CacheStorage.RequestCacheNamesReturn>;
    /** Fetches cache entry. */
    requestCachedResponse(params: CacheStorage.RequestCachedResponseParameters): Promise<CacheStorage.RequestCachedResponseReturn>;
    /** Requests data from cache. */
    requestEntries(params: CacheStorage.RequestEntriesParameters): Promise<CacheStorage.RequestEntriesReturn>;
}
export declare namespace CacheStorage {
    /** Unique identifier of the Cache object. */
    type CacheId = string;
    /** Data entry. */
    interface DataEntry {
        /** Request URL. */
        requestURL: string;
        /** Request method. */
        requestMethod: string;
        /** Request headers */
        requestHeaders: Header[];
        /** Number of seconds since epoch. */
        responseTime: number;
        /** HTTP response status code. */
        responseStatus: number;
        /** HTTP response status text. */
        responseStatusText: string;
        /** Response headers */
        responseHeaders: Header[];
    }
    /** Cache identifier. */
    interface Cache {
        /** An opaque unique id of the cache. */
        cacheId: CacheId;
        /** Security origin of the cache. */
        securityOrigin: string;
        /** The name of the cache. */
        cacheName: string;
    }
    interface Header {
        name: string;
        value: string;
    }
    /** Cached response */
    interface CachedResponse {
        /** Entry content, base64-encoded. */
        body: string;
    }
    type DeleteCacheParameters = {
        /** Id of cache for deletion. */
        cacheId: CacheId;
    };
    type DeleteEntryParameters = {
        /** Id of cache where the entry will be deleted. */
        cacheId: CacheId;
        /** URL spec of the request. */
        request: string;
    };
    type RequestCacheNamesParameters = {
        /** Security origin. */
        securityOrigin: string;
    };
    type RequestCacheNamesReturn = {
        /** Caches for the security origin. */
        caches: Cache[];
    };
    type RequestCachedResponseParameters = {
        /** Id of cache that contains the enty. */
        cacheId: CacheId;
        /** URL spec of the request. */
        requestURL: string;
    };
    type RequestCachedResponseReturn = {
        /** Response read from the cache. */
        response: CachedResponse;
    };
    type RequestEntriesParameters = {
        /** ID of cache to get entries from. */
        cacheId: CacheId;
        /** Number of records to skip. */
        skipCount: number;
        /** Number of records to fetch. */
        pageSize: number;
    };
    type RequestEntriesReturn = {
        /** Array of object store data entries. */
        cacheDataEntries: DataEntry[];
        /** If true, there are more entries to fetch in the given range. */
        hasMore: boolean;
    };
}
/** This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object
that has an `id`. This `id` can be used to get additional information on the Node, resolve it into
the JavaScript object wrapper, etc. It is important that client receives DOM events only for the
nodes that are known to the client. Backend keeps track of the nodes that were sent to the client
and never sends the same node twice. It is client's responsibility to collect information about
the nodes that were sent to the client.<p>Note that `iframe` owner elements will return
corresponding document elements as their child nodes.</p> */
export declare class DOM {
    private _attributeModified;
    private _attributeRemoved;
    private _characterDataModified;
    private _childNodeCountUpdated;
    private _childNodeInserted;
    private _childNodeRemoved;
    private _distributedNodesUpdated;
    private _documentUpdated;
    private _inlineStyleInvalidated;
    private _pseudoElementAdded;
    private _pseudoElementRemoved;
    private _setChildNodes;
    private _shadowRootPopped;
    private _shadowRootPushed;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Collects class names for the node with given id and all of it's child nodes. */
    collectClassNamesFromSubtree(params: DOM.CollectClassNamesFromSubtreeParameters): Promise<DOM.CollectClassNamesFromSubtreeReturn>;
    /** Creates a deep copy of the specified node and places it into the target container before the
  given anchor. */
    copyTo(params: DOM.CopyToParameters): Promise<DOM.CopyToReturn>;
    /** Describes node given its id, does not require domain to be enabled. Does not start tracking any
  objects, can be used for automation. */
    describeNode(params: DOM.DescribeNodeParameters): Promise<DOM.DescribeNodeReturn>;
    /** Disables DOM agent for the given page. */
    disable(): Promise<void>;
    /** Discards search results from the session with the given id. `getSearchResults` should no longer
  be called for that search. */
    discardSearchResults(params: DOM.DiscardSearchResultsParameters): Promise<void>;
    /** Enables DOM agent for the given page. */
    enable(): Promise<void>;
    /** Focuses the given element. */
    focus(params: DOM.FocusParameters): Promise<void>;
    /** Returns attributes for the specified node. */
    getAttributes(params: DOM.GetAttributesParameters): Promise<DOM.GetAttributesReturn>;
    /** Returns boxes for the given node. */
    getBoxModel(params: DOM.GetBoxModelParameters): Promise<DOM.GetBoxModelReturn>;
    /** Returns the root DOM node (and optionally the subtree) to the caller. */
    getDocument(params: DOM.GetDocumentParameters): Promise<DOM.GetDocumentReturn>;
    /** Returns the root DOM node (and optionally the subtree) to the caller. */
    getFlattenedDocument(params: DOM.GetFlattenedDocumentParameters): Promise<DOM.GetFlattenedDocumentReturn>;
    /** Returns node id at given location. */
    getNodeForLocation(params: DOM.GetNodeForLocationParameters): Promise<DOM.GetNodeForLocationReturn>;
    /** Returns node's HTML markup. */
    getOuterHTML(params: DOM.GetOuterHTMLParameters): Promise<DOM.GetOuterHTMLReturn>;
    /** Returns the id of the nearest ancestor that is a relayout boundary. */
    getRelayoutBoundary(params: DOM.GetRelayoutBoundaryParameters): Promise<DOM.GetRelayoutBoundaryReturn>;
    /** Returns search results from given `fromIndex` to given `toIndex` from the search with the given
  identifier. */
    getSearchResults(params: DOM.GetSearchResultsParameters): Promise<DOM.GetSearchResultsReturn>;
    /** Hides any highlight. */
    hideHighlight(): Promise<void>;
    /** Highlights DOM node. */
    highlightNode(): Promise<void>;
    /** Highlights given rectangle. */
    highlightRect(): Promise<void>;
    /** Marks last undoable state. */
    markUndoableState(): Promise<void>;
    /** Moves node into the new container, places it before the given anchor. */
    moveTo(params: DOM.MoveToParameters): Promise<DOM.MoveToReturn>;
    /** Searches for a given string in the DOM tree. Use `getSearchResults` to access search results or
  `cancelSearch` to end this search session. */
    performSearch(params: DOM.PerformSearchParameters): Promise<DOM.PerformSearchReturn>;
    /** Requests that the node is sent to the caller given its path. // FIXME, use XPath */
    pushNodeByPathToFrontend(params: DOM.PushNodeByPathToFrontendParameters): Promise<DOM.PushNodeByPathToFrontendReturn>;
    /** Requests that a batch of nodes is sent to the caller given their backend node ids. */
    pushNodesByBackendIdsToFrontend(params: DOM.PushNodesByBackendIdsToFrontendParameters): Promise<DOM.PushNodesByBackendIdsToFrontendReturn>;
    /** Executes `querySelector` on a given node. */
    querySelector(params: DOM.QuerySelectorParameters): Promise<DOM.QuerySelectorReturn>;
    /** Executes `querySelectorAll` on a given node. */
    querySelectorAll(params: DOM.QuerySelectorAllParameters): Promise<DOM.QuerySelectorAllReturn>;
    /** Re-does the last undone action. */
    redo(): Promise<void>;
    /** Removes attribute with given name from an element with given id. */
    removeAttribute(params: DOM.RemoveAttributeParameters): Promise<void>;
    /** Removes node with given id. */
    removeNode(params: DOM.RemoveNodeParameters): Promise<void>;
    /** Requests that children of the node with given id are returned to the caller in form of
  `setChildNodes` events where not only immediate children are retrieved, but all children down to
  the specified depth. */
    requestChildNodes(params: DOM.RequestChildNodesParameters): Promise<void>;
    /** Requests that the node is sent to the caller given the JavaScript node object reference. All
  nodes that form the path from the node to the root are also sent to the client as a series of
  `setChildNodes` notifications. */
    requestNode(params: DOM.RequestNodeParameters): Promise<DOM.RequestNodeReturn>;
    /** Resolves the JavaScript node object for a given NodeId or BackendNodeId. */
    resolveNode(params: DOM.ResolveNodeParameters): Promise<DOM.ResolveNodeReturn>;
    /** Sets attribute for an element with given id. */
    setAttributeValue(params: DOM.SetAttributeValueParameters): Promise<void>;
    /** Sets attributes on element with given id. This method is useful when user edits some existing
  attribute value and types in several attribute name/value pairs. */
    setAttributesAsText(params: DOM.SetAttributesAsTextParameters): Promise<void>;
    /** Sets files for the given file input element. */
    setFileInputFiles(params: DOM.SetFileInputFilesParameters): Promise<void>;
    /** Enables console to refer to the node with given id via $x (see Command Line API for more details
  $x functions). */
    setInspectedNode(params: DOM.SetInspectedNodeParameters): Promise<void>;
    /** Sets node name for a node with given id. */
    setNodeName(params: DOM.SetNodeNameParameters): Promise<DOM.SetNodeNameReturn>;
    /** Sets node value for a node with given id. */
    setNodeValue(params: DOM.SetNodeValueParameters): Promise<void>;
    /** Sets node HTML markup, returns new node id. */
    setOuterHTML(params: DOM.SetOuterHTMLParameters): Promise<void>;
    /** Undoes the last performed action. */
    undo(): Promise<void>;
    /** Fired when `Element`'s attribute is modified. */
    attributeModified: DOM.AttributeModifiedHandler | null;
    /** Fired when `Element`'s attribute is removed. */
    attributeRemoved: DOM.AttributeRemovedHandler | null;
    /** Mirrors `DOMCharacterDataModified` event. */
    characterDataModified: DOM.CharacterDataModifiedHandler | null;
    /** Fired when `Container`'s child node count has changed. */
    childNodeCountUpdated: DOM.ChildNodeCountUpdatedHandler | null;
    /** Mirrors `DOMNodeInserted` event. */
    childNodeInserted: DOM.ChildNodeInsertedHandler | null;
    /** Mirrors `DOMNodeRemoved` event. */
    childNodeRemoved: DOM.ChildNodeRemovedHandler | null;
    /** Called when distrubution is changed. */
    distributedNodesUpdated: DOM.DistributedNodesUpdatedHandler | null;
    /** Fired when `Document` has been totally updated. Node ids are no longer valid. */
    documentUpdated: DOM.DocumentUpdatedHandler | null;
    /** Fired when `Element`'s inline style is modified via a CSS property modification. */
    inlineStyleInvalidated: DOM.InlineStyleInvalidatedHandler | null;
    /** Called when a pseudo element is added to an element. */
    pseudoElementAdded: DOM.PseudoElementAddedHandler | null;
    /** Called when a pseudo element is removed from an element. */
    pseudoElementRemoved: DOM.PseudoElementRemovedHandler | null;
    /** Fired when backend wants to provide client with the missing DOM structure. This happens upon
  most of the calls requesting node ids. */
    setChildNodes: DOM.SetChildNodesHandler | null;
    /** Called when shadow root is popped from the element. */
    shadowRootPopped: DOM.ShadowRootPoppedHandler | null;
    /** Called when shadow root is pushed into the element. */
    shadowRootPushed: DOM.ShadowRootPushedHandler | null;
}
export declare namespace DOM {
    /** Unique DOM node identifier. */
    type NodeId = number;
    /** Unique DOM node identifier used to reference a node that may not have been pushed to the
  front-end. */
    type BackendNodeId = number;
    /** Backend node with a friendly name. */
    interface BackendNode {
        /** `Node`'s nodeType. */
        nodeType: number;
        /** `Node`'s nodeName. */
        nodeName: string;
        backendNodeId: BackendNodeId;
    }
    /** Pseudo element type. */
    type PseudoType = "first-line" | "first-letter" | "before" | "after" | "backdrop" | "selection" | "first-line-inherited" | "scrollbar" | "scrollbar-thumb" | "scrollbar-button" | "scrollbar-track" | "scrollbar-track-piece" | "scrollbar-corner" | "resizer" | "input-list-button";
    /** Shadow root type. */
    type ShadowRootType = "user-agent" | "open" | "closed";
    /** DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.
  DOMNode is a base node mirror type. */
    interface Node {
        /** Node identifier that is passed into the rest of the DOM messages as the `nodeId`. Backend
    will only push node with given `id` once. It is aware of all requested nodes and will only
    fire DOM events for nodes known to the client. */
        nodeId: NodeId;
        /** The id of the parent node if any. */
        parentId?: NodeId;
        /** The BackendNodeId for this node. */
        backendNodeId: BackendNodeId;
        /** `Node`'s nodeType. */
        nodeType: number;
        /** `Node`'s nodeName. */
        nodeName: string;
        /** `Node`'s localName. */
        localName: string;
        /** `Node`'s nodeValue. */
        nodeValue: string;
        /** Child count for `Container` nodes. */
        childNodeCount?: number;
        /** Child nodes of this node when requested with children. */
        children?: Node[];
        /** Attributes of the `Element` node in the form of flat array `[name1, value1, name2, value2]`. */
        attributes?: string[];
        /** Document URL that `Document` or `FrameOwner` node points to. */
        documentURL?: string;
        /** Base URL that `Document` or `FrameOwner` node uses for URL completion. */
        baseURL?: string;
        /** `DocumentType`'s publicId. */
        publicId?: string;
        /** `DocumentType`'s systemId. */
        systemId?: string;
        /** `DocumentType`'s internalSubset. */
        internalSubset?: string;
        /** `Document`'s XML version in case of XML documents. */
        xmlVersion?: string;
        /** `Attr`'s name. */
        name?: string;
        /** `Attr`'s value. */
        value?: string;
        /** Pseudo element type for this node. */
        pseudoType?: PseudoType;
        /** Shadow root type. */
        shadowRootType?: ShadowRootType;
        /** Frame ID for frame owner elements. */
        frameId?: Page.FrameId;
        /** Content document for frame owner elements. */
        contentDocument?: Node;
        /** Shadow root list for given element host. */
        shadowRoots?: Node[];
        /** Content document fragment for template elements. */
        templateContent?: Node;
        /** Pseudo elements associated with this node. */
        pseudoElements?: Node[];
        /** Import document for the HTMLImport links. */
        importedDocument?: Node;
        /** Distributed nodes for given insertion point. */
        distributedNodes?: BackendNode[];
        /** Whether the node is SVG. */
        isSVG?: boolean;
    }
    /** A structure holding an RGBA color. */
    interface RGBA {
        /** The red component, in the [0-255] range. */
        r: number;
        /** The green component, in the [0-255] range. */
        g: number;
        /** The blue component, in the [0-255] range. */
        b: number;
        /** The alpha component, in the [0-1] range (default: 1). */
        a?: number;
    }
    /** An array of quad vertices, x immediately followed by y for each point, points clock-wise. */
    type Quad = number[];
    /** Box model. */
    interface BoxModel {
        /** Content box */
        content: Quad;
        /** Padding box */
        padding: Quad;
        /** Border box */
        border: Quad;
        /** Margin box */
        margin: Quad;
        /** Node width */
        width: number;
        /** Node height */
        height: number;
        /** Shape outside coordinates */
        shapeOutside?: ShapeOutsideInfo;
    }
    /** CSS Shape Outside details. */
    interface ShapeOutsideInfo {
        /** Shape bounds */
        bounds: Quad;
        /** Shape coordinate details */
        shape: any[];
        /** Margin shape bounds */
        marginShape: any[];
    }
    /** Rectangle. */
    interface Rect {
        /** X coordinate */
        x: number;
        /** Y coordinate */
        y: number;
        /** Rectangle width */
        width: number;
        /** Rectangle height */
        height: number;
    }
    type AttributeModifiedParameters = {
        /** Id of the node that has changed. */
        nodeId: NodeId;
        /** Attribute name. */
        name: string;
        /** Attribute value. */
        value: string;
    };
    type AttributeModifiedHandler = (params: AttributeModifiedParameters) => void;
    type AttributeRemovedParameters = {
        /** Id of the node that has changed. */
        nodeId: NodeId;
        /** A ttribute name. */
        name: string;
    };
    type AttributeRemovedHandler = (params: AttributeRemovedParameters) => void;
    type CharacterDataModifiedParameters = {
        /** Id of the node that has changed. */
        nodeId: NodeId;
        /** New text value. */
        characterData: string;
    };
    type CharacterDataModifiedHandler = (params: CharacterDataModifiedParameters) => void;
    type ChildNodeCountUpdatedParameters = {
        /** Id of the node that has changed. */
        nodeId: NodeId;
        /** New node count. */
        childNodeCount: number;
    };
    type ChildNodeCountUpdatedHandler = (params: ChildNodeCountUpdatedParameters) => void;
    type ChildNodeInsertedParameters = {
        /** Id of the node that has changed. */
        parentNodeId: NodeId;
        /** If of the previous siblint. */
        previousNodeId: NodeId;
        /** Inserted node data. */
        node: Node;
    };
    type ChildNodeInsertedHandler = (params: ChildNodeInsertedParameters) => void;
    type ChildNodeRemovedParameters = {
        /** Parent id. */
        parentNodeId: NodeId;
        /** Id of the node that has been removed. */
        nodeId: NodeId;
    };
    type ChildNodeRemovedHandler = (params: ChildNodeRemovedParameters) => void;
    type DistributedNodesUpdatedParameters = {
        /** Insertion point where distrubuted nodes were updated. */
        insertionPointId: NodeId;
        /** Distributed nodes for given insertion point. */
        distributedNodes: BackendNode[];
    };
    type DistributedNodesUpdatedHandler = (params: DistributedNodesUpdatedParameters) => void;
    type DocumentUpdatedHandler = () => void;
    type InlineStyleInvalidatedParameters = {
        /** Ids of the nodes for which the inline styles have been invalidated. */
        nodeIds: NodeId[];
    };
    type InlineStyleInvalidatedHandler = (params: InlineStyleInvalidatedParameters) => void;
    type PseudoElementAddedParameters = {
        /** Pseudo element's parent element id. */
        parentId: NodeId;
        /** The added pseudo element. */
        pseudoElement: Node;
    };
    type PseudoElementAddedHandler = (params: PseudoElementAddedParameters) => void;
    type PseudoElementRemovedParameters = {
        /** Pseudo element's parent element id. */
        parentId: NodeId;
        /** The removed pseudo element id. */
        pseudoElementId: NodeId;
    };
    type PseudoElementRemovedHandler = (params: PseudoElementRemovedParameters) => void;
    type SetChildNodesParameters = {
        /** Parent node id to populate with children. */
        parentId: NodeId;
        /** Child nodes array. */
        nodes: Node[];
    };
    type SetChildNodesHandler = (params: SetChildNodesParameters) => void;
    type ShadowRootPoppedParameters = {
        /** Host element id. */
        hostId: NodeId;
        /** Shadow root id. */
        rootId: NodeId;
    };
    type ShadowRootPoppedHandler = (params: ShadowRootPoppedParameters) => void;
    type ShadowRootPushedParameters = {
        /** Host element id. */
        hostId: NodeId;
        /** Shadow root. */
        root: Node;
    };
    type ShadowRootPushedHandler = (params: ShadowRootPushedParameters) => void;
    type CollectClassNamesFromSubtreeParameters = {
        /** Id of the node to collect class names. */
        nodeId: NodeId;
    };
    type CollectClassNamesFromSubtreeReturn = {
        /** Class name list. */
        classNames: string[];
    };
    type CopyToParameters = {
        /** Id of the node to copy. */
        nodeId: NodeId;
        /** Id of the element to drop the copy into. */
        targetNodeId: NodeId;
        /** Drop the copy before this node (if absent, the copy becomes the last child of
    `targetNodeId`). */
        insertBeforeNodeId?: NodeId;
    };
    type CopyToReturn = {
        /** Id of the node clone. */
        nodeId: NodeId;
    };
    type DescribeNodeParameters = {
        /** Identifier of the node. */
        nodeId?: NodeId;
        /** Identifier of the backend node. */
        backendNodeId?: BackendNodeId;
        /** JavaScript object id of the node wrapper. */
        objectId?: Runtime.RemoteObjectId;
        /** The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the
    entire subtree or provide an integer larger than 0. */
        depth?: number;
        /** Whether or not iframes and shadow roots should be traversed when returning the subtree
    (default is false). */
        pierce?: boolean;
    };
    type DescribeNodeReturn = {
        /** Node description. */
        node: Node;
    };
    type DiscardSearchResultsParameters = {
        /** Unique search session identifier. */
        searchId: string;
    };
    type FocusParameters = {
        /** Identifier of the node. */
        nodeId?: NodeId;
        /** Identifier of the backend node. */
        backendNodeId?: BackendNodeId;
        /** JavaScript object id of the node wrapper. */
        objectId?: Runtime.RemoteObjectId;
    };
    type GetAttributesParameters = {
        /** Id of the node to retrieve attibutes for. */
        nodeId: NodeId;
    };
    type GetAttributesReturn = {
        /** An interleaved array of node attribute names and values. */
        attributes: string[];
    };
    type GetBoxModelParameters = {
        /** Identifier of the node. */
        nodeId?: NodeId;
        /** Identifier of the backend node. */
        backendNodeId?: BackendNodeId;
        /** JavaScript object id of the node wrapper. */
        objectId?: Runtime.RemoteObjectId;
    };
    type GetBoxModelReturn = {
        /** Box model for the node. */
        model: BoxModel;
    };
    type GetDocumentParameters = {
        /** The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the
    entire subtree or provide an integer larger than 0. */
        depth?: number;
        /** Whether or not iframes and shadow roots should be traversed when returning the subtree
    (default is false). */
        pierce?: boolean;
    };
    type GetDocumentReturn = {
        /** Resulting node. */
        root: Node;
    };
    type GetFlattenedDocumentParameters = {
        /** The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the
    entire subtree or provide an integer larger than 0. */
        depth?: number;
        /** Whether or not iframes and shadow roots should be traversed when returning the subtree
    (default is false). */
        pierce?: boolean;
    };
    type GetFlattenedDocumentReturn = {
        /** Resulting node. */
        nodes: Node[];
    };
    type GetNodeForLocationParameters = {
        /** X coordinate. */
        x: number;
        /** Y coordinate. */
        y: number;
        /** False to skip to the nearest non-UA shadow root ancestor (default: false). */
        includeUserAgentShadowDOM?: boolean;
    };
    type GetNodeForLocationReturn = {
        /** Id of the node at given coordinates. */
        nodeId: NodeId;
    };
    type GetOuterHTMLParameters = {
        /** Identifier of the node. */
        nodeId?: NodeId;
        /** Identifier of the backend node. */
        backendNodeId?: BackendNodeId;
        /** JavaScript object id of the node wrapper. */
        objectId?: Runtime.RemoteObjectId;
    };
    type GetOuterHTMLReturn = {
        /** Outer HTML markup. */
        outerHTML: string;
    };
    type GetRelayoutBoundaryParameters = {
        /** Id of the node. */
        nodeId: NodeId;
    };
    type GetRelayoutBoundaryReturn = {
        /** Relayout boundary node id for the given node. */
        nodeId: NodeId;
    };
    type GetSearchResultsParameters = {
        /** Unique search session identifier. */
        searchId: string;
        /** Start index of the search result to be returned. */
        fromIndex: number;
        /** End index of the search result to be returned. */
        toIndex: number;
    };
    type GetSearchResultsReturn = {
        /** Ids of the search result nodes. */
        nodeIds: NodeId[];
    };
    type MoveToParameters = {
        /** Id of the node to move. */
        nodeId: NodeId;
        /** Id of the element to drop the moved node into. */
        targetNodeId: NodeId;
        /** Drop node before this one (if absent, the moved node becomes the last child of
    `targetNodeId`). */
        insertBeforeNodeId?: NodeId;
    };
    type MoveToReturn = {
        /** New id of the moved node. */
        nodeId: NodeId;
    };
    type PerformSearchParameters = {
        /** Plain text or query selector or XPath search query. */
        query: string;
        /** True to search in user agent shadow DOM. */
        includeUserAgentShadowDOM?: boolean;
    };
    type PerformSearchReturn = {
        /** Unique search session identifier. */
        searchId: string;
        /** Number of search results. */
        resultCount: number;
    };
    type PushNodeByPathToFrontendParameters = {
        /** Path to node in the proprietary format. */
        path: string;
    };
    type PushNodeByPathToFrontendReturn = {
        /** Id of the node for given path. */
        nodeId: NodeId;
    };
    type PushNodesByBackendIdsToFrontendParameters = {
        /** The array of backend node ids. */
        backendNodeIds: BackendNodeId[];
    };
    type PushNodesByBackendIdsToFrontendReturn = {
        /** The array of ids of pushed nodes that correspond to the backend ids specified in
    backendNodeIds. */
        nodeIds: NodeId[];
    };
    type QuerySelectorParameters = {
        /** Id of the node to query upon. */
        nodeId: NodeId;
        /** Selector string. */
        selector: string;
    };
    type QuerySelectorReturn = {
        /** Query selector result. */
        nodeId: NodeId;
    };
    type QuerySelectorAllParameters = {
        /** Id of the node to query upon. */
        nodeId: NodeId;
        /** Selector string. */
        selector: string;
    };
    type QuerySelectorAllReturn = {
        /** Query selector result. */
        nodeIds: NodeId[];
    };
    type RemoveAttributeParameters = {
        /** Id of the element to remove attribute from. */
        nodeId: NodeId;
        /** Name of the attribute to remove. */
        name: string;
    };
    type RemoveNodeParameters = {
        /** Id of the node to remove. */
        nodeId: NodeId;
    };
    type RequestChildNodesParameters = {
        /** Id of the node to get children for. */
        nodeId: NodeId;
        /** The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the
    entire subtree or provide an integer larger than 0. */
        depth?: number;
        /** Whether or not iframes and shadow roots should be traversed when returning the sub-tree
    (default is false). */
        pierce?: boolean;
    };
    type RequestNodeParameters = {
        /** JavaScript object id to convert into node. */
        objectId: Runtime.RemoteObjectId;
    };
    type RequestNodeReturn = {
        /** Node id for given object. */
        nodeId: NodeId;
    };
    type ResolveNodeParameters = {
        /** Id of the node to resolve. */
        nodeId?: NodeId;
        /** Backend identifier of the node to resolve. */
        backendNodeId?: DOM.BackendNodeId;
        /** Symbolic group name that can be used to release multiple objects. */
        objectGroup?: string;
    };
    type ResolveNodeReturn = {
        /** JavaScript object wrapper for given node. */
        object: Runtime.RemoteObject;
    };
    type SetAttributeValueParameters = {
        /** Id of the element to set attribute for. */
        nodeId: NodeId;
        /** Attribute name. */
        name: string;
        /** Attribute value. */
        value: string;
    };
    type SetAttributesAsTextParameters = {
        /** Id of the element to set attributes for. */
        nodeId: NodeId;
        /** Text with a number of attributes. Will parse this text using HTML parser. */
        text: string;
        /** Attribute name to replace with new attributes derived from text in case text parsed
    successfully. */
        name?: string;
    };
    type SetFileInputFilesParameters = {
        /** Array of file paths to set. */
        files: string[];
        /** Identifier of the node. */
        nodeId?: NodeId;
        /** Identifier of the backend node. */
        backendNodeId?: BackendNodeId;
        /** JavaScript object id of the node wrapper. */
        objectId?: Runtime.RemoteObjectId;
    };
    type SetInspectedNodeParameters = {
        /** DOM node id to be accessible by means of $x command line API. */
        nodeId: NodeId;
    };
    type SetNodeNameParameters = {
        /** Id of the node to set name for. */
        nodeId: NodeId;
        /** New node's name. */
        name: string;
    };
    type SetNodeNameReturn = {
        /** New node's id. */
        nodeId: NodeId;
    };
    type SetNodeValueParameters = {
        /** Id of the node to set value for. */
        nodeId: NodeId;
        /** New node's value. */
        value: string;
    };
    type SetOuterHTMLParameters = {
        /** Id of the node to set markup for. */
        nodeId: NodeId;
        /** Outer HTML markup to set. */
        outerHTML: string;
    };
}
/** DOM debugging allows setting breakpoints on particular DOM operations and events. JavaScript
execution will stop on these operations as if there was a regular breakpoint set. */
export declare class DOMDebugger {
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Returns event listeners of the given object. */
    getEventListeners(params: DOMDebugger.GetEventListenersParameters): Promise<DOMDebugger.GetEventListenersReturn>;
    /** Removes DOM breakpoint that was set using `setDOMBreakpoint`. */
    removeDOMBreakpoint(params: DOMDebugger.RemoveDOMBreakpointParameters): Promise<void>;
    /** Removes breakpoint on particular DOM event. */
    removeEventListenerBreakpoint(params: DOMDebugger.RemoveEventListenerBreakpointParameters): Promise<void>;
    /** Removes breakpoint on particular native event. */
    removeInstrumentationBreakpoint(params: DOMDebugger.RemoveInstrumentationBreakpointParameters): Promise<void>;
    /** Removes breakpoint from XMLHttpRequest. */
    removeXHRBreakpoint(params: DOMDebugger.RemoveXHRBreakpointParameters): Promise<void>;
    /** Sets breakpoint on particular operation with DOM. */
    setDOMBreakpoint(params: DOMDebugger.SetDOMBreakpointParameters): Promise<void>;
    /** Sets breakpoint on particular DOM event. */
    setEventListenerBreakpoint(params: DOMDebugger.SetEventListenerBreakpointParameters): Promise<void>;
    /** Sets breakpoint on particular native event. */
    setInstrumentationBreakpoint(params: DOMDebugger.SetInstrumentationBreakpointParameters): Promise<void>;
    /** Sets breakpoint on XMLHttpRequest. */
    setXHRBreakpoint(params: DOMDebugger.SetXHRBreakpointParameters): Promise<void>;
}
export declare namespace DOMDebugger {
    /** DOM breakpoint type. */
    type DOMBreakpointType = "subtree-modified" | "attribute-modified" | "node-removed";
    /** Object event listener. */
    interface EventListener {
        /** `EventListener`'s type. */
        type: string;
        /** `EventListener`'s useCapture. */
        useCapture: boolean;
        /** `EventListener`'s passive flag. */
        passive: boolean;
        /** `EventListener`'s once flag. */
        once: boolean;
        /** Script id of the handler code. */
        scriptId: Runtime.ScriptId;
        /** Line number in the script (0-based). */
        lineNumber: number;
        /** Column number in the script (0-based). */
        columnNumber: number;
        /** Event handler function value. */
        handler?: Runtime.RemoteObject;
        /** Event original handler function value. */
        originalHandler?: Runtime.RemoteObject;
        /** Node the listener is added to (if any). */
        backendNodeId?: DOM.BackendNodeId;
    }
    type GetEventListenersParameters = {
        /** Identifier of the object to return listeners for. */
        objectId: Runtime.RemoteObjectId;
        /** The maximum depth at which Node children should be retrieved, defaults to 1. Use -1 for the
    entire subtree or provide an integer larger than 0. */
        depth?: number;
        /** Whether or not iframes and shadow roots should be traversed when returning the subtree
    (default is false). Reports listeners for all contexts if pierce is enabled. */
        pierce?: boolean;
    };
    type GetEventListenersReturn = {
        /** Array of relevant listeners. */
        listeners: EventListener[];
    };
    type RemoveDOMBreakpointParameters = {
        /** Identifier of the node to remove breakpoint from. */
        nodeId: DOM.NodeId;
        /** Type of the breakpoint to remove. */
        type: DOMBreakpointType;
    };
    type RemoveEventListenerBreakpointParameters = {
        /** Event name. */
        eventName: string;
        /** EventTarget interface name. */
        targetName?: string;
    };
    type RemoveInstrumentationBreakpointParameters = {
        /** Instrumentation name to stop on. */
        eventName: string;
    };
    type RemoveXHRBreakpointParameters = {
        /** Resource URL substring. */
        url: string;
    };
    type SetDOMBreakpointParameters = {
        /** Identifier of the node to set breakpoint on. */
        nodeId: DOM.NodeId;
        /** Type of the operation to stop upon. */
        type: DOMBreakpointType;
    };
    type SetEventListenerBreakpointParameters = {
        /** DOM Event name to stop on (any DOM event will do). */
        eventName: string;
        /** EventTarget interface name to stop on. If equal to `"*"` or not provided, will stop on any
    EventTarget. */
        targetName?: string;
    };
    type SetInstrumentationBreakpointParameters = {
        /** Instrumentation name to stop on. */
        eventName: string;
    };
    type SetXHRBreakpointParameters = {
        /** Resource URL substring. All XHRs having this substring in the URL will get stopped upon. */
        url: string;
    };
}
/** This domain facilitates obtaining document snapshots with DOM, layout, and style information. */
export declare class DOMSnapshot {
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Returns a document snapshot, including the full DOM tree of the root node (including iframes,
  template contents, and imported documents) in a flattened array, as well as layout and
  white-listed computed style information for the nodes. Shadow DOM in the returned DOM tree is
  flattened. */
    getSnapshot(params: DOMSnapshot.GetSnapshotParameters): Promise<DOMSnapshot.GetSnapshotReturn>;
}
export declare namespace DOMSnapshot {
    /** A Node in the DOM tree. */
    interface DOMNode {
        /** `Node`'s nodeType. */
        nodeType: number;
        /** `Node`'s nodeName. */
        nodeName: string;
        /** `Node`'s nodeValue. */
        nodeValue: string;
        /** Only set for textarea elements, contains the text value. */
        textValue?: string;
        /** Only set for input elements, contains the input's associated text value. */
        inputValue?: string;
        /** Only set for radio and checkbox input elements, indicates if the element has been checked */
        inputChecked?: boolean;
        /** Only set for option elements, indicates if the element has been selected */
        optionSelected?: boolean;
        /** `Node`'s id, corresponds to DOM.Node.backendNodeId. */
        backendNodeId: DOM.BackendNodeId;
        /** The indexes of the node's child nodes in the `domNodes` array returned by `getSnapshot`, if
    any. */
        childNodeIndexes?: number[];
        /** Attributes of an `Element` node. */
        attributes?: NameValue[];
        /** Indexes of pseudo elements associated with this node in the `domNodes` array returned by
    `getSnapshot`, if any. */
        pseudoElementIndexes?: number[];
        /** The index of the node's related layout tree node in the `layoutTreeNodes` array returned by
    `getSnapshot`, if any. */
        layoutNodeIndex?: number;
        /** Document URL that `Document` or `FrameOwner` node points to. */
        documentURL?: string;
        /** Base URL that `Document` or `FrameOwner` node uses for URL completion. */
        baseURL?: string;
        /** Only set for documents, contains the document's content language. */
        contentLanguage?: string;
        /** Only set for documents, contains the document's character set encoding. */
        documentEncoding?: string;
        /** `DocumentType` node's publicId. */
        publicId?: string;
        /** `DocumentType` node's systemId. */
        systemId?: string;
        /** Frame ID for frame owner elements and also for the document node. */
        frameId?: Page.FrameId;
        /** The index of a frame owner element's content document in the `domNodes` array returned by
    `getSnapshot`, if any. */
        contentDocumentIndex?: number;
        /** Index of the imported document's node of a link element in the `domNodes` array returned by
    `getSnapshot`, if any. */
        importedDocumentIndex?: number;
        /** Index of the content node of a template element in the `domNodes` array returned by
    `getSnapshot`. */
        templateContentIndex?: number;
        /** Type of a pseudo element node. */
        pseudoType?: DOM.PseudoType;
        /** Whether this DOM node responds to mouse clicks. This includes nodes that have had click
    event listeners attached via JavaScript as well as anchor tags that naturally navigate when
    clicked. */
        isClickable?: boolean;
    }
    /** Details of post layout rendered text positions. The exact layout should not be regarded as
  stable and may change between versions. */
    interface InlineTextBox {
        /** The absolute position bounding box. */
        boundingBox: DOM.Rect;
        /** The starting index in characters, for this post layout textbox substring. */
        startCharacterIndex: number;
        /** The number of characters in this post layout textbox substring. */
        numCharacters: number;
    }
    /** Details of an element in the DOM tree with a LayoutObject. */
    interface LayoutTreeNode {
        /** The index of the related DOM node in the `domNodes` array returned by `getSnapshot`. */
        domNodeIndex: number;
        /** The absolute position bounding box. */
        boundingBox: DOM.Rect;
        /** Contents of the LayoutText, if any. */
        layoutText?: string;
        /** The post-layout inline text nodes, if any. */
        inlineTextNodes?: InlineTextBox[];
        /** Index into the `computedStyles` array returned by `getSnapshot`. */
        styleIndex?: number;
    }
    /** A subset of the full ComputedStyle as defined by the request whitelist. */
    interface ComputedStyle {
        /** Name/value pairs of computed style properties. */
        properties: NameValue[];
    }
    /** A name/value pair. */
    interface NameValue {
        /** Attribute/property name. */
        name: string;
        /** Attribute/property value. */
        value: string;
    }
    type GetSnapshotParameters = {
        /** Whitelist of computed styles to return. */
        computedStyleWhitelist: string[];
    };
    type GetSnapshotReturn = {
        /** The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document. */
        domNodes: DOMNode[];
        /** The nodes in the layout tree. */
        layoutTreeNodes: LayoutTreeNode[];
        /** Whitelisted ComputedStyle properties for each node in the layout tree. */
        computedStyles: ComputedStyle[];
    };
}
/** Query and modify DOM storage. */
export declare class DOMStorage {
    private _domStorageItemAdded;
    private _domStorageItemRemoved;
    private _domStorageItemUpdated;
    private _domStorageItemsCleared;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    clear(params: DOMStorage.ClearParameters): Promise<void>;
    /** Disables storage tracking, prevents storage events from being sent to the client. */
    disable(): Promise<void>;
    /** Enables storage tracking, storage events will now be delivered to the client. */
    enable(): Promise<void>;
    getDOMStorageItems(params: DOMStorage.GetDOMStorageItemsParameters): Promise<DOMStorage.GetDOMStorageItemsReturn>;
    removeDOMStorageItem(params: DOMStorage.RemoveDOMStorageItemParameters): Promise<void>;
    setDOMStorageItem(params: DOMStorage.SetDOMStorageItemParameters): Promise<void>;
    domStorageItemAdded: DOMStorage.DomStorageItemAddedHandler | null;
    domStorageItemRemoved: DOMStorage.DomStorageItemRemovedHandler | null;
    domStorageItemUpdated: DOMStorage.DomStorageItemUpdatedHandler | null;
    domStorageItemsCleared: DOMStorage.DomStorageItemsClearedHandler | null;
}
export declare namespace DOMStorage {
    /** DOM Storage identifier. */
    interface StorageId {
        /** Security origin for the storage. */
        securityOrigin: string;
        /** Whether the storage is local storage (not session storage). */
        isLocalStorage: boolean;
    }
    /** DOM Storage item. */
    type Item = string[];
    type DomStorageItemAddedParameters = {
        storageId: StorageId;
        key: string;
        newValue: string;
    };
    type DomStorageItemAddedHandler = (params: DomStorageItemAddedParameters) => void;
    type DomStorageItemRemovedParameters = {
        storageId: StorageId;
        key: string;
    };
    type DomStorageItemRemovedHandler = (params: DomStorageItemRemovedParameters) => void;
    type DomStorageItemUpdatedParameters = {
        storageId: StorageId;
        key: string;
        oldValue: string;
        newValue: string;
    };
    type DomStorageItemUpdatedHandler = (params: DomStorageItemUpdatedParameters) => void;
    type DomStorageItemsClearedParameters = {
        storageId: StorageId;
    };
    type DomStorageItemsClearedHandler = (params: DomStorageItemsClearedParameters) => void;
    type ClearParameters = {
        storageId: StorageId;
    };
    type GetDOMStorageItemsParameters = {
        storageId: StorageId;
    };
    type GetDOMStorageItemsReturn = {
        entries: Item[];
    };
    type RemoveDOMStorageItemParameters = {
        storageId: StorageId;
        key: string;
    };
    type SetDOMStorageItemParameters = {
        storageId: StorageId;
        key: string;
        value: string;
    };
}
export declare class Database {
    private _addDatabase;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Disables database tracking, prevents database events from being sent to the client. */
    disable(): Promise<void>;
    /** Enables database tracking, database events will now be delivered to the client. */
    enable(): Promise<void>;
    executeSQL(params: Database.ExecuteSQLParameters): Promise<Database.ExecuteSQLReturn>;
    getDatabaseTableNames(params: Database.GetDatabaseTableNamesParameters): Promise<Database.GetDatabaseTableNamesReturn>;
    addDatabase: Database.AddDatabaseHandler | null;
}
export declare namespace Database {
    /** Unique identifier of Database object. */
    type DatabaseId = string;
    /** Database object. */
    interface Database {
        /** Database ID. */
        id: DatabaseId;
        /** Database domain. */
        domain: string;
        /** Database name. */
        name: string;
        /** Database version. */
        version: string;
    }
    /** Database error. */
    interface Error {
        /** Error message. */
        message: string;
        /** Error code. */
        code: number;
    }
    type AddDatabaseParameters = {
        database: Database;
    };
    type AddDatabaseHandler = (params: AddDatabaseParameters) => void;
    type ExecuteSQLParameters = {
        databaseId: DatabaseId;
        query: string;
    };
    type ExecuteSQLReturn = {
        columnNames?: string[];
        values?: any[];
        sqlError?: Error;
    };
    type GetDatabaseTableNamesParameters = {
        databaseId: DatabaseId;
    };
    type GetDatabaseTableNamesReturn = {
        tableNames: string[];
    };
}
export declare class DeviceOrientation {
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Clears the overridden Device Orientation. */
    clearDeviceOrientationOverride(): Promise<void>;
    /** Overrides the Device Orientation. */
    setDeviceOrientationOverride(params: DeviceOrientation.SetDeviceOrientationOverrideParameters): Promise<void>;
}
export declare namespace DeviceOrientation {
    type SetDeviceOrientationOverrideParameters = {
        /** Mock alpha */
        alpha: number;
        /** Mock beta */
        beta: number;
        /** Mock gamma */
        gamma: number;
    };
}
/** This domain emulates different environments for the page. */
export declare class Emulation {
    private _virtualTimeAdvanced;
    private _virtualTimeBudgetExpired;
    private _virtualTimePaused;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Tells whether emulation is supported. */
    canEmulate(): Promise<Emulation.CanEmulateReturn>;
    /** Clears the overriden device metrics. */
    clearDeviceMetricsOverride(): Promise<void>;
    /** Clears the overriden Geolocation Position and Error. */
    clearGeolocationOverride(): Promise<void>;
    /** Requests that page scale factor is reset to initial values. */
    resetPageScaleFactor(): Promise<void>;
    /** Enables CPU throttling to emulate slow CPUs. */
    setCPUThrottlingRate(params: Emulation.SetCPUThrottlingRateParameters): Promise<void>;
    /** Sets or clears an override of the default background color of the frame. This override is used
  if the content does not specify one. */
    setDefaultBackgroundColorOverride(params: Emulation.SetDefaultBackgroundColorOverrideParameters): Promise<void>;
    /** Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
  window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
  query results). */
    setDeviceMetricsOverride(params: Emulation.SetDeviceMetricsOverrideParameters): Promise<void>;
    setEmitTouchEventsForMouse(params: Emulation.SetEmitTouchEventsForMouseParameters): Promise<void>;
    /** Emulates the given media for CSS media queries. */
    setEmulatedMedia(params: Emulation.SetEmulatedMediaParameters): Promise<void>;
    /** Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
  unavailable. */
    setGeolocationOverride(params: Emulation.SetGeolocationOverrideParameters): Promise<void>;
    /** Overrides value returned by the javascript navigator object. */
    setNavigatorOverrides(params: Emulation.SetNavigatorOverridesParameters): Promise<void>;
    /** Sets a specified page scale factor. */
    setPageScaleFactor(params: Emulation.SetPageScaleFactorParameters): Promise<void>;
    /** Switches script execution in the page. */
    setScriptExecutionDisabled(params: Emulation.SetScriptExecutionDisabledParameters): Promise<void>;
    /** Enables touch on platforms which do not support them. */
    setTouchEmulationEnabled(params: Emulation.SetTouchEmulationEnabledParameters): Promise<void>;
    /** Turns on virtual time for all frames (replacing real-time with a synthetic time source) and sets
  the current virtual time policy.  Note this supersedes any previous time budget. */
    setVirtualTimePolicy(params: Emulation.SetVirtualTimePolicyParameters): Promise<Emulation.SetVirtualTimePolicyReturn>;
    /** Resizes the frame/viewport of the page. Note that this does not affect the frame's container
  (e.g. browser window). Can be used to produce screenshots of the specified size. Not supported
  on Android. */
    setVisibleSize(params: Emulation.SetVisibleSizeParameters): Promise<void>;
    /** Notification sent after the virtual time has advanced. */
    virtualTimeAdvanced: Emulation.VirtualTimeAdvancedHandler | null;
    /** Notification sent after the virtual time budget for the current VirtualTimePolicy has run out. */
    virtualTimeBudgetExpired: Emulation.VirtualTimeBudgetExpiredHandler | null;
    /** Notification sent after the virtual time has paused. */
    virtualTimePaused: Emulation.VirtualTimePausedHandler | null;
}
export declare namespace Emulation {
    /** Screen orientation. */
    interface ScreenOrientation {
        /** Orientation type. */
        type: "portraitPrimary" | "portraitSecondary" | "landscapePrimary" | "landscapeSecondary";
        /** Orientation angle. */
        angle: number;
    }
    /** advance: If the scheduler runs out of immediate work, the virtual time base may fast forward to
  allow the next delayed task (if any) to run; pause: The virtual time base may not advance;
  pauseIfNetworkFetchesPending: The virtual time base may not advance if there are any pending
  resource fetches. */
    type VirtualTimePolicy = "advance" | "pause" | "pauseIfNetworkFetchesPending";
    type VirtualTimeAdvancedParameters = {
        /** The amount of virtual time that has elapsed in milliseconds since virtual time was first
    enabled. */
        virtualTimeElapsed: number;
    };
    type VirtualTimeAdvancedHandler = (params: VirtualTimeAdvancedParameters) => void;
    type VirtualTimeBudgetExpiredHandler = () => void;
    type VirtualTimePausedParameters = {
        /** The amount of virtual time that has elapsed in milliseconds since virtual time was first
    enabled. */
        virtualTimeElapsed: number;
    };
    type VirtualTimePausedHandler = (params: VirtualTimePausedParameters) => void;
    type CanEmulateReturn = {
        /** True if emulation is supported. */
        result: boolean;
    };
    type SetCPUThrottlingRateParameters = {
        /** Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc). */
        rate: number;
    };
    type SetDefaultBackgroundColorOverrideParameters = {
        /** RGBA of the default background color. If not specified, any existing override will be
    cleared. */
        color?: DOM.RGBA;
    };
    type SetDeviceMetricsOverrideParameters = {
        /** Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override. */
        width: number;
        /** Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override. */
        height: number;
        /** Overriding device scale factor value. 0 disables the override. */
        deviceScaleFactor: number;
        /** Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text
    autosizing and more. */
        mobile: boolean;
        /** Scale to apply to resulting view image. */
        scale?: number;
        /** Overriding screen width value in pixels (minimum 0, maximum 10000000). */
        screenWidth?: number;
        /** Overriding screen height value in pixels (minimum 0, maximum 10000000). */
        screenHeight?: number;
        /** Overriding view X position on screen in pixels (minimum 0, maximum 10000000). */
        positionX?: number;
        /** Overriding view Y position on screen in pixels (minimum 0, maximum 10000000). */
        positionY?: number;
        /** Do not set visible view size, rely upon explicit setVisibleSize call. */
        dontSetVisibleSize?: boolean;
        /** Screen orientation override. */
        screenOrientation?: ScreenOrientation;
        /** If set, the visible area of the page will be overridden to this viewport. This viewport
    change is not observed by the page, e.g. viewport-relative elements do not change positions. */
        viewport?: Page.Viewport;
    };
    type SetEmitTouchEventsForMouseParameters = {
        /** Whether touch emulation based on mouse input should be enabled. */
        enabled: boolean;
        /** Touch/gesture events configuration. Default: current platform. */
        configuration?: "mobile" | "desktop";
    };
    type SetEmulatedMediaParameters = {
        /** Media type to emulate. Empty string disables the override. */
        media: string;
    };
    type SetGeolocationOverrideParameters = {
        /** Mock latitude */
        latitude?: number;
        /** Mock longitude */
        longitude?: number;
        /** Mock accuracy */
        accuracy?: number;
    };
    type SetNavigatorOverridesParameters = {
        /** The platform navigator.platform should return. */
        platform: string;
    };
    type SetPageScaleFactorParameters = {
        /** Page scale factor. */
        pageScaleFactor: number;
    };
    type SetScriptExecutionDisabledParameters = {
        /** Whether script execution should be disabled in the page. */
        value: boolean;
    };
    type SetTouchEmulationEnabledParameters = {
        /** Whether the touch event emulation should be enabled. */
        enabled: boolean;
        /** Maximum touch points supported. Defaults to one. */
        maxTouchPoints?: number;
    };
    type SetVirtualTimePolicyParameters = {
        policy: VirtualTimePolicy;
        /** If set, after this many virtual milliseconds have elapsed virtual time will be paused and a
    virtualTimeBudgetExpired event is sent. */
        budget?: number;
        /** If set this specifies the maximum number of tasks that can be run before virtual is forced
    forwards to prevent deadlock. */
        maxVirtualTimeTaskStarvationCount?: number;
    };
    type SetVirtualTimePolicyReturn = {
        /** Absolute timestamp at which virtual time was first enabled (milliseconds since epoch). */
        virtualTimeBase: Runtime.Timestamp;
    };
    type SetVisibleSizeParameters = {
        /** Frame width (DIP). */
        width: number;
        /** Frame height (DIP). */
        height: number;
    };
}
/** This domain provides experimental commands only supported in headless mode. */
export declare class HeadlessExperimental {
    private _mainFrameReadyForScreenshots;
    private _needsBeginFramesChanged;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Sends a BeginFrame to the target and returns when the frame was completed. Optionally captures a
  screenshot from the resulting frame. Requires that the target was created with enabled
  BeginFrameControl. */
    beginFrame(params: HeadlessExperimental.BeginFrameParameters): Promise<HeadlessExperimental.BeginFrameReturn>;
    /** Disables headless events for the target. */
    disable(): Promise<void>;
    /** Enables headless events for the target. */
    enable(): Promise<void>;
    /** Issued when the main frame has first submitted a frame to the browser. May only be fired while a
  BeginFrame is in flight. Before this event, screenshotting requests may fail. */
    mainFrameReadyForScreenshots: HeadlessExperimental.MainFrameReadyForScreenshotsHandler | null;
    /** Issued when the target starts or stops needing BeginFrames. */
    needsBeginFramesChanged: HeadlessExperimental.NeedsBeginFramesChangedHandler | null;
}
export declare namespace HeadlessExperimental {
    /** Encoding options for a screenshot. */
    interface ScreenshotParams {
        /** Image compression format (defaults to png). */
        format?: "jpeg" | "png";
        /** Compression quality from range [0..100] (jpeg only). */
        quality?: number;
    }
    type MainFrameReadyForScreenshotsHandler = () => void;
    type NeedsBeginFramesChangedParameters = {
        /** True if BeginFrames are needed, false otherwise. */
        needsBeginFrames: boolean;
    };
    type NeedsBeginFramesChangedHandler = (params: NeedsBeginFramesChangedParameters) => void;
    type BeginFrameParameters = {
        /** Timestamp of this BeginFrame (milliseconds since epoch). If not set, the current time will
    be used. */
        frameTime?: Runtime.Timestamp;
        /** Deadline of this BeginFrame (milliseconds since epoch). If not set, the deadline will be
    calculated from the frameTime and interval. */
        deadline?: Runtime.Timestamp;
        /** The interval between BeginFrames that is reported to the compositor, in milliseconds.
    Defaults to a 60 frames/second interval, i.e. about 16.666 milliseconds. */
        interval?: number;
        /** If set, a screenshot of the frame will be captured and returned in the response. Otherwise,
    no screenshot will be captured. */
        screenshot?: ScreenshotParams;
    };
    type BeginFrameReturn = {
        /** Whether the BeginFrame resulted in damage and, thus, a new frame was committed to the
    display. */
        hasDamage: boolean;
        /** Whether the main frame submitted a new display frame in response to this BeginFrame. */
        mainFrameContentUpdated: boolean;
        /** Base64-encoded image data of the screenshot, if one was requested and successfully taken. */
        screenshotData?: string;
    };
}
/** Input/Output operations for streams produced by DevTools. */
export declare class IO {
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Close the stream, discard any temporary backing storage. */
    close(params: IO.CloseParameters): Promise<void>;
    /** Read a chunk of the stream */
    read(params: IO.ReadParameters): Promise<IO.ReadReturn>;
    /** Return UUID of Blob object specified by a remote object id. */
    resolveBlob(params: IO.ResolveBlobParameters): Promise<IO.ResolveBlobReturn>;
}
export declare namespace IO {
    /** This is either obtained from another method or specifed as `blob:&lt;uuid&gt;` where
  `&lt;uuid&gt` is an UUID of a Blob. */
    type StreamHandle = string;
    type CloseParameters = {
        /** Handle of the stream to close. */
        handle: StreamHandle;
    };
    type ReadParameters = {
        /** Handle of the stream to read. */
        handle: StreamHandle;
        /** Seek to the specified offset before reading (if not specificed, proceed with offset
    following the last read). */
        offset?: number;
        /** Maximum number of bytes to read (left upon the agent discretion if not specified). */
        size?: number;
    };
    type ReadReturn = {
        /** Set if the data is base64-encoded */
        base64Encoded?: boolean;
        /** Data that were read. */
        data: string;
        /** Set if the end-of-file condition occured while reading. */
        eof: boolean;
    };
    type ResolveBlobParameters = {
        /** Object id of a Blob object wrapper. */
        objectId: Runtime.RemoteObjectId;
    };
    type ResolveBlobReturn = {
        /** UUID of the specified Blob. */
        uuid: string;
    };
}
export declare class IndexedDB {
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Clears all entries from an object store. */
    clearObjectStore(params: IndexedDB.ClearObjectStoreParameters): Promise<void>;
    /** Deletes a database. */
    deleteDatabase(params: IndexedDB.DeleteDatabaseParameters): Promise<void>;
    /** Delete a range of entries from an object store */
    deleteObjectStoreEntries(params: IndexedDB.DeleteObjectStoreEntriesParameters): Promise<void>;
    /** Disables events from backend. */
    disable(): Promise<void>;
    /** Enables events from backend. */
    enable(): Promise<void>;
    /** Requests data from object store or index. */
    requestData(params: IndexedDB.RequestDataParameters): Promise<IndexedDB.RequestDataReturn>;
    /** Requests database with given name in given frame. */
    requestDatabase(params: IndexedDB.RequestDatabaseParameters): Promise<IndexedDB.RequestDatabaseReturn>;
    /** Requests database names for given security origin. */
    requestDatabaseNames(params: IndexedDB.RequestDatabaseNamesParameters): Promise<IndexedDB.RequestDatabaseNamesReturn>;
}
export declare namespace IndexedDB {
    /** Database with an array of object stores. */
    interface DatabaseWithObjectStores {
        /** Database name. */
        name: string;
        /** Database version. */
        version: number;
        /** Object stores in this database. */
        objectStores: ObjectStore[];
    }
    /** Object store. */
    interface ObjectStore {
        /** Object store name. */
        name: string;
        /** Object store key path. */
        keyPath: KeyPath;
        /** If true, object store has auto increment flag set. */
        autoIncrement: boolean;
        /** Indexes in this object store. */
        indexes: ObjectStoreIndex[];
    }
    /** Object store index. */
    interface ObjectStoreIndex {
        /** Index name. */
        name: string;
        /** Index key path. */
        keyPath: KeyPath;
        /** If true, index is unique. */
        unique: boolean;
        /** If true, index allows multiple entries for a key. */
        multiEntry: boolean;
    }
    /** Key. */
    interface Key {
        /** Key type. */
        type: "number" | "string" | "date" | "array";
        /** Number value. */
        number?: number;
        /** String value. */
        string?: string;
        /** Date value. */
        date?: number;
        /** Array value. */
        array?: Key[];
    }
    /** Key range. */
    interface KeyRange {
        /** Lower bound. */
        lower?: Key;
        /** Upper bound. */
        upper?: Key;
        /** If true lower bound is open. */
        lowerOpen: boolean;
        /** If true upper bound is open. */
        upperOpen: boolean;
    }
    /** Data entry. */
    interface DataEntry {
        /** Key object. */
        key: Runtime.RemoteObject;
        /** Primary key object. */
        primaryKey: Runtime.RemoteObject;
        /** Value object. */
        value: Runtime.RemoteObject;
    }
    /** Key path. */
    interface KeyPath {
        /** Key path type. */
        type: "null" | "string" | "array";
        /** String value. */
        string?: string;
        /** Array value. */
        array?: string[];
    }
    type ClearObjectStoreParameters = {
        /** Security origin. */
        securityOrigin: string;
        /** Database name. */
        databaseName: string;
        /** Object store name. */
        objectStoreName: string;
    };
    type DeleteDatabaseParameters = {
        /** Security origin. */
        securityOrigin: string;
        /** Database name. */
        databaseName: string;
    };
    type DeleteObjectStoreEntriesParameters = {
        securityOrigin: string;
        databaseName: string;
        objectStoreName: string;
        /** Range of entry keys to delete */
        keyRange: KeyRange;
    };
    type RequestDataParameters = {
        /** Security origin. */
        securityOrigin: string;
        /** Database name. */
        databaseName: string;
        /** Object store name. */
        objectStoreName: string;
        /** Index name, empty string for object store data requests. */
        indexName: string;
        /** Number of records to skip. */
        skipCount: number;
        /** Number of records to fetch. */
        pageSize: number;
        /** Key range. */
        keyRange?: KeyRange;
    };
    type RequestDataReturn = {
        /** Array of object store data entries. */
        objectStoreDataEntries: DataEntry[];
        /** If true, there are more entries to fetch in the given range. */
        hasMore: boolean;
    };
    type RequestDatabaseParameters = {
        /** Security origin. */
        securityOrigin: string;
        /** Database name. */
        databaseName: string;
    };
    type RequestDatabaseReturn = {
        /** Database with an array of object stores. */
        databaseWithObjectStores: DatabaseWithObjectStores;
    };
    type RequestDatabaseNamesParameters = {
        /** Security origin. */
        securityOrigin: string;
    };
    type RequestDatabaseNamesReturn = {
        /** Database names for origin. */
        databaseNames: string[];
    };
}
export declare class Input {
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Dispatches a key event to the page. */
    dispatchKeyEvent(params: Input.DispatchKeyEventParameters): Promise<void>;
    /** Dispatches a mouse event to the page. */
    dispatchMouseEvent(params: Input.DispatchMouseEventParameters): Promise<void>;
    /** Dispatches a touch event to the page. */
    dispatchTouchEvent(params: Input.DispatchTouchEventParameters): Promise<void>;
    /** Emulates touch event from the mouse event parameters. */
    emulateTouchFromMouseEvent(params: Input.EmulateTouchFromMouseEventParameters): Promise<void>;
    /** Ignores input events (useful while auditing page). */
    setIgnoreInputEvents(params: Input.SetIgnoreInputEventsParameters): Promise<void>;
    /** Synthesizes a pinch gesture over a time period by issuing appropriate touch events. */
    synthesizePinchGesture(params: Input.SynthesizePinchGestureParameters): Promise<void>;
    /** Synthesizes a scroll gesture over a time period by issuing appropriate touch events. */
    synthesizeScrollGesture(params: Input.SynthesizeScrollGestureParameters): Promise<void>;
    /** Synthesizes a tap gesture over a time period by issuing appropriate touch events. */
    synthesizeTapGesture(params: Input.SynthesizeTapGestureParameters): Promise<void>;
}
export declare namespace Input {
    interface TouchPoint {
        /** X coordinate of the event relative to the main frame's viewport in CSS pixels. */
        x: number;
        /** Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to
    the top of the viewport and Y increases as it proceeds towards the bottom of the viewport. */
        y: number;
        /** X radius of the touch area (default: 1.0). */
        radiusX?: number;
        /** Y radius of the touch area (default: 1.0). */
        radiusY?: number;
        /** Rotation angle (default: 0.0). */
        rotationAngle?: number;
        /** Force (default: 1.0). */
        force?: number;
        /** Identifier used to track touch sources between events, must be unique within an event. */
        id?: number;
    }
    type GestureSourceType = "default" | "touch" | "mouse";
    /** UTC time in seconds, counted from January 1, 1970. */
    type TimeSinceEpoch = number;
    type DispatchKeyEventParameters = {
        /** Type of the key event. */
        type: "keyDown" | "keyUp" | "rawKeyDown" | "char";
        /** Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
    (default: 0). */
        modifiers?: number;
        /** Time at which the event occurred. */
        timestamp?: TimeSinceEpoch;
        /** Text as generated by processing a virtual key code with a keyboard layout. Not needed for
    for `keyUp` and `rawKeyDown` events (default: "") */
        text?: string;
        /** Text that would have been generated by the keyboard if no modifiers were pressed (except for
    shift). Useful for shortcut (accelerator) key handling (default: ""). */
        unmodifiedText?: string;
        /** Unique key identifier (e.g., 'U+0041') (default: ""). */
        keyIdentifier?: string;
        /** Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: ""). */
        code?: string;
        /** Unique DOM defined string value describing the meaning of the key in the context of active
    modifiers, keyboard layout, etc (e.g., 'AltGr') (default: ""). */
        key?: string;
        /** Windows virtual key code (default: 0). */
        windowsVirtualKeyCode?: number;
        /** Native virtual key code (default: 0). */
        nativeVirtualKeyCode?: number;
        /** Whether the event was generated from auto repeat (default: false). */
        autoRepeat?: boolean;
        /** Whether the event was generated from the keypad (default: false). */
        isKeypad?: boolean;
        /** Whether the event was a system key event (default: false). */
        isSystemKey?: boolean;
        /** Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default:
    0). */
        location?: number;
    };
    type DispatchMouseEventParameters = {
        /** Type of the mouse event. */
        type: "mousePressed" | "mouseReleased" | "mouseMoved" | "mouseWheel";
        /** X coordinate of the event relative to the main frame's viewport in CSS pixels. */
        x: number;
        /** Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to
    the top of the viewport and Y increases as it proceeds towards the bottom of the viewport. */
        y: number;
        /** Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
    (default: 0). */
        modifiers?: number;
        /** Time at which the event occurred. */
        timestamp?: TimeSinceEpoch;
        /** Mouse button (default: "none"). */
        button?: "none" | "left" | "middle" | "right";
        /** Number of times the mouse button was clicked (default: 0). */
        clickCount?: number;
        /** X delta in CSS pixels for mouse wheel event (default: 0). */
        deltaX?: number;
        /** Y delta in CSS pixels for mouse wheel event (default: 0). */
        deltaY?: number;
    };
    type DispatchTouchEventParameters = {
        /** Type of the touch event. TouchEnd and TouchCancel must not contain any touch points, while
    TouchStart and TouchMove must contains at least one. */
        type: "touchStart" | "touchEnd" | "touchMove" | "touchCancel";
        /** Active touch points on the touch device. One event per any changed point (compared to
    previous touch event in a sequence) is generated, emulating pressing/moving/releasing points
    one by one. */
        touchPoints: TouchPoint[];
        /** Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
    (default: 0). */
        modifiers?: number;
        /** Time at which the event occurred. */
        timestamp?: TimeSinceEpoch;
    };
    type EmulateTouchFromMouseEventParameters = {
        /** Type of the mouse event. */
        type: "mousePressed" | "mouseReleased" | "mouseMoved" | "mouseWheel";
        /** X coordinate of the mouse pointer in DIP. */
        x: number;
        /** Y coordinate of the mouse pointer in DIP. */
        y: number;
        /** Time at which the event occurred. */
        timestamp: TimeSinceEpoch;
        /** Mouse button. */
        button: "none" | "left" | "middle" | "right";
        /** X delta in DIP for mouse wheel event (default: 0). */
        deltaX?: number;
        /** Y delta in DIP for mouse wheel event (default: 0). */
        deltaY?: number;
        /** Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
    (default: 0). */
        modifiers?: number;
        /** Number of times the mouse button was clicked (default: 0). */
        clickCount?: number;
    };
    type SetIgnoreInputEventsParameters = {
        /** Ignores input events processing when set to true. */
        ignore: boolean;
    };
    type SynthesizePinchGestureParameters = {
        /** X coordinate of the start of the gesture in CSS pixels. */
        x: number;
        /** Y coordinate of the start of the gesture in CSS pixels. */
        y: number;
        /** Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out). */
        scaleFactor: number;
        /** Relative pointer speed in pixels per second (default: 800). */
        relativeSpeed?: number;
        /** Which type of input events to be generated (default: 'default', which queries the platform
    for the preferred input type). */
        gestureSourceType?: GestureSourceType;
    };
    type SynthesizeScrollGestureParameters = {
        /** X coordinate of the start of the gesture in CSS pixels. */
        x: number;
        /** Y coordinate of the start of the gesture in CSS pixels. */
        y: number;
        /** The distance to scroll along the X axis (positive to scroll left). */
        xDistance?: number;
        /** The distance to scroll along the Y axis (positive to scroll up). */
        yDistance?: number;
        /** The number of additional pixels to scroll back along the X axis, in addition to the given
    distance. */
        xOverscroll?: number;
        /** The number of additional pixels to scroll back along the Y axis, in addition to the given
    distance. */
        yOverscroll?: number;
        /** Prevent fling (default: true). */
        preventFling?: boolean;
        /** Swipe speed in pixels per second (default: 800). */
        speed?: number;
        /** Which type of input events to be generated (default: 'default', which queries the platform
    for the preferred input type). */
        gestureSourceType?: GestureSourceType;
        /** The number of times to repeat the gesture (default: 0). */
        repeatCount?: number;
        /** The number of milliseconds delay between each repeat. (default: 250). */
        repeatDelayMs?: number;
        /** The name of the interaction markers to generate, if not empty (default: ""). */
        interactionMarkerName?: string;
    };
    type SynthesizeTapGestureParameters = {
        /** X coordinate of the start of the gesture in CSS pixels. */
        x: number;
        /** Y coordinate of the start of the gesture in CSS pixels. */
        y: number;
        /** Duration between touchdown and touchup events in ms (default: 50). */
        duration?: number;
        /** Number of times to perform the tap (e.g. 2 for double tap, default: 1). */
        tapCount?: number;
        /** Which type of input events to be generated (default: 'default', which queries the platform
    for the preferred input type). */
        gestureSourceType?: GestureSourceType;
    };
}
export declare class Inspector {
    private _detached;
    private _targetCrashed;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Disables inspector domain notifications. */
    disable(): Promise<void>;
    /** Enables inspector domain notifications. */
    enable(): Promise<void>;
    /** Fired when remote debugging connection is about to be terminated. Contains detach reason. */
    detached: Inspector.DetachedHandler | null;
    /** Fired when debugging target has crashed */
    targetCrashed: Inspector.TargetCrashedHandler | null;
}
export declare namespace Inspector {
    type DetachedParameters = {
        /** The reason why connection has been terminated. */
        reason: string;
    };
    type DetachedHandler = (params: DetachedParameters) => void;
    type TargetCrashedHandler = () => void;
}
export declare class LayerTree {
    private _layerPainted;
    private _layerTreeDidChange;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Provides the reasons why the given layer was composited. */
    compositingReasons(params: LayerTree.CompositingReasonsParameters): Promise<LayerTree.CompositingReasonsReturn>;
    /** Disables compositing tree inspection. */
    disable(): Promise<void>;
    /** Enables compositing tree inspection. */
    enable(): Promise<void>;
    /** Returns the snapshot identifier. */
    loadSnapshot(params: LayerTree.LoadSnapshotParameters): Promise<LayerTree.LoadSnapshotReturn>;
    /** Returns the layer snapshot identifier. */
    makeSnapshot(params: LayerTree.MakeSnapshotParameters): Promise<LayerTree.MakeSnapshotReturn>;
    profileSnapshot(params: LayerTree.ProfileSnapshotParameters): Promise<LayerTree.ProfileSnapshotReturn>;
    /** Releases layer snapshot captured by the back-end. */
    releaseSnapshot(params: LayerTree.ReleaseSnapshotParameters): Promise<void>;
    /** Replays the layer snapshot and returns the resulting bitmap. */
    replaySnapshot(params: LayerTree.ReplaySnapshotParameters): Promise<LayerTree.ReplaySnapshotReturn>;
    /** Replays the layer snapshot and returns canvas log. */
    snapshotCommandLog(params: LayerTree.SnapshotCommandLogParameters): Promise<LayerTree.SnapshotCommandLogReturn>;
    layerPainted: LayerTree.LayerPaintedHandler | null;
    layerTreeDidChange: LayerTree.LayerTreeDidChangeHandler | null;
}
export declare namespace LayerTree {
    /** Unique Layer identifier. */
    type LayerId = string;
    /** Unique snapshot identifier. */
    type SnapshotId = string;
    /** Rectangle where scrolling happens on the main thread. */
    interface ScrollRect {
        /** Rectangle itself. */
        rect: DOM.Rect;
        /** Reason for rectangle to force scrolling on the main thread */
        type: "RepaintsOnScroll" | "TouchEventHandler" | "WheelEventHandler";
    }
    /** Sticky position constraints. */
    interface StickyPositionConstraint {
        /** Layout rectangle of the sticky element before being shifted */
        stickyBoxRect: DOM.Rect;
        /** Layout rectangle of the containing block of the sticky element */
        containingBlockRect: DOM.Rect;
        /** The nearest sticky layer that shifts the sticky box */
        nearestLayerShiftingStickyBox?: LayerId;
        /** The nearest sticky layer that shifts the containing block */
        nearestLayerShiftingContainingBlock?: LayerId;
    }
    /** Serialized fragment of layer picture along with its offset within the layer. */
    interface PictureTile {
        /** Offset from owning layer left boundary */
        x: number;
        /** Offset from owning layer top boundary */
        y: number;
        /** Base64-encoded snapshot data. */
        picture: string;
    }
    /** Information about a compositing layer. */
    interface Layer {
        /** The unique id for this layer. */
        layerId: LayerId;
        /** The id of parent (not present for root). */
        parentLayerId?: LayerId;
        /** The backend id for the node associated with this layer. */
        backendNodeId?: DOM.BackendNodeId;
        /** Offset from parent layer, X coordinate. */
        offsetX: number;
        /** Offset from parent layer, Y coordinate. */
        offsetY: number;
        /** Layer width. */
        width: number;
        /** Layer height. */
        height: number;
        /** Transformation matrix for layer, default is identity matrix */
        transform?: number[];
        /** Transform anchor point X, absent if no transform specified */
        anchorX?: number;
        /** Transform anchor point Y, absent if no transform specified */
        anchorY?: number;
        /** Transform anchor point Z, absent if no transform specified */
        anchorZ?: number;
        /** Indicates how many time this layer has painted. */
        paintCount: number;
        /** Indicates whether this layer hosts any content, rather than being used for
    transform/scrolling purposes only. */
        drawsContent: boolean;
        /** Set if layer is not visible. */
        invisible?: boolean;
        /** Rectangles scrolling on main thread only. */
        scrollRects?: ScrollRect[];
        /** Sticky position constraint information */
        stickyPositionConstraint?: StickyPositionConstraint;
    }
    /** Array of timings, one per paint step. */
    type PaintProfile = number[];
    type LayerPaintedParameters = {
        /** The id of the painted layer. */
        layerId: LayerId;
        /** Clip rectangle. */
        clip: DOM.Rect;
    };
    type LayerPaintedHandler = (params: LayerPaintedParameters) => void;
    type LayerTreeDidChangeParameters = {
        /** Layer tree, absent if not in the comspositing mode. */
        layers?: Layer[];
    };
    type LayerTreeDidChangeHandler = (params: LayerTreeDidChangeParameters) => void;
    type CompositingReasonsParameters = {
        /** The id of the layer for which we want to get the reasons it was composited. */
        layerId: LayerId;
    };
    type CompositingReasonsReturn = {
        /** A list of strings specifying reasons for the given layer to become composited. */
        compositingReasons: string[];
    };
    type LoadSnapshotParameters = {
        /** An array of tiles composing the snapshot. */
        tiles: PictureTile[];
    };
    type LoadSnapshotReturn = {
        /** The id of the snapshot. */
        snapshotId: SnapshotId;
    };
    type MakeSnapshotParameters = {
        /** The id of the layer. */
        layerId: LayerId;
    };
    type MakeSnapshotReturn = {
        /** The id of the layer snapshot. */
        snapshotId: SnapshotId;
    };
    type ProfileSnapshotParameters = {
        /** The id of the layer snapshot. */
        snapshotId: SnapshotId;
        /** The maximum number of times to replay the snapshot (1, if not specified). */
        minRepeatCount?: number;
        /** The minimum duration (in seconds) to replay the snapshot. */
        minDuration?: number;
        /** The clip rectangle to apply when replaying the snapshot. */
        clipRect?: DOM.Rect;
    };
    type ProfileSnapshotReturn = {
        /** The array of paint profiles, one per run. */
        timings: PaintProfile[];
    };
    type ReleaseSnapshotParameters = {
        /** The id of the layer snapshot. */
        snapshotId: SnapshotId;
    };
    type ReplaySnapshotParameters = {
        /** The id of the layer snapshot. */
        snapshotId: SnapshotId;
        /** The first step to replay from (replay from the very start if not specified). */
        fromStep?: number;
        /** The last step to replay to (replay till the end if not specified). */
        toStep?: number;
        /** The scale to apply while replaying (defaults to 1). */
        scale?: number;
    };
    type ReplaySnapshotReturn = {
        /** A data: URL for resulting image. */
        dataURL: string;
    };
    type SnapshotCommandLogParameters = {
        /** The id of the layer snapshot. */
        snapshotId: SnapshotId;
    };
    type SnapshotCommandLogReturn = {
        /** The array of canvas function calls. */
        commandLog: any[];
    };
}
/** Provides access to log entries. */
export declare class Log {
    private _entryAdded;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Clears the log. */
    clear(): Promise<void>;
    /** Disables log domain, prevents further log entries from being reported to the client. */
    disable(): Promise<void>;
    /** Enables log domain, sends the entries collected so far to the client by means of the
  `entryAdded` notification. */
    enable(): Promise<void>;
    /** start violation reporting. */
    startViolationsReport(params: Log.StartViolationsReportParameters): Promise<void>;
    /** Stop violation reporting. */
    stopViolationsReport(): Promise<void>;
    /** Issued when new message was logged. */
    entryAdded: Log.EntryAddedHandler | null;
}
export declare namespace Log {
    /** Log entry. */
    interface LogEntry {
        /** Log entry source. */
        source: "xml" | "javascript" | "network" | "storage" | "appcache" | "rendering" | "security" | "deprecation" | "worker" | "violation" | "intervention" | "recommendation" | "other";
        /** Log entry severity. */
        level: "verbose" | "info" | "warning" | "error";
        /** Logged text. */
        text: string;
        /** Timestamp when this entry was added. */
        timestamp: Runtime.Timestamp;
        /** URL of the resource if known. */
        url?: string;
        /** Line number in the resource. */
        lineNumber?: number;
        /** JavaScript stack trace. */
        stackTrace?: Runtime.StackTrace;
        /** Identifier of the network request associated with this entry. */
        networkRequestId?: Network.RequestId;
        /** Identifier of the worker associated with this entry. */
        workerId?: string;
        /** Call arguments. */
        args?: Runtime.RemoteObject[];
    }
    /** Violation configuration setting. */
    interface ViolationSetting {
        /** Violation type. */
        name: "longTask" | "longLayout" | "blockedEvent" | "blockedParser" | "discouragedAPIUse" | "handler" | "recurringHandler";
        /** Time threshold to trigger upon. */
        threshold: number;
    }
    type EntryAddedParameters = {
        /** The entry. */
        entry: LogEntry;
    };
    type EntryAddedHandler = (params: EntryAddedParameters) => void;
    type StartViolationsReportParameters = {
        /** Configuration for violations. */
        config: ViolationSetting[];
    };
}
export declare class Memory {
    private _client;
    constructor(client: IDebuggingProtocolClient);
    getDOMCounters(): Promise<Memory.GetDOMCountersReturn>;
    prepareForLeakDetection(): Promise<void>;
    /** Enable/disable suppressing memory pressure notifications in all processes. */
    setPressureNotificationsSuppressed(params: Memory.SetPressureNotificationsSuppressedParameters): Promise<void>;
    /** Simulate a memory pressure notification in all processes. */
    simulatePressureNotification(params: Memory.SimulatePressureNotificationParameters): Promise<void>;
}
export declare namespace Memory {
    /** Memory pressure level. */
    type PressureLevel = "moderate" | "critical";
    type GetDOMCountersReturn = {
        documents: number;
        nodes: number;
        jsEventListeners: number;
    };
    type SetPressureNotificationsSuppressedParameters = {
        /** If true, memory pressure notifications will be suppressed. */
        suppressed: boolean;
    };
    type SimulatePressureNotificationParameters = {
        /** Memory pressure level of the notification. */
        level: PressureLevel;
    };
}
/** Network domain allows tracking network activities of the page. It exposes information about http,
file, data and other requests and responses, their headers, bodies, timing, etc. */
export declare class Network {
    private _dataReceived;
    private _eventSourceMessageReceived;
    private _loadingFailed;
    private _loadingFinished;
    private _requestIntercepted;
    private _requestServedFromCache;
    private _requestWillBeSent;
    private _resourceChangedPriority;
    private _responseReceived;
    private _webSocketClosed;
    private _webSocketCreated;
    private _webSocketFrameError;
    private _webSocketFrameReceived;
    private _webSocketFrameSent;
    private _webSocketHandshakeResponseReceived;
    private _webSocketWillSendHandshakeRequest;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Tells whether clearing browser cache is supported. */
    canClearBrowserCache(): Promise<Network.CanClearBrowserCacheReturn>;
    /** Tells whether clearing browser cookies is supported. */
    canClearBrowserCookies(): Promise<Network.CanClearBrowserCookiesReturn>;
    /** Tells whether emulation of network conditions is supported. */
    canEmulateNetworkConditions(): Promise<Network.CanEmulateNetworkConditionsReturn>;
    /** Clears browser cache. */
    clearBrowserCache(): Promise<void>;
    /** Clears browser cookies. */
    clearBrowserCookies(): Promise<void>;
    /** Response to Network.requestIntercepted which either modifies the request to continue with any
  modifications, or blocks it, or completes it with the provided response bytes. If a network
  fetch occurs as a result which encounters a redirect an additional Network.requestIntercepted
  event will be sent with the same InterceptionId. */
    continueInterceptedRequest(params: Network.ContinueInterceptedRequestParameters): Promise<void>;
    /** Deletes browser cookies with matching name and url or domain/path pair. */
    deleteCookies(params: Network.DeleteCookiesParameters): Promise<void>;
    /** Disables network tracking, prevents network events from being sent to the client. */
    disable(): Promise<void>;
    /** Activates emulation of network conditions. */
    emulateNetworkConditions(params: Network.EmulateNetworkConditionsParameters): Promise<void>;
    /** Enables network tracking, network events will now be delivered to the client. */
    enable(params: Network.EnableParameters): Promise<void>;
    /** Returns all browser cookies. Depending on the backend support, will return detailed cookie
  information in the `cookies` field. */
    getAllCookies(): Promise<Network.GetAllCookiesReturn>;
    /** Returns the DER-encoded certificate. */
    getCertificate(params: Network.GetCertificateParameters): Promise<Network.GetCertificateReturn>;
    /** Returns all browser cookies for the current URL. Depending on the backend support, will return
  detailed cookie information in the `cookies` field. */
    getCookies(params: Network.GetCookiesParameters): Promise<Network.GetCookiesReturn>;
    /** Returns content served for the given request. */
    getResponseBody(params: Network.GetResponseBodyParameters): Promise<Network.GetResponseBodyReturn>;
    /** Returns content served for the given currently intercepted request. */
    getResponseBodyForInterception(params: Network.GetResponseBodyForInterceptionParameters): Promise<Network.GetResponseBodyForInterceptionReturn>;
    /** This method sends a new XMLHttpRequest which is identical to the original one. The following
  parameters should be identical: method, url, async, request body, extra headers, withCredentials
  attribute, user, password. */
    replayXHR(params: Network.ReplayXHRParameters): Promise<void>;
    /** Searches for given string in response content. */
    searchInResponseBody(params: Network.SearchInResponseBodyParameters): Promise<Network.SearchInResponseBodyReturn>;
    /** Blocks URLs from loading. */
    setBlockedURLs(params: Network.SetBlockedURLsParameters): Promise<void>;
    /** Toggles ignoring of service worker for each request. */
    setBypassServiceWorker(params: Network.SetBypassServiceWorkerParameters): Promise<void>;
    /** Toggles ignoring cache for each request. If `true`, cache will not be used. */
    setCacheDisabled(params: Network.SetCacheDisabledParameters): Promise<void>;
    /** Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist. */
    setCookie(params: Network.SetCookieParameters): Promise<Network.SetCookieReturn>;
    /** Sets given cookies. */
    setCookies(params: Network.SetCookiesParameters): Promise<void>;
    /** For testing. */
    setDataSizeLimitsForTest(params: Network.SetDataSizeLimitsForTestParameters): Promise<void>;
    /** Specifies whether to always send extra HTTP headers with the requests from this page. */
    setExtraHTTPHeaders(params: Network.SetExtraHTTPHeadersParameters): Promise<void>;
    /** Sets the requests to intercept that match a the provided patterns and optionally resource types. */
    setRequestInterception(params: Network.SetRequestInterceptionParameters): Promise<void>;
    /** Allows overriding user agent with the given string. */
    setUserAgentOverride(params: Network.SetUserAgentOverrideParameters): Promise<void>;
    /** Fired when data chunk was received over the network. */
    dataReceived: Network.DataReceivedHandler | null;
    /** Fired when EventSource message is received. */
    eventSourceMessageReceived: Network.EventSourceMessageReceivedHandler | null;
    /** Fired when HTTP request has failed to load. */
    loadingFailed: Network.LoadingFailedHandler | null;
    /** Fired when HTTP request has finished loading. */
    loadingFinished: Network.LoadingFinishedHandler | null;
    /** Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
  mocked. */
    requestIntercepted: Network.RequestInterceptedHandler | null;
    /** Fired if request ended up loading from cache. */
    requestServedFromCache: Network.RequestServedFromCacheHandler | null;
    /** Fired when page is about to send HTTP request. */
    requestWillBeSent: Network.RequestWillBeSentHandler | null;
    /** Fired when resource loading priority is changed */
    resourceChangedPriority: Network.ResourceChangedPriorityHandler | null;
    /** Fired when HTTP response is available. */
    responseReceived: Network.ResponseReceivedHandler | null;
    /** Fired when WebSocket is closed. */
    webSocketClosed: Network.WebSocketClosedHandler | null;
    /** Fired upon WebSocket creation. */
    webSocketCreated: Network.WebSocketCreatedHandler | null;
    /** Fired when WebSocket frame error occurs. */
    webSocketFrameError: Network.WebSocketFrameErrorHandler | null;
    /** Fired when WebSocket frame is received. */
    webSocketFrameReceived: Network.WebSocketFrameReceivedHandler | null;
    /** Fired when WebSocket frame is sent. */
    webSocketFrameSent: Network.WebSocketFrameSentHandler | null;
    /** Fired when WebSocket handshake response becomes available. */
    webSocketHandshakeResponseReceived: Network.WebSocketHandshakeResponseReceivedHandler | null;
    /** Fired when WebSocket is about to initiate handshake. */
    webSocketWillSendHandshakeRequest: Network.WebSocketWillSendHandshakeRequestHandler | null;
}
export declare namespace Network {
    /** Unique loader identifier. */
    type LoaderId = string;
    /** Unique request identifier. */
    type RequestId = string;
    /** Unique intercepted request identifier. */
    type InterceptionId = string;
    /** Network level fetch failure reason. */
    type ErrorReason = "Failed" | "Aborted" | "TimedOut" | "AccessDenied" | "ConnectionClosed" | "ConnectionReset" | "ConnectionRefused" | "ConnectionAborted" | "ConnectionFailed" | "NameNotResolved" | "InternetDisconnected" | "AddressUnreachable";
    /** UTC time in seconds, counted from January 1, 1970. */
    type TimeSinceEpoch = number;
    /** Monotonically increasing time in seconds since an arbitrary point in the past. */
    type MonotonicTime = number;
    /** Request / response headers as keys / values of JSON object. */
    type Headers = any;
    /** The underlying connection technology that the browser is supposedly using. */
    type ConnectionType = "none" | "cellular2g" | "cellular3g" | "cellular4g" | "bluetooth" | "ethernet" | "wifi" | "wimax" | "other";
    /** Represents the cookie's 'SameSite' status:
  https://tools.ietf.org/html/draft-west-first-party-cookies */
    type CookieSameSite = "Strict" | "Lax";
    /** Timing information for the request. */
    interface ResourceTiming {
        /** Timing's requestTime is a baseline in seconds, while the other numbers are ticks in
    milliseconds relatively to this requestTime. */
        requestTime: number;
        /** Started resolving proxy. */
        proxyStart: number;
        /** Finished resolving proxy. */
        proxyEnd: number;
        /** Started DNS address resolve. */
        dnsStart: number;
        /** Finished DNS address resolve. */
        dnsEnd: number;
        /** Started connecting to the remote host. */
        connectStart: number;
        /** Connected to the remote host. */
        connectEnd: number;
        /** Started SSL handshake. */
        sslStart: number;
        /** Finished SSL handshake. */
        sslEnd: number;
        /** Started running ServiceWorker. */
        workerStart: number;
        /** Finished Starting ServiceWorker. */
        workerReady: number;
        /** Started sending request. */
        sendStart: number;
        /** Finished sending request. */
        sendEnd: number;
        /** Time the server started pushing request. */
        pushStart: number;
        /** Time the server finished pushing request. */
        pushEnd: number;
        /** Finished receiving response headers. */
        receiveHeadersEnd: number;
    }
    /** Loading priority of a resource request. */
    type ResourcePriority = "VeryLow" | "Low" | "Medium" | "High" | "VeryHigh";
    /** HTTP request data. */
    interface Request {
        /** Request URL. */
        url: string;
        /** HTTP request method. */
        method: string;
        /** HTTP request headers. */
        headers: Headers;
        /** HTTP POST request data. */
        postData?: string;
        /** The mixed content type of the request. */
        mixedContentType?: Security.MixedContentType;
        /** Priority of the resource request at the time request is sent. */
        initialPriority: ResourcePriority;
        /** The referrer policy of the request, as defined in https://www.w3.org/TR/referrer-policy/ */
        referrerPolicy: "unsafe-url" | "no-referrer-when-downgrade" | "no-referrer" | "origin" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin";
        /** Whether is loaded via link preload. */
        isLinkPreload?: boolean;
    }
    /** Details of a signed certificate timestamp (SCT). */
    interface SignedCertificateTimestamp {
        /** Validation status. */
        status: string;
        /** Origin. */
        origin: string;
        /** Log name / description. */
        logDescription: string;
        /** Log ID. */
        logId: string;
        /** Issuance date. */
        timestamp: TimeSinceEpoch;
        /** Hash algorithm. */
        hashAlgorithm: string;
        /** Signature algorithm. */
        signatureAlgorithm: string;
        /** Signature data. */
        signatureData: string;
    }
    /** Security details about a request. */
    interface SecurityDetails {
        /** Protocol name (e.g. "TLS 1.2" or "QUIC"). */
        protocol: string;
        /** Key Exchange used by the connection, or the empty string if not applicable. */
        keyExchange: string;
        /** (EC)DH group used by the connection, if applicable. */
        keyExchangeGroup?: string;
        /** Cipher name. */
        cipher: string;
        /** TLS MAC. Note that AEAD ciphers do not have separate MACs. */
        mac?: string;
        /** Certificate ID value. */
        certificateId: Security.CertificateId;
        /** Certificate subject name. */
        subjectName: string;
        /** Subject Alternative Name (SAN) DNS names and IP addresses. */
        sanList: string[];
        /** Name of the issuing CA. */
        issuer: string;
        /** Certificate valid from date. */
        validFrom: TimeSinceEpoch;
        /** Certificate valid to (expiration) date */
        validTo: TimeSinceEpoch;
        /** List of signed certificate timestamps (SCTs). */
        signedCertificateTimestampList: SignedCertificateTimestamp[];
    }
    /** The reason why request was blocked. */
    type BlockedReason = "csp" | "mixed-content" | "origin" | "inspector" | "subresource-filter" | "other";
    /** HTTP response data. */
    interface Response {
        /** Response URL. This URL can be different from CachedResource.url in case of redirect. */
        url: string;
        /** HTTP response status code. */
        status: number;
        /** HTTP response status text. */
        statusText: string;
        /** HTTP response headers. */
        headers: Headers;
        /** HTTP response headers text. */
        headersText?: string;
        /** Resource mimeType as determined by the browser. */
        mimeType: string;
        /** Refined HTTP request headers that were actually transmitted over the network. */
        requestHeaders?: Headers;
        /** HTTP request headers text. */
        requestHeadersText?: string;
        /** Specifies whether physical connection was actually reused for this request. */
        connectionReused: boolean;
        /** Physical connection id that was actually used for this request. */
        connectionId: number;
        /** Remote IP address. */
        remoteIPAddress?: string;
        /** Remote port. */
        remotePort?: number;
        /** Specifies that the request was served from the disk cache. */
        fromDiskCache?: boolean;
        /** Specifies that the request was served from the ServiceWorker. */
        fromServiceWorker?: boolean;
        /** Total number of bytes received for this request so far. */
        encodedDataLength: number;
        /** Timing information for the given request. */
        timing?: ResourceTiming;
        /** Protocol used to fetch this request. */
        protocol?: string;
        /** Security state of the request resource. */
        securityState: Security.SecurityState;
        /** Security details for the request. */
        securityDetails?: SecurityDetails;
    }
    /** WebSocket request data. */
    interface WebSocketRequest {
        /** HTTP request headers. */
        headers: Headers;
    }
    /** WebSocket response data. */
    interface WebSocketResponse {
        /** HTTP response status code. */
        status: number;
        /** HTTP response status text. */
        statusText: string;
        /** HTTP response headers. */
        headers: Headers;
        /** HTTP response headers text. */
        headersText?: string;
        /** HTTP request headers. */
        requestHeaders?: Headers;
        /** HTTP request headers text. */
        requestHeadersText?: string;
    }
    /** WebSocket frame data. */
    interface WebSocketFrame {
        /** WebSocket frame opcode. */
        opcode: number;
        /** WebSocke frame mask. */
        mask: boolean;
        /** WebSocke frame payload data. */
        payloadData: string;
    }
    /** Information about the cached resource. */
    interface CachedResource {
        /** Resource URL. This is the url of the original network request. */
        url: string;
        /** Type of this resource. */
        type: Page.ResourceType;
        /** Cached response data. */
        response?: Response;
        /** Cached response body size. */
        bodySize: number;
    }
    /** Information about the request initiator. */
    interface Initiator {
        /** Type of this initiator. */
        type: "parser" | "script" | "preload" | "other";
        /** Initiator JavaScript stack trace, set for Script only. */
        stack?: Runtime.StackTrace;
        /** Initiator URL, set for Parser type or for Script type (when script is importing module). */
        url?: string;
        /** Initiator line number, set for Parser type or for Script type (when script is importing
    module) (0-based). */
        lineNumber?: number;
    }
    /** Cookie object */
    interface Cookie {
        /** Cookie name. */
        name: string;
        /** Cookie value. */
        value: string;
        /** Cookie domain. */
        domain: string;
        /** Cookie path. */
        path: string;
        /** Cookie expiration date as the number of seconds since the UNIX epoch. */
        expires: number;
        /** Cookie size. */
        size: number;
        /** True if cookie is http-only. */
        httpOnly: boolean;
        /** True if cookie is secure. */
        secure: boolean;
        /** True in case of session cookie. */
        session: boolean;
        /** Cookie SameSite type. */
        sameSite?: CookieSameSite;
    }
    /** Cookie parameter object */
    interface CookieParam {
        /** Cookie name. */
        name: string;
        /** Cookie value. */
        value: string;
        /** The request-URI to associate with the setting of the cookie. This value can affect the
    default domain and path values of the created cookie. */
        url?: string;
        /** Cookie domain. */
        domain?: string;
        /** Cookie path. */
        path?: string;
        /** True if cookie is secure. */
        secure?: boolean;
        /** True if cookie is http-only. */
        httpOnly?: boolean;
        /** Cookie SameSite type. */
        sameSite?: CookieSameSite;
        /** Cookie expiration date, session cookie if not set */
        expires?: TimeSinceEpoch;
    }
    /** Authorization challenge for HTTP status code 401 or 407. */
    interface AuthChallenge {
        /** Source of the authentication challenge. */
        source?: "Server" | "Proxy";
        /** Origin of the challenger. */
        origin: string;
        /** The authentication scheme used, such as basic or digest */
        scheme: string;
        /** The realm of the challenge. May be empty. */
        realm: string;
    }
    /** Response to an AuthChallenge. */
    interface AuthChallengeResponse {
        /** The decision on what to do in response to the authorization challenge.  Default means
    deferring to the default behavior of the net stack, which will likely either the Cancel
    authentication or display a popup dialog box. */
        response: "Default" | "CancelAuth" | "ProvideCredentials";
        /** The username to provide, possibly empty. Should only be set if response is
    ProvideCredentials. */
        username?: string;
        /** The password to provide, possibly empty. Should only be set if response is
    ProvideCredentials. */
        password?: string;
    }
    /** Stages of the interception to begin intercepting. Request will intercept before the request is
  sent. Response will intercept after the response is received. */
    type InterceptionStage = "Request" | "HeadersReceived";
    /** Request pattern for interception. */
    interface RequestPattern {
        /** Wildcards ('*' -> zero or more, '?' -> exactly one) are allowed. Escape character is
    backslash. Omitting is equivalent to "*". */
        urlPattern?: string;
        /** If set, only requests for matching resource types will be intercepted. */
        resourceType?: Page.ResourceType;
        /** Stage at wich to begin intercepting requests. Default is Request. */
        interceptionStage?: InterceptionStage;
    }
    type DataReceivedParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** Timestamp. */
        timestamp: MonotonicTime;
        /** Data chunk length. */
        dataLength: number;
        /** Actual bytes received (might be less than dataLength for compressed encodings). */
        encodedDataLength: number;
    };
    type DataReceivedHandler = (params: DataReceivedParameters) => void;
    type EventSourceMessageReceivedParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** Timestamp. */
        timestamp: MonotonicTime;
        /** Message type. */
        eventName: string;
        /** Message identifier. */
        eventId: string;
        /** Message content. */
        data: string;
    };
    type EventSourceMessageReceivedHandler = (params: EventSourceMessageReceivedParameters) => void;
    type LoadingFailedParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** Timestamp. */
        timestamp: MonotonicTime;
        /** Resource type. */
        type: Page.ResourceType;
        /** User friendly error message. */
        errorText: string;
        /** True if loading was canceled. */
        canceled?: boolean;
        /** The reason why loading was blocked, if any. */
        blockedReason?: BlockedReason;
    };
    type LoadingFailedHandler = (params: LoadingFailedParameters) => void;
    type LoadingFinishedParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** Timestamp. */
        timestamp: MonotonicTime;
        /** Total number of bytes received for this request. */
        encodedDataLength: number;
    };
    type LoadingFinishedHandler = (params: LoadingFinishedParameters) => void;
    type RequestInterceptedParameters = {
        /** Each request the page makes will have a unique id, however if any redirects are encountered
    while processing that fetch, they will be reported with the same id as the original fetch.
    Likewise if HTTP authentication is needed then the same fetch id will be used. */
        interceptionId: InterceptionId;
        request: Request;
        /** The id of the frame that initiated the request. */
        frameId: Page.FrameId;
        /** How the requested resource will be used. */
        resourceType: Page.ResourceType;
        /** Whether this is a navigation request, which can abort the navigation completely. */
        isNavigationRequest: boolean;
        /** Redirect location, only sent if a redirect was intercepted. */
        redirectUrl?: string;
        /** Details of the Authorization Challenge encountered. If this is set then
    continueInterceptedRequest must contain an authChallengeResponse. */
        authChallenge?: AuthChallenge;
        /** Response error if intercepted at response stage or if redirect occurred while intercepting
    request. */
        responseErrorReason?: ErrorReason;
        /** Response code if intercepted at response stage or if redirect occurred while intercepting
    request or auth retry occurred. */
        responseStatusCode?: number;
        /** Response headers if intercepted at the response stage or if redirect occurred while
    intercepting request or auth retry occurred. */
        responseHeaders?: Headers;
    };
    type RequestInterceptedHandler = (params: RequestInterceptedParameters) => void;
    type RequestServedFromCacheParameters = {
        /** Request identifier. */
        requestId: RequestId;
    };
    type RequestServedFromCacheHandler = (params: RequestServedFromCacheParameters) => void;
    type RequestWillBeSentParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** Loader identifier. Empty string if the request is fetched from worker. */
        loaderId: LoaderId;
        /** URL of the document this request is loaded for. */
        documentURL: string;
        /** Request data. */
        request: Request;
        /** Timestamp. */
        timestamp: MonotonicTime;
        /** Timestamp. */
        wallTime: TimeSinceEpoch;
        /** Request initiator. */
        initiator: Initiator;
        /** Redirect response data. */
        redirectResponse?: Response;
        /** Type of this resource. */
        type?: Page.ResourceType;
        /** Frame identifier. */
        frameId?: Page.FrameId;
    };
    type RequestWillBeSentHandler = (params: RequestWillBeSentParameters) => void;
    type ResourceChangedPriorityParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** New priority */
        newPriority: ResourcePriority;
        /** Timestamp. */
        timestamp: MonotonicTime;
    };
    type ResourceChangedPriorityHandler = (params: ResourceChangedPriorityParameters) => void;
    type ResponseReceivedParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** Loader identifier. Empty string if the request is fetched from worker. */
        loaderId: LoaderId;
        /** Timestamp. */
        timestamp: MonotonicTime;
        /** Resource type. */
        type: Page.ResourceType;
        /** Response data. */
        response: Response;
        /** Frame identifier. */
        frameId?: Page.FrameId;
    };
    type ResponseReceivedHandler = (params: ResponseReceivedParameters) => void;
    type WebSocketClosedParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** Timestamp. */
        timestamp: MonotonicTime;
    };
    type WebSocketClosedHandler = (params: WebSocketClosedParameters) => void;
    type WebSocketCreatedParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** WebSocket request URL. */
        url: string;
        /** Request initiator. */
        initiator?: Initiator;
    };
    type WebSocketCreatedHandler = (params: WebSocketCreatedParameters) => void;
    type WebSocketFrameErrorParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** Timestamp. */
        timestamp: MonotonicTime;
        /** WebSocket frame error message. */
        errorMessage: string;
    };
    type WebSocketFrameErrorHandler = (params: WebSocketFrameErrorParameters) => void;
    type WebSocketFrameReceivedParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** Timestamp. */
        timestamp: MonotonicTime;
        /** WebSocket response data. */
        response: WebSocketFrame;
    };
    type WebSocketFrameReceivedHandler = (params: WebSocketFrameReceivedParameters) => void;
    type WebSocketFrameSentParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** Timestamp. */
        timestamp: MonotonicTime;
        /** WebSocket response data. */
        response: WebSocketFrame;
    };
    type WebSocketFrameSentHandler = (params: WebSocketFrameSentParameters) => void;
    type WebSocketHandshakeResponseReceivedParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** Timestamp. */
        timestamp: MonotonicTime;
        /** WebSocket response data. */
        response: WebSocketResponse;
    };
    type WebSocketHandshakeResponseReceivedHandler = (params: WebSocketHandshakeResponseReceivedParameters) => void;
    type WebSocketWillSendHandshakeRequestParameters = {
        /** Request identifier. */
        requestId: RequestId;
        /** Timestamp. */
        timestamp: MonotonicTime;
        /** UTC Timestamp. */
        wallTime: TimeSinceEpoch;
        /** WebSocket request data. */
        request: WebSocketRequest;
    };
    type WebSocketWillSendHandshakeRequestHandler = (params: WebSocketWillSendHandshakeRequestParameters) => void;
    type CanClearBrowserCacheReturn = {
        /** True if browser cache can be cleared. */
        result: boolean;
    };
    type CanClearBrowserCookiesReturn = {
        /** True if browser cookies can be cleared. */
        result: boolean;
    };
    type CanEmulateNetworkConditionsReturn = {
        /** True if emulation of network conditions is supported. */
        result: boolean;
    };
    type ContinueInterceptedRequestParameters = {
        interceptionId: InterceptionId;
        /** If set this causes the request to fail with the given reason. Passing `Aborted` for requests
    marked with `isNavigationRequest` also cancels the navigation. Must not be set in response
    to an authChallenge. */
        errorReason?: ErrorReason;
        /** If set the requests completes using with the provided base64 encoded raw response, including
    HTTP status line and headers etc... Must not be set in response to an authChallenge. */
        rawResponse?: string;
        /** If set the request url will be modified in a way that's not observable by page. Must not be
    set in response to an authChallenge. */
        url?: string;
        /** If set this allows the request method to be overridden. Must not be set in response to an
    authChallenge. */
        method?: string;
        /** If set this allows postData to be set. Must not be set in response to an authChallenge. */
        postData?: string;
        /** If set this allows the request headers to be changed. Must not be set in response to an
    authChallenge. */
        headers?: Headers;
        /** Response to a requestIntercepted with an authChallenge. Must not be set otherwise. */
        authChallengeResponse?: AuthChallengeResponse;
    };
    type DeleteCookiesParameters = {
        /** Name of the cookies to remove. */
        name: string;
        /** If specified, deletes all the cookies with the given name where domain and path match
    provided URL. */
        url?: string;
        /** If specified, deletes only cookies with the exact domain. */
        domain?: string;
        /** If specified, deletes only cookies with the exact path. */
        path?: string;
    };
    type EmulateNetworkConditionsParameters = {
        /** True to emulate internet disconnection. */
        offline: boolean;
        /** Minimum latency from request sent to response headers received (ms). */
        latency: number;
        /** Maximal aggregated download throughput (bytes/sec). -1 disables download throttling. */
        downloadThroughput: number;
        /** Maximal aggregated upload throughput (bytes/sec).  -1 disables upload throttling. */
        uploadThroughput: number;
        /** Connection type if known. */
        connectionType?: ConnectionType;
    };
    type EnableParameters = {
        /** Buffer size in bytes to use when preserving network payloads (XHRs, etc). */
        maxTotalBufferSize?: number;
        /** Per-resource buffer size in bytes to use when preserving network payloads (XHRs, etc). */
        maxResourceBufferSize?: number;
    };
    type GetAllCookiesReturn = {
        /** Array of cookie objects. */
        cookies: Cookie[];
    };
    type GetCertificateParameters = {
        /** Origin to get certificate for. */
        origin: string;
    };
    type GetCertificateReturn = {
        tableNames: string[];
    };
    type GetCookiesParameters = {
        /** The list of URLs for which applicable cookies will be fetched */
        urls?: string[];
    };
    type GetCookiesReturn = {
        /** Array of cookie objects. */
        cookies: Cookie[];
    };
    type GetResponseBodyParameters = {
        /** Identifier of the network request to get content for. */
        requestId: RequestId;
    };
    type GetResponseBodyReturn = {
        /** Response body. */
        body: string;
        /** True, if content was sent as base64. */
        base64Encoded: boolean;
    };
    type GetResponseBodyForInterceptionParameters = {
        /** Identifier for the intercepted request to get body for. */
        interceptionId: InterceptionId;
    };
    type GetResponseBodyForInterceptionReturn = {
        /** Response body. */
        body: string;
        /** True, if content was sent as base64. */
        base64Encoded: boolean;
    };
    type ReplayXHRParameters = {
        /** Identifier of XHR to replay. */
        requestId: RequestId;
    };
    type SearchInResponseBodyParameters = {
        /** Identifier of the network response to search. */
        requestId: RequestId;
        /** String to search for. */
        query: string;
        /** If true, search is case sensitive. */
        caseSensitive?: boolean;
        /** If true, treats string parameter as regex. */
        isRegex?: boolean;
    };
    type SearchInResponseBodyReturn = {
        /** List of search matches. */
        result: Debugger.SearchMatch[];
    };
    type SetBlockedURLsParameters = {
        /** URL patterns to block. Wildcards ('*') are allowed. */
        urls: string[];
    };
    type SetBypassServiceWorkerParameters = {
        /** Bypass service worker and load from network. */
        bypass: boolean;
    };
    type SetCacheDisabledParameters = {
        /** Cache disabled state. */
        cacheDisabled: boolean;
    };
    type SetCookieParameters = {
        /** Cookie name. */
        name: string;
        /** Cookie value. */
        value: string;
        /** The request-URI to associate with the setting of the cookie. This value can affect the
    default domain and path values of the created cookie. */
        url?: string;
        /** Cookie domain. */
        domain?: string;
        /** Cookie path. */
        path?: string;
        /** True if cookie is secure. */
        secure?: boolean;
        /** True if cookie is http-only. */
        httpOnly?: boolean;
        /** Cookie SameSite type. */
        sameSite?: CookieSameSite;
        /** Cookie expiration date, session cookie if not set */
        expires?: TimeSinceEpoch;
    };
    type SetCookieReturn = {
        /** True if successfully set cookie. */
        success: boolean;
    };
    type SetCookiesParameters = {
        /** Cookies to be set. */
        cookies: CookieParam[];
    };
    type SetDataSizeLimitsForTestParameters = {
        /** Maximum total buffer size. */
        maxTotalSize: number;
        /** Maximum per-resource size. */
        maxResourceSize: number;
    };
    type SetExtraHTTPHeadersParameters = {
        /** Map with extra HTTP headers. */
        headers: Headers;
    };
    type SetRequestInterceptionParameters = {
        /** Requests matching any of these patterns will be forwarded and wait for the corresponding
    continueInterceptedRequest call. */
        patterns: RequestPattern[];
    };
    type SetUserAgentOverrideParameters = {
        /** User agent to use. */
        userAgent: string;
    };
}
/** This domain provides various functionality related to drawing atop the inspected page. */
export declare class Overlay {
    private _inspectNodeRequested;
    private _nodeHighlightRequested;
    private _screenshotRequested;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Disables domain notifications. */
    disable(): Promise<void>;
    /** Enables domain notifications. */
    enable(): Promise<void>;
    /** For testing. */
    getHighlightObjectForTest(params: Overlay.GetHighlightObjectForTestParameters): Promise<Overlay.GetHighlightObjectForTestReturn>;
    /** Hides any highlight. */
    hideHighlight(): Promise<void>;
    /** Highlights owner element of the frame with given id. */
    highlightFrame(params: Overlay.HighlightFrameParameters): Promise<void>;
    /** Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or
  objectId must be specified. */
    highlightNode(params: Overlay.HighlightNodeParameters): Promise<void>;
    /** Highlights given quad. Coordinates are absolute with respect to the main frame viewport. */
    highlightQuad(params: Overlay.HighlightQuadParameters): Promise<void>;
    /** Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport. */
    highlightRect(params: Overlay.HighlightRectParameters): Promise<void>;
    /** Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted.
  Backend then generates 'inspectNodeRequested' event upon element selection. */
    setInspectMode(params: Overlay.SetInspectModeParameters): Promise<void>;
    setPausedInDebuggerMessage(params: Overlay.SetPausedInDebuggerMessageParameters): Promise<void>;
    /** Requests that backend shows debug borders on layers */
    setShowDebugBorders(params: Overlay.SetShowDebugBordersParameters): Promise<void>;
    /** Requests that backend shows the FPS counter */
    setShowFPSCounter(params: Overlay.SetShowFPSCounterParameters): Promise<void>;
    /** Requests that backend shows paint rectangles */
    setShowPaintRects(params: Overlay.SetShowPaintRectsParameters): Promise<void>;
    /** Requests that backend shows scroll bottleneck rects */
    setShowScrollBottleneckRects(params: Overlay.SetShowScrollBottleneckRectsParameters): Promise<void>;
    /** Paints viewport size upon main frame resize. */
    setShowViewportSizeOnResize(params: Overlay.SetShowViewportSizeOnResizeParameters): Promise<void>;
    setSuspended(params: Overlay.SetSuspendedParameters): Promise<void>;
    /** Fired when the node should be inspected. This happens after call to `setInspectMode` or when
  user manually inspects an element. */
    inspectNodeRequested: Overlay.InspectNodeRequestedHandler | null;
    /** Fired when the node should be highlighted. This happens after call to `setInspectMode`. */
    nodeHighlightRequested: Overlay.NodeHighlightRequestedHandler | null;
    /** Fired when user asks to capture screenshot of some area on the page. */
    screenshotRequested: Overlay.ScreenshotRequestedHandler | null;
}
export declare namespace Overlay {
    /** Configuration data for the highlighting of page elements. */
    interface HighlightConfig {
        /** Whether the node info tooltip should be shown (default: false). */
        showInfo?: boolean;
        /** Whether the rulers should be shown (default: false). */
        showRulers?: boolean;
        /** Whether the extension lines from node to the rulers should be shown (default: false). */
        showExtensionLines?: boolean;
        displayAsMaterial?: boolean;
        /** The content box highlight fill color (default: transparent). */
        contentColor?: DOM.RGBA;
        /** The padding highlight fill color (default: transparent). */
        paddingColor?: DOM.RGBA;
        /** The border highlight fill color (default: transparent). */
        borderColor?: DOM.RGBA;
        /** The margin highlight fill color (default: transparent). */
        marginColor?: DOM.RGBA;
        /** The event target element highlight fill color (default: transparent). */
        eventTargetColor?: DOM.RGBA;
        /** The shape outside fill color (default: transparent). */
        shapeColor?: DOM.RGBA;
        /** The shape margin fill color (default: transparent). */
        shapeMarginColor?: DOM.RGBA;
        /** Selectors to highlight relevant nodes. */
        selectorList?: string;
        /** The grid layout color (default: transparent). */
        cssGridColor?: DOM.RGBA;
    }
    type InspectMode = "searchForNode" | "searchForUAShadowDOM" | "none";
    type InspectNodeRequestedParameters = {
        /** Id of the node to inspect. */
        backendNodeId: DOM.BackendNodeId;
    };
    type InspectNodeRequestedHandler = (params: InspectNodeRequestedParameters) => void;
    type NodeHighlightRequestedParameters = {
        nodeId: DOM.NodeId;
    };
    type NodeHighlightRequestedHandler = (params: NodeHighlightRequestedParameters) => void;
    type ScreenshotRequestedParameters = {
        /** Viewport to capture, in CSS. */
        viewport: Page.Viewport;
    };
    type ScreenshotRequestedHandler = (params: ScreenshotRequestedParameters) => void;
    type GetHighlightObjectForTestParameters = {
        /** Id of the node to get highlight object for. */
        nodeId: DOM.NodeId;
    };
    type GetHighlightObjectForTestReturn = {
        /** Highlight data for the node. */
        highlight: any;
    };
    type HighlightFrameParameters = {
        /** Identifier of the frame to highlight. */
        frameId: Page.FrameId;
        /** The content box highlight fill color (default: transparent). */
        contentColor?: DOM.RGBA;
        /** The content box highlight outline color (default: transparent). */
        contentOutlineColor?: DOM.RGBA;
    };
    type HighlightNodeParameters = {
        /** A descriptor for the highlight appearance. */
        highlightConfig: HighlightConfig;
        /** Identifier of the node to highlight. */
        nodeId?: DOM.NodeId;
        /** Identifier of the backend node to highlight. */
        backendNodeId?: DOM.BackendNodeId;
        /** JavaScript object id of the node to be highlighted. */
        objectId?: Runtime.RemoteObjectId;
    };
    type HighlightQuadParameters = {
        /** Quad to highlight */
        quad: DOM.Quad;
        /** The highlight fill color (default: transparent). */
        color?: DOM.RGBA;
        /** The highlight outline color (default: transparent). */
        outlineColor?: DOM.RGBA;
    };
    type HighlightRectParameters = {
        /** X coordinate */
        x: number;
        /** Y coordinate */
        y: number;
        /** Rectangle width */
        width: number;
        /** Rectangle height */
        height: number;
        /** The highlight fill color (default: transparent). */
        color?: DOM.RGBA;
        /** The highlight outline color (default: transparent). */
        outlineColor?: DOM.RGBA;
    };
    type SetInspectModeParameters = {
        /** Set an inspection mode. */
        mode: InspectMode;
        /** A descriptor for the highlight appearance of hovered-over nodes. May be omitted if `enabled
    == false`. */
        highlightConfig?: HighlightConfig;
    };
    type SetPausedInDebuggerMessageParameters = {
        /** The message to display, also triggers resume and step over controls. */
        message?: string;
    };
    type SetShowDebugBordersParameters = {
        /** True for showing debug borders */
        show: boolean;
    };
    type SetShowFPSCounterParameters = {
        /** True for showing the FPS counter */
        show: boolean;
    };
    type SetShowPaintRectsParameters = {
        /** True for showing paint rectangles */
        result: boolean;
    };
    type SetShowScrollBottleneckRectsParameters = {
        /** True for showing scroll bottleneck rects */
        show: boolean;
    };
    type SetShowViewportSizeOnResizeParameters = {
        /** Whether to paint size or not. */
        show: boolean;
    };
    type SetSuspendedParameters = {
        /** Whether overlay should be suspended and not consume any resources until resumed. */
        suspended: boolean;
    };
}
/** Actions and events related to the inspected page belong to the page domain. */
export declare class Page {
    private _domContentEventFired;
    private _frameAttached;
    private _frameClearedScheduledNavigation;
    private _frameDetached;
    private _frameNavigated;
    private _frameResized;
    private _frameScheduledNavigation;
    private _frameStartedLoading;
    private _frameStoppedLoading;
    private _interstitialHidden;
    private _interstitialShown;
    private _javascriptDialogClosed;
    private _javascriptDialogOpening;
    private _lifecycleEvent;
    private _loadEventFired;
    private _screencastFrame;
    private _screencastVisibilityChanged;
    private _windowOpen;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Deprecated, please use addScriptToEvaluateOnNewDocument instead. */
    addScriptToEvaluateOnLoad(params: Page.AddScriptToEvaluateOnLoadParameters): Promise<Page.AddScriptToEvaluateOnLoadReturn>;
    /** Evaluates given script in every frame upon creation (before loading frame's scripts). */
    addScriptToEvaluateOnNewDocument(params: Page.AddScriptToEvaluateOnNewDocumentParameters): Promise<Page.AddScriptToEvaluateOnNewDocumentReturn>;
    /** Brings page to front (activates tab). */
    bringToFront(): Promise<void>;
    /** Capture page screenshot. */
    captureScreenshot(params: Page.CaptureScreenshotParameters): Promise<Page.CaptureScreenshotReturn>;
    /** Clears the overriden device metrics. */
    clearDeviceMetricsOverride(): Promise<void>;
    /** Clears the overridden Device Orientation. */
    clearDeviceOrientationOverride(): Promise<void>;
    /** Clears the overriden Geolocation Position and Error. */
    clearGeolocationOverride(): Promise<void>;
    /** Creates an isolated world for the given frame. */
    createIsolatedWorld(params: Page.CreateIsolatedWorldParameters): Promise<Page.CreateIsolatedWorldReturn>;
    /** Deletes browser cookie with given name, domain and path. */
    deleteCookie(params: Page.DeleteCookieParameters): Promise<void>;
    /** Disables page domain notifications. */
    disable(): Promise<void>;
    /** Enables page domain notifications. */
    enable(): Promise<void>;
    getAppManifest(): Promise<Page.GetAppManifestReturn>;
    /** Returns all browser cookies. Depending on the backend support, will return detailed cookie
  information in the `cookies` field. */
    getCookies(): Promise<Page.GetCookiesReturn>;
    /** Returns present frame tree structure. */
    getFrameTree(): Promise<Page.GetFrameTreeReturn>;
    /** Returns metrics relating to the layouting of the page, such as viewport bounds/scale. */
    getLayoutMetrics(): Promise<Page.GetLayoutMetricsReturn>;
    /** Returns navigation history for the current page. */
    getNavigationHistory(): Promise<Page.GetNavigationHistoryReturn>;
    /** Returns content of the given resource. */
    getResourceContent(params: Page.GetResourceContentParameters): Promise<Page.GetResourceContentReturn>;
    /** Returns present frame / resource tree structure. */
    getResourceTree(): Promise<Page.GetResourceTreeReturn>;
    /** Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload). */
    handleJavaScriptDialog(params: Page.HandleJavaScriptDialogParameters): Promise<void>;
    /** Navigates current page to the given URL. */
    navigate(params: Page.NavigateParameters): Promise<Page.NavigateReturn>;
    /** Navigates current page to the given history entry. */
    navigateToHistoryEntry(params: Page.NavigateToHistoryEntryParameters): Promise<void>;
    /** Print page as PDF. */
    printToPDF(params: Page.PrintToPDFParameters): Promise<Page.PrintToPDFReturn>;
    /** Reloads given page optionally ignoring the cache. */
    reload(params: Page.ReloadParameters): Promise<void>;
    /** Deprecated, please use removeScriptToEvaluateOnNewDocument instead. */
    removeScriptToEvaluateOnLoad(params: Page.RemoveScriptToEvaluateOnLoadParameters): Promise<void>;
    /** Removes given script from the list. */
    removeScriptToEvaluateOnNewDocument(params: Page.RemoveScriptToEvaluateOnNewDocumentParameters): Promise<void>;
    requestAppBanner(): Promise<void>;
    /** Acknowledges that a screencast frame has been received by the frontend. */
    screencastFrameAck(params: Page.ScreencastFrameAckParameters): Promise<void>;
    /** Searches for given string in resource content. */
    searchInResource(params: Page.SearchInResourceParameters): Promise<Page.SearchInResourceReturn>;
    /** Enable Chrome's experimental ad filter on all sites. */
    setAdBlockingEnabled(params: Page.SetAdBlockingEnabledParameters): Promise<void>;
    /** Controls whether browser will open a new inspector window for connected pages. */
    setAutoAttachToCreatedPages(params: Page.SetAutoAttachToCreatedPagesParameters): Promise<void>;
    /** Overrides the values of device screen dimensions (window.screen.width, window.screen.height,
  window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media
  query results). */
    setDeviceMetricsOverride(params: Page.SetDeviceMetricsOverrideParameters): Promise<void>;
    /** Overrides the Device Orientation. */
    setDeviceOrientationOverride(params: Page.SetDeviceOrientationOverrideParameters): Promise<void>;
    /** Sets given markup as the document's HTML. */
    setDocumentContent(params: Page.SetDocumentContentParameters): Promise<void>;
    /** Set the behavior when downloading a file. */
    setDownloadBehavior(params: Page.SetDownloadBehaviorParameters): Promise<void>;
    /** Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position
  unavailable. */
    setGeolocationOverride(params: Page.SetGeolocationOverrideParameters): Promise<void>;
    /** Controls whether page will emit lifecycle events. */
    setLifecycleEventsEnabled(params: Page.SetLifecycleEventsEnabledParameters): Promise<void>;
    /** Toggles mouse event-based touch event emulation. */
    setTouchEmulationEnabled(params: Page.SetTouchEmulationEnabledParameters): Promise<void>;
    /** Starts sending each frame using the `screencastFrame` event. */
    startScreencast(params: Page.StartScreencastParameters): Promise<void>;
    /** Force the page stop all navigations and pending resource fetches. */
    stopLoading(): Promise<void>;
    /** Stops sending each frame in the `screencastFrame`. */
    stopScreencast(): Promise<void>;
    domContentEventFired: Page.DomContentEventFiredHandler | null;
    /** Fired when frame has been attached to its parent. */
    frameAttached: Page.FrameAttachedHandler | null;
    /** Fired when frame no longer has a scheduled navigation. */
    frameClearedScheduledNavigation: Page.FrameClearedScheduledNavigationHandler | null;
    /** Fired when frame has been detached from its parent. */
    frameDetached: Page.FrameDetachedHandler | null;
    /** Fired once navigation of the frame has completed. Frame is now associated with the new loader. */
    frameNavigated: Page.FrameNavigatedHandler | null;
    frameResized: Page.FrameResizedHandler | null;
    /** Fired when frame schedules a potential navigation. */
    frameScheduledNavigation: Page.FrameScheduledNavigationHandler | null;
    /** Fired when frame has started loading. */
    frameStartedLoading: Page.FrameStartedLoadingHandler | null;
    /** Fired when frame has stopped loading. */
    frameStoppedLoading: Page.FrameStoppedLoadingHandler | null;
    /** Fired when interstitial page was hidden */
    interstitialHidden: Page.InterstitialHiddenHandler | null;
    /** Fired when interstitial page was shown */
    interstitialShown: Page.InterstitialShownHandler | null;
    /** Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been
  closed. */
    javascriptDialogClosed: Page.JavascriptDialogClosedHandler | null;
    /** Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to
  open. */
    javascriptDialogOpening: Page.JavascriptDialogOpeningHandler | null;
    /** Fired for top level page lifecycle events such as navigation, load, paint, etc. */
    lifecycleEvent: Page.LifecycleEventHandler | null;
    loadEventFired: Page.LoadEventFiredHandler | null;
    /** Compressed image data requested by the `startScreencast`. */
    screencastFrame: Page.ScreencastFrameHandler | null;
    /** Fired when the page with currently enabled screencast was shown or hidden `. */
    screencastVisibilityChanged: Page.ScreencastVisibilityChangedHandler | null;
    /** Fired when a new window is going to be opened, via window.open(), link click, form submission,
  etc. */
    windowOpen: Page.WindowOpenHandler | null;
}
export declare namespace Page {
    /** Resource type as it was perceived by the rendering engine. */
    type ResourceType = "Document" | "Stylesheet" | "Image" | "Media" | "Font" | "Script" | "TextTrack" | "XHR" | "Fetch" | "EventSource" | "WebSocket" | "Manifest" | "Other";
    /** Unique frame identifier. */
    type FrameId = string;
    /** Information about the Frame on the page. */
    interface Frame {
        /** Frame unique identifier. */
        id: string;
        /** Parent frame identifier. */
        parentId?: string;
        /** Identifier of the loader associated with this frame. */
        loaderId: Network.LoaderId;
        /** Frame's name as specified in the tag. */
        name?: string;
        /** Frame document's URL. */
        url: string;
        /** Frame document's security origin. */
        securityOrigin: string;
        /** Frame document's mimeType as determined by the browser. */
        mimeType: string;
        /** If the frame failed to load, this contains the URL that could not be loaded. */
        unreachableUrl?: string;
    }
    /** Information about the Resource on the page. */
    interface FrameResource {
        /** Resource URL. */
        url: string;
        /** Type of this resource. */
        type: ResourceType;
        /** Resource mimeType as determined by the browser. */
        mimeType: string;
        /** last-modified timestamp as reported by server. */
        lastModified?: Network.TimeSinceEpoch;
        /** Resource content size. */
        contentSize?: number;
        /** True if the resource failed to load. */
        failed?: boolean;
        /** True if the resource was canceled during loading. */
        canceled?: boolean;
    }
    /** Information about the Frame hierarchy along with their cached resources. */
    interface FrameResourceTree {
        /** Frame information for this tree item. */
        frame: Frame;
        /** Child frames. */
        childFrames?: FrameResourceTree[];
        /** Information about frame resources. */
        resources: FrameResource[];
    }
    /** Information about the Frame hierarchy. */
    interface FrameTree {
        /** Frame information for this tree item. */
        frame: Frame;
        /** Child frames. */
        childFrames?: FrameTree[];
    }
    /** Unique script identifier. */
    type ScriptIdentifier = string;
    /** Transition type. */
    type TransitionType = "link" | "typed" | "auto_bookmark" | "auto_subframe" | "manual_subframe" | "generated" | "auto_toplevel" | "form_submit" | "reload" | "keyword" | "keyword_generated" | "other";
    /** Navigation history entry. */
    interface NavigationEntry {
        /** Unique id of the navigation history entry. */
        id: number;
        /** URL of the navigation history entry. */
        url: string;
        /** URL that the user typed in the url bar. */
        userTypedURL: string;
        /** Title of the navigation history entry. */
        title: string;
        /** Transition type. */
        transitionType: TransitionType;
    }
    /** Screencast frame metadata. */
    interface ScreencastFrameMetadata {
        /** Top offset in DIP. */
        offsetTop: number;
        /** Page scale factor. */
        pageScaleFactor: number;
        /** Device screen width in DIP. */
        deviceWidth: number;
        /** Device screen height in DIP. */
        deviceHeight: number;
        /** Position of horizontal scroll in CSS pixels. */
        scrollOffsetX: number;
        /** Position of vertical scroll in CSS pixels. */
        scrollOffsetY: number;
        /** Frame swap timestamp. */
        timestamp?: Network.TimeSinceEpoch;
    }
    /** Javascript dialog type. */
    type DialogType = "alert" | "confirm" | "prompt" | "beforeunload";
    /** Error while paring app manifest. */
    interface AppManifestError {
        /** Error message. */
        message: string;
        /** If criticial, this is a non-recoverable parse error. */
        critical: number;
        /** Error line. */
        line: number;
        /** Error column. */
        column: number;
    }
    /** Layout viewport position and dimensions. */
    interface LayoutViewport {
        /** Horizontal offset relative to the document (CSS pixels). */
        pageX: number;
        /** Vertical offset relative to the document (CSS pixels). */
        pageY: number;
        /** Width (CSS pixels), excludes scrollbar if present. */
        clientWidth: number;
        /** Height (CSS pixels), excludes scrollbar if present. */
        clientHeight: number;
    }
    /** Visual viewport position, dimensions, and scale. */
    interface VisualViewport {
        /** Horizontal offset relative to the layout viewport (CSS pixels). */
        offsetX: number;
        /** Vertical offset relative to the layout viewport (CSS pixels). */
        offsetY: number;
        /** Horizontal offset relative to the document (CSS pixels). */
        pageX: number;
        /** Vertical offset relative to the document (CSS pixels). */
        pageY: number;
        /** Width (CSS pixels), excludes scrollbar if present. */
        clientWidth: number;
        /** Height (CSS pixels), excludes scrollbar if present. */
        clientHeight: number;
        /** Scale relative to the ideal viewport (size at width=device-width). */
        scale: number;
    }
    /** Viewport for capturing screenshot. */
    interface Viewport {
        /** X offset in CSS pixels. */
        x: number;
        /** Y offset in CSS pixels */
        y: number;
        /** Rectangle width in CSS pixels */
        width: number;
        /** Rectangle height in CSS pixels */
        height: number;
        /** Page scale factor. */
        scale: number;
    }
    type DomContentEventFiredParameters = {
        timestamp: Network.MonotonicTime;
    };
    type DomContentEventFiredHandler = (params: DomContentEventFiredParameters) => void;
    type FrameAttachedParameters = {
        /** Id of the frame that has been attached. */
        frameId: FrameId;
        /** Parent frame identifier. */
        parentFrameId: FrameId;
        /** JavaScript stack trace of when frame was attached, only set if frame initiated from script. */
        stack?: Runtime.StackTrace;
    };
    type FrameAttachedHandler = (params: FrameAttachedParameters) => void;
    type FrameClearedScheduledNavigationParameters = {
        /** Id of the frame that has cleared its scheduled navigation. */
        frameId: FrameId;
    };
    type FrameClearedScheduledNavigationHandler = (params: FrameClearedScheduledNavigationParameters) => void;
    type FrameDetachedParameters = {
        /** Id of the frame that has been detached. */
        frameId: FrameId;
    };
    type FrameDetachedHandler = (params: FrameDetachedParameters) => void;
    type FrameNavigatedParameters = {
        /** Frame object. */
        frame: Frame;
    };
    type FrameNavigatedHandler = (params: FrameNavigatedParameters) => void;
    type FrameResizedHandler = () => void;
    type FrameScheduledNavigationParameters = {
        /** Id of the frame that has scheduled a navigation. */
        frameId: FrameId;
        /** Delay (in seconds) until the navigation is scheduled to begin. The navigation is not
    guaranteed to start. */
        delay: number;
        /** The reason for the navigation. */
        reason: "formSubmissionGet" | "formSubmissionPost" | "httpHeaderRefresh" | "scriptInitiated" | "metaTagRefresh" | "pageBlockInterstitial" | "reload";
        /** The destination URL for the scheduled navigation. */
        url: string;
    };
    type FrameScheduledNavigationHandler = (params: FrameScheduledNavigationParameters) => void;
    type FrameStartedLoadingParameters = {
        /** Id of the frame that has started loading. */
        frameId: FrameId;
    };
    type FrameStartedLoadingHandler = (params: FrameStartedLoadingParameters) => void;
    type FrameStoppedLoadingParameters = {
        /** Id of the frame that has stopped loading. */
        frameId: FrameId;
    };
    type FrameStoppedLoadingHandler = (params: FrameStoppedLoadingParameters) => void;
    type InterstitialHiddenHandler = () => void;
    type InterstitialShownHandler = () => void;
    type JavascriptDialogClosedParameters = {
        /** Whether dialog was confirmed. */
        result: boolean;
        /** User input in case of prompt. */
        userInput: string;
    };
    type JavascriptDialogClosedHandler = (params: JavascriptDialogClosedParameters) => void;
    type JavascriptDialogOpeningParameters = {
        /** Frame url. */
        url: string;
        /** Message that will be displayed by the dialog. */
        message: string;
        /** Dialog type. */
        type: DialogType;
        /** Default dialog prompt. */
        defaultPrompt?: string;
    };
    type JavascriptDialogOpeningHandler = (params: JavascriptDialogOpeningParameters) => void;
    type LifecycleEventParameters = {
        /** Id of the frame. */
        frameId: FrameId;
        /** Loader identifier. Empty string if the request is fetched from worker. */
        loaderId: Network.LoaderId;
        name: string;
        timestamp: Network.MonotonicTime;
    };
    type LifecycleEventHandler = (params: LifecycleEventParameters) => void;
    type LoadEventFiredParameters = {
        timestamp: Network.MonotonicTime;
    };
    type LoadEventFiredHandler = (params: LoadEventFiredParameters) => void;
    type ScreencastFrameParameters = {
        /** Base64-encoded compressed image. */
        data: string;
        /** Screencast frame metadata. */
        metadata: ScreencastFrameMetadata;
        /** Frame number. */
        sessionId: number;
    };
    type ScreencastFrameHandler = (params: ScreencastFrameParameters) => void;
    type ScreencastVisibilityChangedParameters = {
        /** True if the page is visible. */
        visible: boolean;
    };
    type ScreencastVisibilityChangedHandler = (params: ScreencastVisibilityChangedParameters) => void;
    type WindowOpenParameters = {
        /** The URL for the new window. */
        url: string;
        /** Window name. */
        windowName: string;
        /** An array of enabled window features. */
        windowFeatures: string[];
        /** Whether or not it was triggered by user gesture. */
        userGesture: boolean;
    };
    type WindowOpenHandler = (params: WindowOpenParameters) => void;
    type AddScriptToEvaluateOnLoadParameters = {
        scriptSource: string;
    };
    type AddScriptToEvaluateOnLoadReturn = {
        /** Identifier of the added script. */
        identifier: ScriptIdentifier;
    };
    type AddScriptToEvaluateOnNewDocumentParameters = {
        source: string;
    };
    type AddScriptToEvaluateOnNewDocumentReturn = {
        /** Identifier of the added script. */
        identifier: ScriptIdentifier;
    };
    type CaptureScreenshotParameters = {
        /** Image compression format (defaults to png). */
        format?: "jpeg" | "png";
        /** Compression quality from range [0..100] (jpeg only). */
        quality?: number;
        /** Capture the screenshot of a given region only. */
        clip?: Viewport;
        /** Capture the screenshot from the surface, rather than the view. Defaults to true. */
        fromSurface?: boolean;
    };
    type CaptureScreenshotReturn = {
        /** Base64-encoded image data. */
        data: string;
    };
    type CreateIsolatedWorldParameters = {
        /** Id of the frame in which the isolated world should be created. */
        frameId: FrameId;
        /** An optional name which is reported in the Execution Context. */
        worldName?: string;
        /** Whether or not universal access should be granted to the isolated world. This is a powerful
    option, use with caution. */
        grantUniveralAccess?: boolean;
    };
    type CreateIsolatedWorldReturn = {
        /** Execution context of the isolated world. */
        executionContextId: Runtime.ExecutionContextId;
    };
    type DeleteCookieParameters = {
        /** Name of the cookie to remove. */
        cookieName: string;
        /** URL to match cooke domain and path. */
        url: string;
    };
    type GetAppManifestReturn = {
        /** Manifest location. */
        url: string;
        errors: AppManifestError[];
        /** Manifest content. */
        data?: string;
    };
    type GetCookiesReturn = {
        /** Array of cookie objects. */
        cookies: Network.Cookie[];
    };
    type GetFrameTreeReturn = {
        /** Present frame tree structure. */
        frameTree: FrameTree;
    };
    type GetLayoutMetricsReturn = {
        /** Metrics relating to the layout viewport. */
        layoutViewport: LayoutViewport;
        /** Metrics relating to the visual viewport. */
        visualViewport: VisualViewport;
        /** Size of scrollable area. */
        contentSize: DOM.Rect;
    };
    type GetNavigationHistoryReturn = {
        /** Index of the current navigation history entry. */
        currentIndex: number;
        /** Array of navigation history entries. */
        entries: NavigationEntry[];
    };
    type GetResourceContentParameters = {
        /** Frame id to get resource for. */
        frameId: FrameId;
        /** URL of the resource to get content for. */
        url: string;
    };
    type GetResourceContentReturn = {
        /** Resource content. */
        content: string;
        /** True, if content was served as base64. */
        base64Encoded: boolean;
    };
    type GetResourceTreeReturn = {
        /** Present frame / resource tree structure. */
        frameTree: FrameResourceTree;
    };
    type HandleJavaScriptDialogParameters = {
        /** Whether to accept or dismiss the dialog. */
        accept: boolean;
        /** The text to enter into the dialog prompt before accepting. Used only if this is a prompt
    dialog. */
        promptText?: string;
    };
    type NavigateParameters = {
        /** URL to navigate the page to. */
        url: string;
        /** Referrer URL. */
        referrer?: string;
        /** Intended transition type. */
        transitionType?: TransitionType;
    };
    type NavigateReturn = {
        /** Frame id that has navigated (or failed to navigate) */
        frameId: FrameId;
        /** Loader identifier. */
        loaderId?: Network.LoaderId;
        /** User friendly error message, present if and only if navigation has failed. */
        errorText?: string;
    };
    type NavigateToHistoryEntryParameters = {
        /** Unique id of the entry to navigate to. */
        entryId: number;
    };
    type PrintToPDFParameters = {
        /** Paper orientation. Defaults to false. */
        landscape?: boolean;
        /** Display header and footer. Defaults to false. */
        displayHeaderFooter?: boolean;
        /** Print background graphics. Defaults to false. */
        printBackground?: boolean;
        /** Scale of the webpage rendering. Defaults to 1. */
        scale?: number;
        /** Paper width in inches. Defaults to 8.5 inches. */
        paperWidth?: number;
        /** Paper height in inches. Defaults to 11 inches. */
        paperHeight?: number;
        /** Top margin in inches. Defaults to 1cm (~0.4 inches). */
        marginTop?: number;
        /** Bottom margin in inches. Defaults to 1cm (~0.4 inches). */
        marginBottom?: number;
        /** Left margin in inches. Defaults to 1cm (~0.4 inches). */
        marginLeft?: number;
        /** Right margin in inches. Defaults to 1cm (~0.4 inches). */
        marginRight?: number;
        /** Paper ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means
    print all pages. */
        pageRanges?: string;
        /** Whether to silently ignore invalid but successfully parsed page ranges, such as '3-2'.
    Defaults to false. */
        ignoreInvalidPageRanges?: boolean;
    };
    type PrintToPDFReturn = {
        /** Base64-encoded pdf data. */
        data: string;
    };
    type ReloadParameters = {
        /** If true, browser cache is ignored (as if the user pressed Shift+refresh). */
        ignoreCache?: boolean;
        /** If set, the script will be injected into all frames of the inspected page after reload. */
        scriptToEvaluateOnLoad?: string;
    };
    type RemoveScriptToEvaluateOnLoadParameters = {
        identifier: ScriptIdentifier;
    };
    type RemoveScriptToEvaluateOnNewDocumentParameters = {
        identifier: ScriptIdentifier;
    };
    type ScreencastFrameAckParameters = {
        /** Frame number. */
        sessionId: number;
    };
    type SearchInResourceParameters = {
        /** Frame id for resource to search in. */
        frameId: FrameId;
        /** URL of the resource to search in. */
        url: string;
        /** String to search for. */
        query: string;
        /** If true, search is case sensitive. */
        caseSensitive?: boolean;
        /** If true, treats string parameter as regex. */
        isRegex?: boolean;
    };
    type SearchInResourceReturn = {
        /** List of search matches. */
        result: Debugger.SearchMatch[];
    };
    type SetAdBlockingEnabledParameters = {
        /** Whether to block ads. */
        enabled: boolean;
    };
    type SetAutoAttachToCreatedPagesParameters = {
        /** If true, browser will open a new inspector window for every page created from this one. */
        autoAttach: boolean;
    };
    type SetDeviceMetricsOverrideParameters = {
        /** Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override. */
        width: number;
        /** Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override. */
        height: number;
        /** Overriding device scale factor value. 0 disables the override. */
        deviceScaleFactor: number;
        /** Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text
    autosizing and more. */
        mobile: boolean;
        /** Scale to apply to resulting view image. */
        scale?: number;
        /** Overriding screen width value in pixels (minimum 0, maximum 10000000). */
        screenWidth?: number;
        /** Overriding screen height value in pixels (minimum 0, maximum 10000000). */
        screenHeight?: number;
        /** Overriding view X position on screen in pixels (minimum 0, maximum 10000000). */
        positionX?: number;
        /** Overriding view Y position on screen in pixels (minimum 0, maximum 10000000). */
        positionY?: number;
        /** Do not set visible view size, rely upon explicit setVisibleSize call. */
        dontSetVisibleSize?: boolean;
        /** Screen orientation override. */
        screenOrientation?: Emulation.ScreenOrientation;
        /** The viewport dimensions and scale. If not set, the override is cleared. */
        viewport?: Viewport;
    };
    type SetDeviceOrientationOverrideParameters = {
        /** Mock alpha */
        alpha: number;
        /** Mock beta */
        beta: number;
        /** Mock gamma */
        gamma: number;
    };
    type SetDocumentContentParameters = {
        /** Frame id to set HTML for. */
        frameId: FrameId;
        /** HTML content to set. */
        html: string;
    };
    type SetDownloadBehaviorParameters = {
        /** Whether to allow all or deny all download requests, or use default Chrome behavior if
    available (otherwise deny). */
        behavior: "deny" | "allow" | "default";
        /** The default path to save downloaded files to. This is requred if behavior is set to 'allow' */
        downloadPath?: string;
    };
    type SetGeolocationOverrideParameters = {
        /** Mock latitude */
        latitude?: number;
        /** Mock longitude */
        longitude?: number;
        /** Mock accuracy */
        accuracy?: number;
    };
    type SetLifecycleEventsEnabledParameters = {
        /** If true, starts emitting lifecycle events. */
        enabled: boolean;
    };
    type SetTouchEmulationEnabledParameters = {
        /** Whether the touch event emulation should be enabled. */
        enabled: boolean;
        /** Touch/gesture events configuration. Default: current platform. */
        configuration?: "mobile" | "desktop";
    };
    type StartScreencastParameters = {
        /** Image compression format. */
        format?: "jpeg" | "png";
        /** Compression quality from range [0..100]. */
        quality?: number;
        /** Maximum screenshot width. */
        maxWidth?: number;
        /** Maximum screenshot height. */
        maxHeight?: number;
        /** Send every n-th frame. */
        everyNthFrame?: number;
    };
}
export declare class Performance {
    private _metrics;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Disable collecting and reporting metrics. */
    disable(): Promise<void>;
    /** Enable collecting and reporting metrics. */
    enable(): Promise<void>;
    /** Retrieve current values of run-time metrics. */
    getMetrics(): Promise<Performance.GetMetricsReturn>;
    /** Current values of the metrics. */
    metrics: Performance.MetricsHandler | null;
}
export declare namespace Performance {
    /** Run-time execution metric. */
    interface Metric {
        /** Metric name. */
        name: string;
        /** Metric value. */
        value: number;
    }
    type MetricsParameters = {
        /** Current values of the metrics. */
        metrics: Metric[];
        /** Timestamp title. */
        title: string;
    };
    type MetricsHandler = (params: MetricsParameters) => void;
    type GetMetricsReturn = {
        /** Current values for run-time metrics. */
        metrics: Metric[];
    };
}
/** Security */
export declare class Security {
    private _certificateError;
    private _securityStateChanged;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Disables tracking security state changes. */
    disable(): Promise<void>;
    /** Enables tracking security state changes. */
    enable(): Promise<void>;
    /** Handles a certificate error that fired a certificateError event. */
    handleCertificateError(params: Security.HandleCertificateErrorParameters): Promise<void>;
    /** Enable/disable overriding certificate errors. If enabled, all certificate error events need to
  be handled by the DevTools client and should be answered with handleCertificateError commands. */
    setOverrideCertificateErrors(params: Security.SetOverrideCertificateErrorsParameters): Promise<void>;
    /** There is a certificate error. If overriding certificate errors is enabled, then it should be
  handled with the handleCertificateError command. Note: this event does not fire if the
  certificate error has been allowed internally. */
    certificateError: Security.CertificateErrorHandler | null;
    /** The security state of the page changed. */
    securityStateChanged: Security.SecurityStateChangedHandler | null;
}
export declare namespace Security {
    /** An internal certificate ID value. */
    type CertificateId = number;
    /** A description of mixed content (HTTP resources on HTTPS pages), as defined by
  https://www.w3.org/TR/mixed-content/#categories */
    type MixedContentType = "blockable" | "optionally-blockable" | "none";
    /** The security level of a page or resource. */
    type SecurityState = "unknown" | "neutral" | "insecure" | "secure" | "info";
    /** An explanation of an factor contributing to the security state. */
    interface SecurityStateExplanation {
        /** Security state representing the severity of the factor being explained. */
        securityState: SecurityState;
        /** Short phrase describing the type of factor. */
        summary: string;
        /** Full text explanation of the factor. */
        description: string;
        /** The type of mixed content described by the explanation. */
        mixedContentType: MixedContentType;
        /** Page certificate. */
        certificate: string[];
    }
    /** Information about insecure content on the page. */
    interface InsecureContentStatus {
        /** True if the page was loaded over HTTPS and ran mixed (HTTP) content such as scripts. */
        ranMixedContent: boolean;
        /** True if the page was loaded over HTTPS and displayed mixed (HTTP) content such as images. */
        displayedMixedContent: boolean;
        /** True if the page was loaded over HTTPS and contained a form targeting an insecure url. */
        containedMixedForm: boolean;
        /** True if the page was loaded over HTTPS without certificate errors, and ran content such as
    scripts that were loaded with certificate errors. */
        ranContentWithCertErrors: boolean;
        /** True if the page was loaded over HTTPS without certificate errors, and displayed content
    such as images that were loaded with certificate errors. */
        displayedContentWithCertErrors: boolean;
        /** Security state representing a page that ran insecure content. */
        ranInsecureContentStyle: SecurityState;
        /** Security state representing a page that displayed insecure content. */
        displayedInsecureContentStyle: SecurityState;
    }
    /** The action to take when a certificate error occurs. continue will continue processing the
  request and cancel will cancel the request. */
    type CertificateErrorAction = "continue" | "cancel";
    type CertificateErrorParameters = {
        /** The ID of the event. */
        eventId: number;
        /** The type of the error. */
        errorType: string;
        /** The url that was requested. */
        requestURL: string;
    };
    type CertificateErrorHandler = (params: CertificateErrorParameters) => void;
    type SecurityStateChangedParameters = {
        /** Security state. */
        securityState: SecurityState;
        /** True if the page was loaded over cryptographic transport such as HTTPS. */
        schemeIsCryptographic: boolean;
        /** List of explanations for the security state. If the overall security state is `insecure` or
    `warning`, at least one corresponding explanation should be included. */
        explanations: SecurityStateExplanation[];
        /** Information about insecure content on the page. */
        insecureContentStatus: InsecureContentStatus;
        /** Overrides user-visible description of the state. */
        summary?: string;
    };
    type SecurityStateChangedHandler = (params: SecurityStateChangedParameters) => void;
    type HandleCertificateErrorParameters = {
        /** The ID of the event. */
        eventId: number;
        /** The action to take on the certificate error. */
        action: CertificateErrorAction;
    };
    type SetOverrideCertificateErrorsParameters = {
        /** If true, certificate errors will be overridden. */
        override: boolean;
    };
}
export declare class ServiceWorker {
    private _workerErrorReported;
    private _workerRegistrationUpdated;
    private _workerVersionUpdated;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    deliverPushMessage(params: ServiceWorker.DeliverPushMessageParameters): Promise<void>;
    disable(): Promise<void>;
    dispatchSyncEvent(params: ServiceWorker.DispatchSyncEventParameters): Promise<void>;
    enable(): Promise<void>;
    inspectWorker(params: ServiceWorker.InspectWorkerParameters): Promise<void>;
    setForceUpdateOnPageLoad(params: ServiceWorker.SetForceUpdateOnPageLoadParameters): Promise<void>;
    skipWaiting(params: ServiceWorker.SkipWaitingParameters): Promise<void>;
    startWorker(params: ServiceWorker.StartWorkerParameters): Promise<void>;
    stopAllWorkers(): Promise<void>;
    stopWorker(params: ServiceWorker.StopWorkerParameters): Promise<void>;
    unregister(params: ServiceWorker.UnregisterParameters): Promise<void>;
    updateRegistration(params: ServiceWorker.UpdateRegistrationParameters): Promise<void>;
    workerErrorReported: ServiceWorker.WorkerErrorReportedHandler | null;
    workerRegistrationUpdated: ServiceWorker.WorkerRegistrationUpdatedHandler | null;
    workerVersionUpdated: ServiceWorker.WorkerVersionUpdatedHandler | null;
}
export declare namespace ServiceWorker {
    /** ServiceWorker registration. */
    interface ServiceWorkerRegistration {
        registrationId: string;
        scopeURL: string;
        isDeleted: boolean;
    }
    type ServiceWorkerVersionRunningStatus = "stopped" | "starting" | "running" | "stopping";
    type ServiceWorkerVersionStatus = "new" | "installing" | "installed" | "activating" | "activated" | "redundant";
    /** ServiceWorker version. */
    interface ServiceWorkerVersion {
        versionId: string;
        registrationId: string;
        scriptURL: string;
        runningStatus: ServiceWorkerVersionRunningStatus;
        status: ServiceWorkerVersionStatus;
        /** The Last-Modified header value of the main script. */
        scriptLastModified?: number;
        /** The time at which the response headers of the main script were received from the server.
    For cached script it is the last time the cache entry was validated. */
        scriptResponseTime?: number;
        controlledClients?: Target.TargetID[];
        targetId?: Target.TargetID;
    }
    /** ServiceWorker error message. */
    interface ServiceWorkerErrorMessage {
        errorMessage: string;
        registrationId: string;
        versionId: string;
        sourceURL: string;
        lineNumber: number;
        columnNumber: number;
    }
    type WorkerErrorReportedParameters = {
        errorMessage: ServiceWorkerErrorMessage;
    };
    type WorkerErrorReportedHandler = (params: WorkerErrorReportedParameters) => void;
    type WorkerRegistrationUpdatedParameters = {
        registrations: ServiceWorkerRegistration[];
    };
    type WorkerRegistrationUpdatedHandler = (params: WorkerRegistrationUpdatedParameters) => void;
    type WorkerVersionUpdatedParameters = {
        versions: ServiceWorkerVersion[];
    };
    type WorkerVersionUpdatedHandler = (params: WorkerVersionUpdatedParameters) => void;
    type DeliverPushMessageParameters = {
        origin: string;
        registrationId: string;
        data: string;
    };
    type DispatchSyncEventParameters = {
        origin: string;
        registrationId: string;
        tag: string;
        lastChance: boolean;
    };
    type InspectWorkerParameters = {
        versionId: string;
    };
    type SetForceUpdateOnPageLoadParameters = {
        forceUpdateOnPageLoad: boolean;
    };
    type SkipWaitingParameters = {
        scopeURL: string;
    };
    type StartWorkerParameters = {
        scopeURL: string;
    };
    type StopWorkerParameters = {
        versionId: string;
    };
    type UnregisterParameters = {
        scopeURL: string;
    };
    type UpdateRegistrationParameters = {
        scopeURL: string;
    };
}
export declare class Storage {
    private _cacheStorageContentUpdated;
    private _cacheStorageListUpdated;
    private _indexedDBContentUpdated;
    private _indexedDBListUpdated;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Clears storage for origin. */
    clearDataForOrigin(params: Storage.ClearDataForOriginParameters): Promise<void>;
    /** Returns usage and quota in bytes. */
    getUsageAndQuota(params: Storage.GetUsageAndQuotaParameters): Promise<Storage.GetUsageAndQuotaReturn>;
    /** Registers origin to be notified when an update occurs to its cache storage list. */
    trackCacheStorageForOrigin(params: Storage.TrackCacheStorageForOriginParameters): Promise<void>;
    /** Registers origin to be notified when an update occurs to its IndexedDB. */
    trackIndexedDBForOrigin(params: Storage.TrackIndexedDBForOriginParameters): Promise<void>;
    /** Unregisters origin from receiving notifications for cache storage. */
    untrackCacheStorageForOrigin(params: Storage.UntrackCacheStorageForOriginParameters): Promise<void>;
    /** Unregisters origin from receiving notifications for IndexedDB. */
    untrackIndexedDBForOrigin(params: Storage.UntrackIndexedDBForOriginParameters): Promise<void>;
    /** A cache's contents have been modified. */
    cacheStorageContentUpdated: Storage.CacheStorageContentUpdatedHandler | null;
    /** A cache has been added/deleted. */
    cacheStorageListUpdated: Storage.CacheStorageListUpdatedHandler | null;
    /** The origin's IndexedDB object store has been modified. */
    indexedDBContentUpdated: Storage.IndexedDBContentUpdatedHandler | null;
    /** The origin's IndexedDB database list has been modified. */
    indexedDBListUpdated: Storage.IndexedDBListUpdatedHandler | null;
}
export declare namespace Storage {
    /** Enum of possible storage types. */
    type StorageType = "appcache" | "cookies" | "file_systems" | "indexeddb" | "local_storage" | "shader_cache" | "websql" | "service_workers" | "cache_storage" | "all" | "other";
    /** Usage for a storage type. */
    interface UsageForType {
        /** Name of storage type. */
        storageType: StorageType;
        /** Storage usage (bytes). */
        usage: number;
    }
    type CacheStorageContentUpdatedParameters = {
        /** Origin to update. */
        origin: string;
        /** Name of cache in origin. */
        cacheName: string;
    };
    type CacheStorageContentUpdatedHandler = (params: CacheStorageContentUpdatedParameters) => void;
    type CacheStorageListUpdatedParameters = {
        /** Origin to update. */
        origin: string;
    };
    type CacheStorageListUpdatedHandler = (params: CacheStorageListUpdatedParameters) => void;
    type IndexedDBContentUpdatedParameters = {
        /** Origin to update. */
        origin: string;
        /** Database to update. */
        databaseName: string;
        /** ObjectStore to update. */
        objectStoreName: string;
    };
    type IndexedDBContentUpdatedHandler = (params: IndexedDBContentUpdatedParameters) => void;
    type IndexedDBListUpdatedParameters = {
        /** Origin to update. */
        origin: string;
    };
    type IndexedDBListUpdatedHandler = (params: IndexedDBListUpdatedParameters) => void;
    type ClearDataForOriginParameters = {
        /** Security origin. */
        origin: string;
        /** Comma separated origin names. */
        storageTypes: string;
    };
    type GetUsageAndQuotaParameters = {
        /** Security origin. */
        origin: string;
    };
    type GetUsageAndQuotaReturn = {
        /** Storage usage (bytes). */
        usage: number;
        /** Storage quota (bytes). */
        quota: number;
        /** Storage usage per type (bytes). */
        usageBreakdown: UsageForType[];
    };
    type TrackCacheStorageForOriginParameters = {
        /** Security origin. */
        origin: string;
    };
    type TrackIndexedDBForOriginParameters = {
        /** Security origin. */
        origin: string;
    };
    type UntrackCacheStorageForOriginParameters = {
        /** Security origin. */
        origin: string;
    };
    type UntrackIndexedDBForOriginParameters = {
        /** Security origin. */
        origin: string;
    };
}
/** The SystemInfo domain defines methods and events for querying low-level system information. */
export declare class SystemInfo {
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Returns information about the system. */
    getInfo(): Promise<SystemInfo.GetInfoReturn>;
}
export declare namespace SystemInfo {
    /** Describes a single graphics processor (GPU). */
    interface GPUDevice {
        /** PCI ID of the GPU vendor, if available; 0 otherwise. */
        vendorId: number;
        /** PCI ID of the GPU device, if available; 0 otherwise. */
        deviceId: number;
        /** String description of the GPU vendor, if the PCI ID is not available. */
        vendorString: string;
        /** String description of the GPU device, if the PCI ID is not available. */
        deviceString: string;
    }
    /** Provides information about the GPU(s) on the system. */
    interface GPUInfo {
        /** The graphics devices on the system. Element 0 is the primary GPU. */
        devices: GPUDevice[];
        /** An optional dictionary of additional GPU related attributes. */
        auxAttributes?: any;
        /** An optional dictionary of graphics features and their status. */
        featureStatus?: any;
        /** An optional array of GPU driver bug workarounds. */
        driverBugWorkarounds: string[];
    }
    type GetInfoReturn = {
        /** Information about the GPUs on the system. */
        gpu: GPUInfo;
        /** A platform-dependent description of the model of the machine. On Mac OS, this is, for
    example, 'MacBookPro'. Will be the empty string if not supported. */
        modelName: string;
        /** A platform-dependent description of the version of the machine. On Mac OS, this is, for
    example, '10.1'. Will be the empty string if not supported. */
        modelVersion: string;
        /** The command line string used to launch the browser. Will be the empty string if not
    supported. */
        commandLine: string;
    };
}
/** Supports additional targets discovery and allows to attach to them. */
export declare class Target {
    private _attachedToTarget;
    private _detachedFromTarget;
    private _receivedMessageFromTarget;
    private _targetCreated;
    private _targetDestroyed;
    private _targetInfoChanged;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Activates (focuses) the target. */
    activateTarget(params: Target.ActivateTargetParameters): Promise<void>;
    /** Attaches to the target with given id. */
    attachToTarget(params: Target.AttachToTargetParameters): Promise<Target.AttachToTargetReturn>;
    /** Closes the target. If the target is a page that gets closed too. */
    closeTarget(params: Target.CloseTargetParameters): Promise<Target.CloseTargetReturn>;
    /** Creates a new empty BrowserContext. Similar to an incognito profile but you can have more than
  one. */
    createBrowserContext(): Promise<Target.CreateBrowserContextReturn>;
    /** Creates a new page. */
    createTarget(params: Target.CreateTargetParameters): Promise<Target.CreateTargetReturn>;
    /** Detaches session with given id. */
    detachFromTarget(params: Target.DetachFromTargetParameters): Promise<void>;
    /** Deletes a BrowserContext, will fail of any open page uses it. */
    disposeBrowserContext(params: Target.DisposeBrowserContextParameters): Promise<Target.DisposeBrowserContextReturn>;
    /** Returns information about a target. */
    getTargetInfo(params: Target.GetTargetInfoParameters): Promise<Target.GetTargetInfoReturn>;
    /** Retrieves a list of available targets. */
    getTargets(): Promise<Target.GetTargetsReturn>;
    /** Sends protocol message over session with given id. */
    sendMessageToTarget(params: Target.SendMessageToTargetParameters): Promise<void>;
    setAttachToFrames(params: Target.SetAttachToFramesParameters): Promise<void>;
    /** Controls whether to automatically attach to new targets which are considered to be related to
  this one. When turned on, attaches to all existing related targets as well. When turned off,
  automatically detaches from all currently attached targets. */
    setAutoAttach(params: Target.SetAutoAttachParameters): Promise<void>;
    /** Controls whether to discover available targets and notify via
  `targetCreated/targetInfoChanged/targetDestroyed` events. */
    setDiscoverTargets(params: Target.SetDiscoverTargetsParameters): Promise<void>;
    /** Enables target discovery for the specified locations, when `setDiscoverTargets` was set to
  `true`. */
    setRemoteLocations(params: Target.SetRemoteLocationsParameters): Promise<void>;
    /** Issued when attached to target because of auto-attach or `attachToTarget` command. */
    attachedToTarget: Target.AttachedToTargetHandler | null;
    /** Issued when detached from target for any reason (including `detachFromTarget` command). Can be
  issued multiple times per target if multiple sessions have been attached to it. */
    detachedFromTarget: Target.DetachedFromTargetHandler | null;
    /** Notifies about a new protocol message received from the session (as reported in
  `attachedToTarget` event). */
    receivedMessageFromTarget: Target.ReceivedMessageFromTargetHandler | null;
    /** Issued when a possible inspection target is created. */
    targetCreated: Target.TargetCreatedHandler | null;
    /** Issued when a target is destroyed. */
    targetDestroyed: Target.TargetDestroyedHandler | null;
    /** Issued when some information about a target has changed. This only happens between
  `targetCreated` and `targetDestroyed`. */
    targetInfoChanged: Target.TargetInfoChangedHandler | null;
}
export declare namespace Target {
    type TargetID = string;
    /** Unique identifier of attached debugging session. */
    type SessionID = string;
    type BrowserContextID = string;
    interface TargetInfo {
        targetId: TargetID;
        type: string;
        title: string;
        url: string;
        /** Whether the target has an attached client. */
        attached: boolean;
        /** Opener target Id */
        openerId?: TargetID;
    }
    interface RemoteLocation {
        host: string;
        port: number;
    }
    type AttachedToTargetParameters = {
        /** Identifier assigned to the session used to send/receive messages. */
        sessionId: SessionID;
        targetInfo: TargetInfo;
        waitingForDebugger: boolean;
    };
    type AttachedToTargetHandler = (params: AttachedToTargetParameters) => void;
    type DetachedFromTargetParameters = {
        /** Detached session identifier. */
        sessionId: SessionID;
        /** Deprecated. */
        targetId?: TargetID;
    };
    type DetachedFromTargetHandler = (params: DetachedFromTargetParameters) => void;
    type ReceivedMessageFromTargetParameters = {
        /** Identifier of a session which sends a message. */
        sessionId: SessionID;
        message: string;
        /** Deprecated. */
        targetId?: TargetID;
    };
    type ReceivedMessageFromTargetHandler = (params: ReceivedMessageFromTargetParameters) => void;
    type TargetCreatedParameters = {
        targetInfo: TargetInfo;
    };
    type TargetCreatedHandler = (params: TargetCreatedParameters) => void;
    type TargetDestroyedParameters = {
        targetId: TargetID;
    };
    type TargetDestroyedHandler = (params: TargetDestroyedParameters) => void;
    type TargetInfoChangedParameters = {
        targetInfo: TargetInfo;
    };
    type TargetInfoChangedHandler = (params: TargetInfoChangedParameters) => void;
    type ActivateTargetParameters = {
        targetId: TargetID;
    };
    type AttachToTargetParameters = {
        targetId: TargetID;
    };
    type AttachToTargetReturn = {
        /** Id assigned to the session. */
        sessionId: SessionID;
    };
    type CloseTargetParameters = {
        targetId: TargetID;
    };
    type CloseTargetReturn = {
        success: boolean;
    };
    type CreateBrowserContextReturn = {
        /** The id of the context created. */
        browserContextId: BrowserContextID;
    };
    type CreateTargetParameters = {
        /** The initial URL the page will be navigated to. */
        url: string;
        /** Frame width in DIP (headless chrome only). */
        width?: number;
        /** Frame height in DIP (headless chrome only). */
        height?: number;
        /** The browser context to create the page in (headless chrome only). */
        browserContextId?: BrowserContextID;
        /** Whether BeginFrames for this target will be controlled via DevTools (headless chrome only,
    not supported on MacOS yet, false by default). */
        enableBeginFrameControl?: boolean;
    };
    type CreateTargetReturn = {
        /** The id of the page opened. */
        targetId: TargetID;
    };
    type DetachFromTargetParameters = {
        /** Session to detach. */
        sessionId?: SessionID;
        /** Deprecated. */
        targetId?: TargetID;
    };
    type DisposeBrowserContextParameters = {
        browserContextId: BrowserContextID;
    };
    type DisposeBrowserContextReturn = {
        success: boolean;
    };
    type GetTargetInfoParameters = {
        targetId: TargetID;
    };
    type GetTargetInfoReturn = {
        targetInfo: TargetInfo;
    };
    type GetTargetsReturn = {
        /** The list of targets. */
        targetInfos: TargetInfo[];
    };
    type SendMessageToTargetParameters = {
        message: string;
        /** Identifier of the session. */
        sessionId?: SessionID;
        /** Deprecated. */
        targetId?: TargetID;
    };
    type SetAttachToFramesParameters = {
        /** Whether to attach to frames. */
        value: boolean;
    };
    type SetAutoAttachParameters = {
        /** Whether to auto-attach to related targets. */
        autoAttach: boolean;
        /** Whether to pause new targets when attaching to them. Use `Runtime.runIfWaitingForDebugger`
    to run paused targets. */
        waitForDebuggerOnStart: boolean;
    };
    type SetDiscoverTargetsParameters = {
        /** Whether to discover available targets. */
        discover: boolean;
    };
    type SetRemoteLocationsParameters = {
        /** List of remote locations. */
        locations: RemoteLocation[];
    };
}
/** The Tethering domain defines methods and events for browser port binding. */
export declare class Tethering {
    private _accepted;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Request browser port binding. */
    bind(params: Tethering.BindParameters): Promise<void>;
    /** Request browser port unbinding. */
    unbind(params: Tethering.UnbindParameters): Promise<void>;
    /** Informs that port was successfully bound and got a specified connection id. */
    accepted: Tethering.AcceptedHandler | null;
}
export declare namespace Tethering {
    type AcceptedParameters = {
        /** Port number that was successfully bound. */
        port: number;
        /** Connection id to be used. */
        connectionId: string;
    };
    type AcceptedHandler = (params: AcceptedParameters) => void;
    type BindParameters = {
        /** Port number to bind. */
        port: number;
    };
    type UnbindParameters = {
        /** Port number to unbind. */
        port: number;
    };
}
export declare class Tracing {
    private _bufferUsage;
    private _dataCollected;
    private _tracingComplete;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Stop trace events collection. */
    end(): Promise<void>;
    /** Gets supported tracing categories. */
    getCategories(): Promise<Tracing.GetCategoriesReturn>;
    /** Record a clock sync marker in the trace. */
    recordClockSyncMarker(params: Tracing.RecordClockSyncMarkerParameters): Promise<void>;
    /** Request a global memory dump. */
    requestMemoryDump(): Promise<Tracing.RequestMemoryDumpReturn>;
    /** Start trace events collection. */
    start(params: Tracing.StartParameters): Promise<void>;
    bufferUsage: Tracing.BufferUsageHandler | null;
    /** Contains an bucket of collected trace events. When tracing is stopped collected events will be
  send as a sequence of dataCollected events followed by tracingComplete event. */
    dataCollected: Tracing.DataCollectedHandler | null;
    /** Signals that tracing is stopped and there is no trace buffers pending flush, all data were
  delivered via dataCollected events. */
    tracingComplete: Tracing.TracingCompleteHandler | null;
}
export declare namespace Tracing {
    /** Configuration for memory dump. Used only when "memory-infra" category is enabled. */
    type MemoryDumpConfig = any;
    interface TraceConfig {
        /** Controls how the trace buffer stores data. */
        recordMode?: "recordUntilFull" | "recordContinuously" | "recordAsMuchAsPossible" | "echoToConsole";
        /** Turns on JavaScript stack sampling. */
        enableSampling?: boolean;
        /** Turns on system tracing. */
        enableSystrace?: boolean;
        /** Turns on argument filter. */
        enableArgumentFilter?: boolean;
        /** Included category filters. */
        includedCategories?: string[];
        /** Excluded category filters. */
        excludedCategories?: string[];
        /** Configuration to synthesize the delays in tracing. */
        syntheticDelays?: string[];
        /** Configuration for memory dump triggers. Used only when "memory-infra" category is enabled. */
        memoryDumpConfig?: MemoryDumpConfig;
    }
    /** Compression type to use for traces returned via streams. */
    type StreamCompression = "none" | "gzip";
    type BufferUsageParameters = {
        /** A number in range [0..1] that indicates the used size of event buffer as a fraction of its
    total size. */
        percentFull?: number;
        /** An approximate number of events in the trace log. */
        eventCount?: number;
        /** A number in range [0..1] that indicates the used size of event buffer as a fraction of its
    total size. */
        value?: number;
    };
    type BufferUsageHandler = (params: BufferUsageParameters) => void;
    type DataCollectedParameters = {
        value: any[];
    };
    type DataCollectedHandler = (params: DataCollectedParameters) => void;
    type TracingCompleteParameters = {
        /** A handle of the stream that holds resulting trace data. */
        stream?: IO.StreamHandle;
        /** Compression format of returned stream. */
        streamCompression?: StreamCompression;
    };
    type TracingCompleteHandler = (params: TracingCompleteParameters) => void;
    type GetCategoriesReturn = {
        /** A list of supported tracing categories. */
        categories: string[];
    };
    type RecordClockSyncMarkerParameters = {
        /** The ID of this clock sync marker */
        syncId: string;
    };
    type RequestMemoryDumpReturn = {
        /** GUID of the resulting global memory dump. */
        dumpGuid: string;
        /** True iff the global memory dump succeeded. */
        success: boolean;
    };
    type StartParameters = {
        /** Category/tag filter */
        categories?: string;
        /** Tracing options */
        options?: string;
        /** If set, the agent will issue bufferUsage events at this interval, specified in milliseconds */
        bufferUsageReportingInterval?: number;
        /** Whether to report trace events as series of dataCollected events or to save trace to a
    stream (defaults to `ReportEvents`). */
        transferMode?: "ReportEvents" | "ReturnAsStream";
        /** Compression format to use. This only applies when using `ReturnAsStream`
    transfer mode (defaults to `none`) */
        streamCompression?: StreamCompression;
        traceConfig?: TraceConfig;
    };
}
/** This domain is deprecated - use Runtime or Log instead. */
export declare class Console {
    private _messageAdded;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Does nothing. */
    clearMessages(): Promise<void>;
    /** Disables console domain, prevents further console messages from being reported to the client. */
    disable(): Promise<void>;
    /** Enables console domain, sends the messages collected so far to the client by means of the
  `messageAdded` notification. */
    enable(): Promise<void>;
    /** Issued when new console message is added. */
    messageAdded: Console.MessageAddedHandler | null;
}
export declare namespace Console {
    /** Console message. */
    interface ConsoleMessage {
        /** Message source. */
        source: "xml" | "javascript" | "network" | "console-api" | "storage" | "appcache" | "rendering" | "security" | "other" | "deprecation" | "worker";
        /** Message severity. */
        level: "log" | "warning" | "error" | "debug" | "info";
        /** Message text. */
        text: string;
        /** URL of the message origin. */
        url?: string;
        /** Line number in the resource that generated this message (1-based). */
        line?: number;
        /** Column number in the resource that generated this message (1-based). */
        column?: number;
    }
    type MessageAddedParameters = {
        /** Console message that has been added. */
        message: ConsoleMessage;
    };
    type MessageAddedHandler = (params: MessageAddedParameters) => void;
}
/** Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing
breakpoints, stepping through execution, exploring stack traces, etc. */
export declare class Debugger {
    private _breakpointResolved;
    private _paused;
    private _resumed;
    private _scriptFailedToParse;
    private _scriptParsed;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Continues execution until specific location is reached. */
    continueToLocation(params: Debugger.ContinueToLocationParameters): Promise<void>;
    /** Disables debugger for given page. */
    disable(): Promise<void>;
    /** Enables debugger for the given page. Clients should not assume that the debugging has been
  enabled until the result for this command is received. */
    enable(): Promise<Debugger.EnableReturn>;
    /** Evaluates expression on a given call frame. */
    evaluateOnCallFrame(params: Debugger.EvaluateOnCallFrameParameters): Promise<Debugger.EvaluateOnCallFrameReturn>;
    /** Returns possible locations for breakpoint. scriptId in start and end range locations should be
  the same. */
    getPossibleBreakpoints(params: Debugger.GetPossibleBreakpointsParameters): Promise<Debugger.GetPossibleBreakpointsReturn>;
    /** Returns source for the script with given id. */
    getScriptSource(params: Debugger.GetScriptSourceParameters): Promise<Debugger.GetScriptSourceReturn>;
    /** Returns stack trace with given `stackTraceId`. */
    getStackTrace(params: Debugger.GetStackTraceParameters): Promise<Debugger.GetStackTraceReturn>;
    /** Stops on the next JavaScript statement. */
    pause(): Promise<void>;
    pauseOnAsyncCall(params: Debugger.PauseOnAsyncCallParameters): Promise<void>;
    /** Removes JavaScript breakpoint. */
    removeBreakpoint(params: Debugger.RemoveBreakpointParameters): Promise<void>;
    /** Restarts particular call frame from the beginning. */
    restartFrame(params: Debugger.RestartFrameParameters): Promise<Debugger.RestartFrameReturn>;
    /** Resumes JavaScript execution. */
    resume(): Promise<void>;
    /** This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and
  Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled
  before next pause. Returns success when async task is actually scheduled, returns error if no
  task were scheduled or another scheduleStepIntoAsync was called. */
    scheduleStepIntoAsync(): Promise<void>;
    /** Searches for given string in script content. */
    searchInContent(params: Debugger.SearchInContentParameters): Promise<Debugger.SearchInContentReturn>;
    /** Enables or disables async call stacks tracking. */
    setAsyncCallStackDepth(params: Debugger.SetAsyncCallStackDepthParameters): Promise<void>;
    /** Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in
  scripts with url matching one of the patterns. VM will try to leave blackboxed script by
  performing 'step in' several times, finally resorting to 'step out' if unsuccessful. */
    setBlackboxPatterns(params: Debugger.SetBlackboxPatternsParameters): Promise<void>;
    /** Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted
  scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.
  Positions array contains positions where blackbox state is changed. First interval isn't
  blackboxed. Array should be sorted. */
    setBlackboxedRanges(params: Debugger.SetBlackboxedRangesParameters): Promise<void>;
    /** Sets JavaScript breakpoint at a given location. */
    setBreakpoint(params: Debugger.SetBreakpointParameters): Promise<Debugger.SetBreakpointReturn>;
    /** Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this
  command is issued, all existing parsed scripts will have breakpoints resolved and returned in
  `locations` property. Further matching script parsing will result in subsequent
  `breakpointResolved` events issued. This logical breakpoint will survive page reloads. */
    setBreakpointByUrl(params: Debugger.SetBreakpointByUrlParameters): Promise<Debugger.SetBreakpointByUrlReturn>;
    /** Activates / deactivates all breakpoints on the page. */
    setBreakpointsActive(params: Debugger.SetBreakpointsActiveParameters): Promise<void>;
    /** Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or
  no exceptions. Initial pause on exceptions state is `none`. */
    setPauseOnExceptions(params: Debugger.SetPauseOnExceptionsParameters): Promise<void>;
    /** Changes return value in top frame. Available only at return break position. */
    setReturnValue(params: Debugger.SetReturnValueParameters): Promise<void>;
    /** Edits JavaScript source live. */
    setScriptSource(params: Debugger.SetScriptSourceParameters): Promise<Debugger.SetScriptSourceReturn>;
    /** Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc). */
    setSkipAllPauses(params: Debugger.SetSkipAllPausesParameters): Promise<void>;
    /** Changes value of variable in a callframe. Object-based scopes are not supported and must be
  mutated manually. */
    setVariableValue(params: Debugger.SetVariableValueParameters): Promise<void>;
    /** Steps into the function call. */
    stepInto(params: Debugger.StepIntoParameters): Promise<void>;
    /** Steps out of the function call. */
    stepOut(): Promise<void>;
    /** Steps over the statement. */
    stepOver(): Promise<void>;
    /** Fired when breakpoint is resolved to an actual script and location. */
    breakpointResolved: Debugger.BreakpointResolvedHandler | null;
    /** Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria. */
    paused: Debugger.PausedHandler | null;
    /** Fired when the virtual machine resumed execution. */
    resumed: Debugger.ResumedHandler | null;
    /** Fired when virtual machine fails to parse the script. */
    scriptFailedToParse: Debugger.ScriptFailedToParseHandler | null;
    /** Fired when virtual machine parses script. This event is also fired for all known and uncollected
  scripts upon enabling debugger. */
    scriptParsed: Debugger.ScriptParsedHandler | null;
}
export declare namespace Debugger {
    /** Breakpoint identifier. */
    type BreakpointId = string;
    /** Call frame identifier. */
    type CallFrameId = string;
    /** Location in the source code. */
    interface Location {
        /** Script identifier as reported in the `Debugger.scriptParsed`. */
        scriptId: Runtime.ScriptId;
        /** Line number in the script (0-based). */
        lineNumber: number;
        /** Column number in the script (0-based). */
        columnNumber?: number;
    }
    /** Location in the source code. */
    interface ScriptPosition {
        lineNumber: number;
        columnNumber: number;
    }
    /** JavaScript call frame. Array of call frames form the call stack. */
    interface CallFrame {
        /** Call frame identifier. This identifier is only valid while the virtual machine is paused. */
        callFrameId: CallFrameId;
        /** Name of the JavaScript function called on this call frame. */
        functionName: string;
        /** Location in the source code. */
        functionLocation?: Location;
        /** Location in the source code. */
        location: Location;
        /** JavaScript script name or url. */
        url: string;
        /** Scope chain for this call frame. */
        scopeChain: Scope[];
        /** `this` object for this call frame. */
        this: Runtime.RemoteObject;
        /** The value being returned, if the function is at return point. */
        returnValue?: Runtime.RemoteObject;
    }
    /** Scope description. */
    interface Scope {
        /** Scope type. */
        type: "global" | "local" | "with" | "closure" | "catch" | "block" | "script" | "eval" | "module";
        /** Object representing the scope. For `global` and `with` scopes it represents the actual
    object; for the rest of the scopes, it is artificial transient object enumerating scope
    variables as its properties. */
        object: Runtime.RemoteObject;
        name?: string;
        /** Location in the source code where scope starts */
        startLocation?: Location;
        /** Location in the source code where scope ends */
        endLocation?: Location;
    }
    /** Search match for resource. */
    interface SearchMatch {
        /** Line number in resource content. */
        lineNumber: number;
        /** Line with match content. */
        lineContent: string;
    }
    interface BreakLocation {
        /** Script identifier as reported in the `Debugger.scriptParsed`. */
        scriptId: Runtime.ScriptId;
        /** Line number in the script (0-based). */
        lineNumber: number;
        /** Column number in the script (0-based). */
        columnNumber?: number;
        type?: "debuggerStatement" | "call" | "return";
    }
    type BreakpointResolvedParameters = {
        /** Breakpoint unique identifier. */
        breakpointId: BreakpointId;
        /** Actual breakpoint location. */
        location: Location;
    };
    type BreakpointResolvedHandler = (params: BreakpointResolvedParameters) => void;
    type PausedParameters = {
        /** Call stack the virtual machine stopped on. */
        callFrames: CallFrame[];
        /** Pause reason. */
        reason: "XHR" | "DOM" | "EventListener" | "exception" | "assert" | "debugCommand" | "promiseRejection" | "OOM" | "other" | "ambiguous";
        /** Object containing break-specific auxiliary properties. */
        data?: any;
        /** Hit breakpoints IDs */
        hitBreakpoints?: string[];
        /** Async stack trace, if any. */
        asyncStackTrace?: Runtime.StackTrace;
        /** Async stack trace, if any. */
        asyncStackTraceId?: Runtime.StackTraceId;
        /** Just scheduled async call will have this stack trace as parent stack during async execution.
    This field is available only after `Debugger.stepInto` call with `breakOnAsynCall` flag. */
        asyncCallStackTraceId?: Runtime.StackTraceId;
    };
    type PausedHandler = (params: PausedParameters) => void;
    type ResumedHandler = () => void;
    type ScriptFailedToParseParameters = {
        /** Identifier of the script parsed. */
        scriptId: Runtime.ScriptId;
        /** URL or name of the script parsed (if any). */
        url: string;
        /** Line offset of the script within the resource with given URL (for script tags). */
        startLine: number;
        /** Column offset of the script within the resource with given URL. */
        startColumn: number;
        /** Last line of the script. */
        endLine: number;
        /** Length of the last line of the script. */
        endColumn: number;
        /** Specifies script creation context. */
        executionContextId: Runtime.ExecutionContextId;
        /** Content hash of the script. */
        hash: string;
        /** Embedder-specific auxiliary data. */
        executionContextAuxData?: any;
        /** URL of source map associated with script (if any). */
        sourceMapURL?: string;
        /** True, if this script has sourceURL. */
        hasSourceURL?: boolean;
        /** True, if this script is ES6 module. */
        isModule?: boolean;
        /** This script length. */
        length?: number;
        /** JavaScript top stack frame of where the script parsed event was triggered if available. */
        stackTrace?: Runtime.StackTrace;
    };
    type ScriptFailedToParseHandler = (params: ScriptFailedToParseParameters) => void;
    type ScriptParsedParameters = {
        /** Identifier of the script parsed. */
        scriptId: Runtime.ScriptId;
        /** URL or name of the script parsed (if any). */
        url: string;
        /** Line offset of the script within the resource with given URL (for script tags). */
        startLine: number;
        /** Column offset of the script within the resource with given URL. */
        startColumn: number;
        /** Last line of the script. */
        endLine: number;
        /** Length of the last line of the script. */
        endColumn: number;
        /** Specifies script creation context. */
        executionContextId: Runtime.ExecutionContextId;
        /** Content hash of the script. */
        hash: string;
        /** Embedder-specific auxiliary data. */
        executionContextAuxData?: any;
        /** True, if this script is generated as a result of the live edit operation. */
        isLiveEdit?: boolean;
        /** URL of source map associated with script (if any). */
        sourceMapURL?: string;
        /** True, if this script has sourceURL. */
        hasSourceURL?: boolean;
        /** True, if this script is ES6 module. */
        isModule?: boolean;
        /** This script length. */
        length?: number;
        /** JavaScript top stack frame of where the script parsed event was triggered if available. */
        stackTrace?: Runtime.StackTrace;
    };
    type ScriptParsedHandler = (params: ScriptParsedParameters) => void;
    type ContinueToLocationParameters = {
        /** Location to continue to. */
        location: Location;
        targetCallFrames?: "any" | "current";
    };
    type EnableReturn = {
        /** Unique identifier of the debugger. */
        debuggerId: Runtime.UniqueDebuggerId;
    };
    type EvaluateOnCallFrameParameters = {
        /** Call frame identifier to evaluate on. */
        callFrameId: CallFrameId;
        /** Expression to evaluate. */
        expression: string;
        /** String object group name to put result into (allows rapid releasing resulting object handles
    using `releaseObjectGroup`). */
        objectGroup?: string;
        /** Specifies whether command line API should be available to the evaluated expression, defaults
    to false. */
        includeCommandLineAPI?: boolean;
        /** In silent mode exceptions thrown during evaluation are not reported and do not pause
    execution. Overrides `setPauseOnException` state. */
        silent?: boolean;
        /** Whether the result is expected to be a JSON object that should be sent by value. */
        returnByValue?: boolean;
        /** Whether preview should be generated for the result. */
        generatePreview?: boolean;
        /** Whether to throw an exception if side effect cannot be ruled out during evaluation. */
        throwOnSideEffect?: boolean;
    };
    type EvaluateOnCallFrameReturn = {
        /** Object wrapper for the evaluation result. */
        result: Runtime.RemoteObject;
        /** Exception details. */
        exceptionDetails?: Runtime.ExceptionDetails;
    };
    type GetPossibleBreakpointsParameters = {
        /** Start of range to search possible breakpoint locations in. */
        start: Location;
        /** End of range to search possible breakpoint locations in (excluding). When not specified, end
    of scripts is used as end of range. */
        end?: Location;
        /** Only consider locations which are in the same (non-nested) function as start. */
        restrictToFunction?: boolean;
    };
    type GetPossibleBreakpointsReturn = {
        /** List of the possible breakpoint locations. */
        locations: BreakLocation[];
    };
    type GetScriptSourceParameters = {
        /** Id of the script to get source for. */
        scriptId: Runtime.ScriptId;
    };
    type GetScriptSourceReturn = {
        /** Script source. */
        scriptSource: string;
    };
    type GetStackTraceParameters = {
        stackTraceId: Runtime.StackTraceId;
    };
    type GetStackTraceReturn = {
        stackTrace: Runtime.StackTrace;
    };
    type PauseOnAsyncCallParameters = {
        /** Debugger will pause when async call with given stack trace is started. */
        parentStackTraceId: Runtime.StackTraceId;
    };
    type RemoveBreakpointParameters = {
        breakpointId: BreakpointId;
    };
    type RestartFrameParameters = {
        /** Call frame identifier to evaluate on. */
        callFrameId: CallFrameId;
    };
    type RestartFrameReturn = {
        /** New stack trace. */
        callFrames: CallFrame[];
        /** Async stack trace, if any. */
        asyncStackTrace?: Runtime.StackTrace;
        /** Async stack trace, if any. */
        asyncStackTraceId?: Runtime.StackTraceId;
    };
    type SearchInContentParameters = {
        /** Id of the script to search in. */
        scriptId: Runtime.ScriptId;
        /** String to search for. */
        query: string;
        /** If true, search is case sensitive. */
        caseSensitive?: boolean;
        /** If true, treats string parameter as regex. */
        isRegex?: boolean;
    };
    type SearchInContentReturn = {
        /** List of search matches. */
        result: SearchMatch[];
    };
    type SetAsyncCallStackDepthParameters = {
        /** Maximum depth of async call stacks. Setting to `0` will effectively disable collecting async
    call stacks (default). */
        maxDepth: number;
    };
    type SetBlackboxPatternsParameters = {
        /** Array of regexps that will be used to check script url for blackbox state. */
        patterns: string[];
    };
    type SetBlackboxedRangesParameters = {
        /** Id of the script. */
        scriptId: Runtime.ScriptId;
        positions: ScriptPosition[];
    };
    type SetBreakpointParameters = {
        /** Location to set breakpoint in. */
        location: Location;
        /** Expression to use as a breakpoint condition. When specified, debugger will only stop on the
    breakpoint if this expression evaluates to true. */
        condition?: string;
    };
    type SetBreakpointReturn = {
        /** Id of the created breakpoint for further reference. */
        breakpointId: BreakpointId;
        /** Location this breakpoint resolved into. */
        actualLocation: Location;
    };
    type SetBreakpointByUrlParameters = {
        /** Line number to set breakpoint at. */
        lineNumber: number;
        /** URL of the resources to set breakpoint on. */
        url?: string;
        /** Regex pattern for the URLs of the resources to set breakpoints on. Either `url` or
    `urlRegex` must be specified. */
        urlRegex?: string;
        /** Script hash of the resources to set breakpoint on. */
        scriptHash?: string;
        /** Offset in the line to set breakpoint at. */
        columnNumber?: number;
        /** Expression to use as a breakpoint condition. When specified, debugger will only stop on the
    breakpoint if this expression evaluates to true. */
        condition?: string;
    };
    type SetBreakpointByUrlReturn = {
        /** Id of the created breakpoint for further reference. */
        breakpointId: BreakpointId;
        /** List of the locations this breakpoint resolved into upon addition. */
        locations: Location[];
    };
    type SetBreakpointsActiveParameters = {
        /** New value for breakpoints active state. */
        active: boolean;
    };
    type SetPauseOnExceptionsParameters = {
        /** Pause on exceptions mode. */
        state: "none" | "uncaught" | "all";
    };
    type SetReturnValueParameters = {
        /** New return value. */
        newValue: Runtime.CallArgument;
    };
    type SetScriptSourceParameters = {
        /** Id of the script to edit. */
        scriptId: Runtime.ScriptId;
        /** New content of the script. */
        scriptSource: string;
        /** If true the change will not actually be applied. Dry run may be used to get result
    description without actually modifying the code. */
        dryRun?: boolean;
    };
    type SetScriptSourceReturn = {
        /** New stack trace in case editing has happened while VM was stopped. */
        callFrames?: CallFrame[];
        /** Whether current call stack  was modified after applying the changes. */
        stackChanged?: boolean;
        /** Async stack trace, if any. */
        asyncStackTrace?: Runtime.StackTrace;
        /** Async stack trace, if any. */
        asyncStackTraceId?: Runtime.StackTraceId;
        /** Exception details if any. */
        exceptionDetails?: Runtime.ExceptionDetails;
    };
    type SetSkipAllPausesParameters = {
        /** New value for skip pauses state. */
        skip: boolean;
    };
    type SetVariableValueParameters = {
        /** 0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch'
    scope types are allowed. Other scopes could be manipulated manually. */
        scopeNumber: number;
        /** Variable name. */
        variableName: string;
        /** New variable value. */
        newValue: Runtime.CallArgument;
        /** Id of callframe that holds variable. */
        callFrameId: CallFrameId;
    };
    type StepIntoParameters = {
        /** Debugger will issue additional Debugger.paused notification if any async task is scheduled
    before next pause. */
        breakOnAsyncCall?: boolean;
    };
}
export declare class HeapProfiler {
    private _addHeapSnapshotChunk;
    private _heapStatsUpdate;
    private _lastSeenObjectId;
    private _reportHeapSnapshotProgress;
    private _resetProfiles;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Enables console to refer to the node with given id via $x (see Command Line API for more details
  $x functions). */
    addInspectedHeapObject(params: HeapProfiler.AddInspectedHeapObjectParameters): Promise<void>;
    collectGarbage(): Promise<void>;
    disable(): Promise<void>;
    enable(): Promise<void>;
    getHeapObjectId(params: HeapProfiler.GetHeapObjectIdParameters): Promise<HeapProfiler.GetHeapObjectIdReturn>;
    getObjectByHeapObjectId(params: HeapProfiler.GetObjectByHeapObjectIdParameters): Promise<HeapProfiler.GetObjectByHeapObjectIdReturn>;
    getSamplingProfile(): Promise<HeapProfiler.GetSamplingProfileReturn>;
    startSampling(params: HeapProfiler.StartSamplingParameters): Promise<void>;
    startTrackingHeapObjects(params: HeapProfiler.StartTrackingHeapObjectsParameters): Promise<void>;
    stopSampling(): Promise<HeapProfiler.StopSamplingReturn>;
    stopTrackingHeapObjects(params: HeapProfiler.StopTrackingHeapObjectsParameters): Promise<void>;
    takeHeapSnapshot(params: HeapProfiler.TakeHeapSnapshotParameters): Promise<void>;
    addHeapSnapshotChunk: HeapProfiler.AddHeapSnapshotChunkHandler | null;
    /** If heap objects tracking has been started then backend may send update for one or more fragments */
    heapStatsUpdate: HeapProfiler.HeapStatsUpdateHandler | null;
    /** If heap objects tracking has been started then backend regularly sends a current value for last
  seen object id and corresponding timestamp. If the were changes in the heap since last event
  then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event. */
    lastSeenObjectId: HeapProfiler.LastSeenObjectIdHandler | null;
    reportHeapSnapshotProgress: HeapProfiler.ReportHeapSnapshotProgressHandler | null;
    resetProfiles: HeapProfiler.ResetProfilesHandler | null;
}
export declare namespace HeapProfiler {
    /** Heap snapshot object id. */
    type HeapSnapshotObjectId = string;
    /** Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes. */
    interface SamplingHeapProfileNode {
        /** Function location. */
        callFrame: Runtime.CallFrame;
        /** Allocations size in bytes for the node excluding children. */
        selfSize: number;
        /** Child nodes. */
        children: SamplingHeapProfileNode[];
    }
    /** Profile. */
    interface SamplingHeapProfile {
        head: SamplingHeapProfileNode;
    }
    type AddHeapSnapshotChunkParameters = {
        chunk: string;
    };
    type AddHeapSnapshotChunkHandler = (params: AddHeapSnapshotChunkParameters) => void;
    type HeapStatsUpdateParameters = {
        /** An array of triplets. Each triplet describes a fragment. The first integer is the fragment
    index, the second integer is a total count of objects for the fragment, the third integer is
    a total size of the objects for the fragment. */
        statsUpdate: number[];
    };
    type HeapStatsUpdateHandler = (params: HeapStatsUpdateParameters) => void;
    type LastSeenObjectIdParameters = {
        lastSeenObjectId: number;
        timestamp: number;
    };
    type LastSeenObjectIdHandler = (params: LastSeenObjectIdParameters) => void;
    type ReportHeapSnapshotProgressParameters = {
        done: number;
        total: number;
        finished?: boolean;
    };
    type ReportHeapSnapshotProgressHandler = (params: ReportHeapSnapshotProgressParameters) => void;
    type ResetProfilesHandler = () => void;
    type AddInspectedHeapObjectParameters = {
        /** Heap snapshot object id to be accessible by means of $x command line API. */
        heapObjectId: HeapSnapshotObjectId;
    };
    type GetHeapObjectIdParameters = {
        /** Identifier of the object to get heap object id for. */
        objectId: Runtime.RemoteObjectId;
    };
    type GetHeapObjectIdReturn = {
        /** Id of the heap snapshot object corresponding to the passed remote object id. */
        heapSnapshotObjectId: HeapSnapshotObjectId;
    };
    type GetObjectByHeapObjectIdParameters = {
        objectId: HeapSnapshotObjectId;
        /** Symbolic group name that can be used to release multiple objects. */
        objectGroup?: string;
    };
    type GetObjectByHeapObjectIdReturn = {
        /** Evaluation result. */
        result: Runtime.RemoteObject;
    };
    type GetSamplingProfileReturn = {
        /** Return the sampling profile being collected. */
        profile: SamplingHeapProfile;
    };
    type StartSamplingParameters = {
        /** Average sample interval in bytes. Poisson distribution is used for the intervals. The
    default value is 32768 bytes. */
        samplingInterval?: number;
    };
    type StartTrackingHeapObjectsParameters = {
        trackAllocations?: boolean;
    };
    type StopSamplingReturn = {
        /** Recorded sampling heap profile. */
        profile: SamplingHeapProfile;
    };
    type StopTrackingHeapObjectsParameters = {
        /** If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken
    when the tracking is stopped. */
        reportProgress?: boolean;
    };
    type TakeHeapSnapshotParameters = {
        /** If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken. */
        reportProgress?: boolean;
    };
}
export declare class Profiler {
    private _consoleProfileFinished;
    private _consoleProfileStarted;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    disable(): Promise<void>;
    enable(): Promise<void>;
    /** Collect coverage data for the current isolate. The coverage data may be incomplete due to
  garbage collection. */
    getBestEffortCoverage(): Promise<Profiler.GetBestEffortCoverageReturn>;
    /** Changes CPU profiler sampling interval. Must be called before CPU profiles recording started. */
    setSamplingInterval(params: Profiler.SetSamplingIntervalParameters): Promise<void>;
    start(): Promise<void>;
    /** Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code
  coverage may be incomplete. Enabling prevents running optimized code and resets execution
  counters. */
    startPreciseCoverage(params: Profiler.StartPreciseCoverageParameters): Promise<void>;
    /** Enable type profile. */
    startTypeProfile(): Promise<void>;
    stop(): Promise<Profiler.StopReturn>;
    /** Disable precise code coverage. Disabling releases unnecessary execution count records and allows
  executing optimized code. */
    stopPreciseCoverage(): Promise<void>;
    /** Disable type profile. Disabling releases type profile data collected so far. */
    stopTypeProfile(): Promise<void>;
    /** Collect coverage data for the current isolate, and resets execution counters. Precise code
  coverage needs to have started. */
    takePreciseCoverage(): Promise<Profiler.TakePreciseCoverageReturn>;
    /** Collect type profile. */
    takeTypeProfile(): Promise<Profiler.TakeTypeProfileReturn>;
    consoleProfileFinished: Profiler.ConsoleProfileFinishedHandler | null;
    /** Sent when new profile recording is started using console.profile() call. */
    consoleProfileStarted: Profiler.ConsoleProfileStartedHandler | null;
}
export declare namespace Profiler {
    /** Profile node. Holds callsite information, execution statistics and child nodes. */
    interface ProfileNode {
        /** Unique id of the node. */
        id: number;
        /** Function location. */
        callFrame: Runtime.CallFrame;
        /** Number of samples where this node was on top of the call stack. */
        hitCount?: number;
        /** Child node ids. */
        children?: number[];
        /** The reason of being not optimized. The function may be deoptimized or marked as don't
    optimize. */
        deoptReason?: string;
        /** An array of source position ticks. */
        positionTicks?: PositionTickInfo[];
    }
    /** Profile. */
    interface Profile {
        /** The list of profile nodes. First item is the root node. */
        nodes: ProfileNode[];
        /** Profiling start timestamp in microseconds. */
        startTime: number;
        /** Profiling end timestamp in microseconds. */
        endTime: number;
        /** Ids of samples top nodes. */
        samples?: number[];
        /** Time intervals between adjacent samples in microseconds. The first delta is relative to the
    profile startTime. */
        timeDeltas?: number[];
    }
    /** Specifies a number of samples attributed to a certain source position. */
    interface PositionTickInfo {
        /** Source line number (1-based). */
        line: number;
        /** Number of samples attributed to the source line. */
        ticks: number;
    }
    /** Coverage data for a source range. */
    interface CoverageRange {
        /** JavaScript script source offset for the range start. */
        startOffset: number;
        /** JavaScript script source offset for the range end. */
        endOffset: number;
        /** Collected execution count of the source range. */
        count: number;
    }
    /** Coverage data for a JavaScript function. */
    interface FunctionCoverage {
        /** JavaScript function name. */
        functionName: string;
        /** Source ranges inside the function with coverage data. */
        ranges: CoverageRange[];
        /** Whether coverage data for this function has block granularity. */
        isBlockCoverage: boolean;
    }
    /** Coverage data for a JavaScript script. */
    interface ScriptCoverage {
        /** JavaScript script id. */
        scriptId: Runtime.ScriptId;
        /** JavaScript script name or url. */
        url: string;
        /** Functions contained in the script that has coverage data. */
        functions: FunctionCoverage[];
    }
    /** Describes a type collected during runtime. */
    interface TypeObject {
        /** Name of a type collected with type profiling. */
        name: string;
    }
    /** Source offset and types for a parameter or return value. */
    interface TypeProfileEntry {
        /** Source offset of the parameter or end of function for return values. */
        offset: number;
        /** The types for this parameter or return value. */
        types: TypeObject[];
    }
    /** Type profile data collected during runtime for a JavaScript script. */
    interface ScriptTypeProfile {
        /** JavaScript script id. */
        scriptId: Runtime.ScriptId;
        /** JavaScript script name or url. */
        url: string;
        /** Type profile entries for parameters and return values of the functions in the script. */
        entries: TypeProfileEntry[];
    }
    type ConsoleProfileFinishedParameters = {
        id: string;
        /** Location of console.profileEnd(). */
        location: Debugger.Location;
        profile: Profile;
        /** Profile title passed as an argument to console.profile(). */
        title?: string;
    };
    type ConsoleProfileFinishedHandler = (params: ConsoleProfileFinishedParameters) => void;
    type ConsoleProfileStartedParameters = {
        id: string;
        /** Location of console.profile(). */
        location: Debugger.Location;
        /** Profile title passed as an argument to console.profile(). */
        title?: string;
    };
    type ConsoleProfileStartedHandler = (params: ConsoleProfileStartedParameters) => void;
    type GetBestEffortCoverageReturn = {
        /** Coverage data for the current isolate. */
        result: ScriptCoverage[];
    };
    type SetSamplingIntervalParameters = {
        /** New sampling interval in microseconds. */
        interval: number;
    };
    type StartPreciseCoverageParameters = {
        /** Collect accurate call counts beyond simple 'covered' or 'not covered'. */
        callCount?: boolean;
        /** Collect block-based coverage. */
        detailed?: boolean;
    };
    type StopReturn = {
        /** Recorded profile. */
        profile: Profile;
    };
    type TakePreciseCoverageReturn = {
        /** Coverage data for the current isolate. */
        result: ScriptCoverage[];
    };
    type TakeTypeProfileReturn = {
        /** Type profile for all scripts since startTypeProfile() was turned on. */
        result: ScriptTypeProfile[];
    };
}
/** Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects.
Evaluation results are returned as mirror object that expose object type, string representation
and unique identifier that can be used for further object reference. Original objects are
maintained in memory unless they are either explicitly released or are released along with the
other objects in their object group. */
export declare class Runtime {
    private _consoleAPICalled;
    private _exceptionRevoked;
    private _exceptionThrown;
    private _executionContextCreated;
    private _executionContextDestroyed;
    private _executionContextsCleared;
    private _inspectRequested;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Add handler to promise with given promise object id. */
    awaitPromise(params: Runtime.AwaitPromiseParameters): Promise<Runtime.AwaitPromiseReturn>;
    /** Calls function with given declaration on the given object. Object group of the result is
  inherited from the target object. */
    callFunctionOn(params: Runtime.CallFunctionOnParameters): Promise<Runtime.CallFunctionOnReturn>;
    /** Compiles expression. */
    compileScript(params: Runtime.CompileScriptParameters): Promise<Runtime.CompileScriptReturn>;
    /** Disables reporting of execution contexts creation. */
    disable(): Promise<void>;
    /** Discards collected exceptions and console API calls. */
    discardConsoleEntries(): Promise<void>;
    /** Enables reporting of execution contexts creation by means of `executionContextCreated` event.
  When the reporting gets enabled the event will be sent immediately for each existing execution
  context. */
    enable(): Promise<void>;
    /** Evaluates expression on global object. */
    evaluate(params: Runtime.EvaluateParameters): Promise<Runtime.EvaluateReturn>;
    /** Returns properties of a given object. Object group of the result is inherited from the target
  object. */
    getProperties(params: Runtime.GetPropertiesParameters): Promise<Runtime.GetPropertiesReturn>;
    /** Returns all let, const and class variables from global scope. */
    globalLexicalScopeNames(params: Runtime.GlobalLexicalScopeNamesParameters): Promise<Runtime.GlobalLexicalScopeNamesReturn>;
    queryObjects(params: Runtime.QueryObjectsParameters): Promise<Runtime.QueryObjectsReturn>;
    /** Releases remote object with given id. */
    releaseObject(params: Runtime.ReleaseObjectParameters): Promise<void>;
    /** Releases all remote objects that belong to a given group. */
    releaseObjectGroup(params: Runtime.ReleaseObjectGroupParameters): Promise<void>;
    /** Tells inspected instance to run if it was waiting for debugger to attach. */
    runIfWaitingForDebugger(): Promise<void>;
    /** Runs script with given id in a given context. */
    runScript(params: Runtime.RunScriptParameters): Promise<Runtime.RunScriptReturn>;
    setCustomObjectFormatterEnabled(params: Runtime.SetCustomObjectFormatterEnabledParameters): Promise<void>;
    /** Issued when console API was called. */
    consoleAPICalled: Runtime.ConsoleAPICalledHandler | null;
    /** Issued when unhandled exception was revoked. */
    exceptionRevoked: Runtime.ExceptionRevokedHandler | null;
    /** Issued when exception was thrown and unhandled. */
    exceptionThrown: Runtime.ExceptionThrownHandler | null;
    /** Issued when new execution context is created. */
    executionContextCreated: Runtime.ExecutionContextCreatedHandler | null;
    /** Issued when execution context is destroyed. */
    executionContextDestroyed: Runtime.ExecutionContextDestroyedHandler | null;
    /** Issued when all executionContexts were cleared in browser */
    executionContextsCleared: Runtime.ExecutionContextsClearedHandler | null;
    /** Issued when object should be inspected (for example, as a result of inspect() command line API
  call). */
    inspectRequested: Runtime.InspectRequestedHandler | null;
}
export declare namespace Runtime {
    /** Unique script identifier. */
    type ScriptId = string;
    /** Unique object identifier. */
    type RemoteObjectId = string;
    /** Primitive value which cannot be JSON-stringified. */
    type UnserializableValue = "Infinity" | "NaN" | "-Infinity" | "-0";
    /** Mirror object referencing original JavaScript object. */
    interface RemoteObject {
        /** Object type. */
        type: "object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol";
        /** Object subtype hint. Specified for `object` type values only. */
        subtype?: "array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "iterator" | "generator" | "error" | "proxy" | "promise" | "typedarray";
        /** Object class (constructor) name. Specified for `object` type values only. */
        className?: string;
        /** Remote object value in case of primitive values or JSON values (if it was requested). */
        value?: any;
        /** Primitive value which can not be JSON-stringified does not have `value`, but gets this
    property. */
        unserializableValue?: UnserializableValue;
        /** String representation of the object. */
        description?: string;
        /** Unique object identifier (for non-primitive values). */
        objectId?: RemoteObjectId;
        /** Preview containing abbreviated property values. Specified for `object` type values only. */
        preview?: ObjectPreview;
        customPreview?: CustomPreview;
    }
    interface CustomPreview {
        header: string;
        hasBody: boolean;
        formatterObjectId: RemoteObjectId;
        bindRemoteObjectFunctionId: RemoteObjectId;
        configObjectId?: RemoteObjectId;
    }
    /** Object containing abbreviated remote object value. */
    interface ObjectPreview {
        /** Object type. */
        type: "object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol";
        /** Object subtype hint. Specified for `object` type values only. */
        subtype?: "array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "iterator" | "generator" | "error";
        /** String representation of the object. */
        description?: string;
        /** True iff some of the properties or entries of the original object did not fit. */
        overflow: boolean;
        /** List of the properties. */
        properties: PropertyPreview[];
        /** List of the entries. Specified for `map` and `set` subtype values only. */
        entries?: EntryPreview[];
    }
    interface PropertyPreview {
        /** Property name. */
        name: string;
        /** Object type. Accessor means that the property itself is an accessor property. */
        type: "object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "accessor";
        /** User-friendly property value string. */
        value?: string;
        /** Nested value preview. */
        valuePreview?: ObjectPreview;
        /** Object subtype hint. Specified for `object` type values only. */
        subtype?: "array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "iterator" | "generator" | "error";
    }
    interface EntryPreview {
        /** Preview of the key. Specified for map-like collection entries. */
        key?: ObjectPreview;
        /** Preview of the value. */
        value: ObjectPreview;
    }
    /** Object property descriptor. */
    interface PropertyDescriptor {
        /** Property name or symbol description. */
        name: string;
        /** The value associated with the property. */
        value?: RemoteObject;
        /** True if the value associated with the property may be changed (data descriptors only). */
        writable?: boolean;
        /** A function which serves as a getter for the property, or `undefined` if there is no getter
    (accessor descriptors only). */
        get?: RemoteObject;
        /** A function which serves as a setter for the property, or `undefined` if there is no setter
    (accessor descriptors only). */
        set?: RemoteObject;
        /** True if the type of this property descriptor may be changed and if the property may be
    deleted from the corresponding object. */
        configurable: boolean;
        /** True if this property shows up during enumeration of the properties on the corresponding
    object. */
        enumerable: boolean;
        /** True if the result was thrown during the evaluation. */
        wasThrown?: boolean;
        /** True if the property is owned for the object. */
        isOwn?: boolean;
        /** Property symbol object, if the property is of the `symbol` type. */
        symbol?: RemoteObject;
    }
    /** Object internal property descriptor. This property isn't normally visible in JavaScript code. */
    interface InternalPropertyDescriptor {
        /** Conventional property name. */
        name: string;
        /** The value associated with the property. */
        value?: RemoteObject;
    }
    /** Represents function call argument. Either remote object id `objectId`, primitive `value`,
  unserializable primitive value or neither of (for undefined) them should be specified. */
    interface CallArgument {
        /** Primitive value or serializable javascript object. */
        value?: any;
        /** Primitive value which can not be JSON-stringified. */
        unserializableValue?: UnserializableValue;
        /** Remote object handle. */
        objectId?: RemoteObjectId;
    }
    /** Id of an execution context. */
    type ExecutionContextId = number;
    /** Description of an isolated world. */
    interface ExecutionContextDescription {
        /** Unique id of the execution context. It can be used to specify in which execution context
    script evaluation should be performed. */
        id: ExecutionContextId;
        /** Execution context origin. */
        origin: string;
        /** Human readable name describing given context. */
        name: string;
        /** Embedder-specific auxiliary data. */
        auxData?: any;
    }
    /** Detailed information about exception (or error) that was thrown during script compilation or
  execution. */
    interface ExceptionDetails {
        /** Exception id. */
        exceptionId: number;
        /** Exception text, which should be used together with exception object when available. */
        text: string;
        /** Line number of the exception location (0-based). */
        lineNumber: number;
        /** Column number of the exception location (0-based). */
        columnNumber: number;
        /** Script ID of the exception location. */
        scriptId?: ScriptId;
        /** URL of the exception location, to be used when the script was not reported. */
        url?: string;
        /** JavaScript stack trace if available. */
        stackTrace?: StackTrace;
        /** Exception object if available. */
        exception?: RemoteObject;
        /** Identifier of the context where exception happened. */
        executionContextId?: ExecutionContextId;
    }
    /** Number of milliseconds since epoch. */
    type Timestamp = number;
    /** Stack entry for runtime errors and assertions. */
    interface CallFrame {
        /** JavaScript function name. */
        functionName: string;
        /** JavaScript script id. */
        scriptId: ScriptId;
        /** JavaScript script name or url. */
        url: string;
        /** JavaScript script line number (0-based). */
        lineNumber: number;
        /** JavaScript script column number (0-based). */
        columnNumber: number;
    }
    /** Call frames for assertions or error messages. */
    interface StackTrace {
        /** String label of this stack trace. For async traces this may be a name of the function that
    initiated the async call. */
        description?: string;
        /** JavaScript function name. */
        callFrames: CallFrame[];
        /** Asynchronous JavaScript stack trace that preceded this stack, if available. */
        parent?: StackTrace;
        /** Asynchronous JavaScript stack trace that preceded this stack, if available. */
        parentId?: StackTraceId;
    }
    /** Unique identifier of current debugger. */
    type UniqueDebuggerId = string;
    /** If `debuggerId` is set stack trace comes from another debugger and can be resolved there. This
  allows to track cross-debugger calls. See `Runtime.StackTrace` and `Debugger.paused` for usages. */
    interface StackTraceId {
        id: string;
        debuggerId?: UniqueDebuggerId;
    }
    type ConsoleAPICalledParameters = {
        /** Type of the call. */
        type: "log" | "debug" | "info" | "error" | "warning" | "dir" | "dirxml" | "table" | "trace" | "clear" | "startGroup" | "startGroupCollapsed" | "endGroup" | "assert" | "profile" | "profileEnd" | "count" | "timeEnd";
        /** Call arguments. */
        args: RemoteObject[];
        /** Identifier of the context where the call was made. */
        executionContextId: ExecutionContextId;
        /** Call timestamp. */
        timestamp: Timestamp;
        /** Stack trace captured when the call was made. */
        stackTrace?: StackTrace;
        /** Console context descriptor for calls on non-default console context (not console.*):
    'anonymous#unique-logger-id' for call on unnamed context, 'name#unique-logger-id' for call
    on named context. */
        context?: string;
    };
    type ConsoleAPICalledHandler = (params: ConsoleAPICalledParameters) => void;
    type ExceptionRevokedParameters = {
        /** Reason describing why exception was revoked. */
        reason: string;
        /** The id of revoked exception, as reported in `exceptionThrown`. */
        exceptionId: number;
    };
    type ExceptionRevokedHandler = (params: ExceptionRevokedParameters) => void;
    type ExceptionThrownParameters = {
        /** Timestamp of the exception. */
        timestamp: Timestamp;
        exceptionDetails: ExceptionDetails;
    };
    type ExceptionThrownHandler = (params: ExceptionThrownParameters) => void;
    type ExecutionContextCreatedParameters = {
        /** A newly created execution context. */
        context: ExecutionContextDescription;
    };
    type ExecutionContextCreatedHandler = (params: ExecutionContextCreatedParameters) => void;
    type ExecutionContextDestroyedParameters = {
        /** Id of the destroyed context */
        executionContextId: ExecutionContextId;
    };
    type ExecutionContextDestroyedHandler = (params: ExecutionContextDestroyedParameters) => void;
    type ExecutionContextsClearedHandler = () => void;
    type InspectRequestedParameters = {
        object: RemoteObject;
        hints: any;
    };
    type InspectRequestedHandler = (params: InspectRequestedParameters) => void;
    type AwaitPromiseParameters = {
        /** Identifier of the promise. */
        promiseObjectId: RemoteObjectId;
        /** Whether the result is expected to be a JSON object that should be sent by value. */
        returnByValue?: boolean;
        /** Whether preview should be generated for the result. */
        generatePreview?: boolean;
    };
    type AwaitPromiseReturn = {
        /** Promise result. Will contain rejected value if promise was rejected. */
        result: RemoteObject;
        /** Exception details if stack strace is available. */
        exceptionDetails?: ExceptionDetails;
    };
    type CallFunctionOnParameters = {
        /** Declaration of the function to call. */
        functionDeclaration: string;
        /** Identifier of the object to call function on. Either objectId or executionContextId should
    be specified. */
        objectId?: RemoteObjectId;
        /** Call arguments. All call arguments must belong to the same JavaScript world as the target
    object. */
        arguments?: CallArgument[];
        /** In silent mode exceptions thrown during evaluation are not reported and do not pause
    execution. Overrides `setPauseOnException` state. */
        silent?: boolean;
        /** Whether the result is expected to be a JSON object which should be sent by value. */
        returnByValue?: boolean;
        /** Whether preview should be generated for the result. */
        generatePreview?: boolean;
        /** Whether execution should be treated as initiated by user in the UI. */
        userGesture?: boolean;
        /** Whether execution should `await` for resulting value and return once awaited promise is
    resolved. */
        awaitPromise?: boolean;
        /** Specifies execution context which global object will be used to call function on. Either
    executionContextId or objectId should be specified. */
        executionContextId?: ExecutionContextId;
        /** Symbolic group name that can be used to release multiple objects. If objectGroup is not
    specified and objectId is, objectGroup will be inherited from object. */
        objectGroup?: string;
    };
    type CallFunctionOnReturn = {
        /** Call result. */
        result: RemoteObject;
        /** Exception details. */
        exceptionDetails?: ExceptionDetails;
    };
    type CompileScriptParameters = {
        /** Expression to compile. */
        expression: string;
        /** Source url to be set for the script. */
        sourceURL: string;
        /** Specifies whether the compiled script should be persisted. */
        persistScript: boolean;
        /** Specifies in which execution context to perform script run. If the parameter is omitted the
    evaluation will be performed in the context of the inspected page. */
        executionContextId?: ExecutionContextId;
    };
    type CompileScriptReturn = {
        /** Id of the script. */
        scriptId?: ScriptId;
        /** Exception details. */
        exceptionDetails?: ExceptionDetails;
    };
    type EvaluateParameters = {
        /** Expression to evaluate. */
        expression: string;
        /** Symbolic group name that can be used to release multiple objects. */
        objectGroup?: string;
        /** Determines whether Command Line API should be available during the evaluation. */
        includeCommandLineAPI?: boolean;
        /** In silent mode exceptions thrown during evaluation are not reported and do not pause
    execution. Overrides `setPauseOnException` state. */
        silent?: boolean;
        /** Specifies in which execution context to perform evaluation. If the parameter is omitted the
    evaluation will be performed in the context of the inspected page. */
        contextId?: ExecutionContextId;
        /** Whether the result is expected to be a JSON object that should be sent by value. */
        returnByValue?: boolean;
        /** Whether preview should be generated for the result. */
        generatePreview?: boolean;
        /** Whether execution should be treated as initiated by user in the UI. */
        userGesture?: boolean;
        /** Whether execution should `await` for resulting value and return once awaited promise is
    resolved. */
        awaitPromise?: boolean;
    };
    type EvaluateReturn = {
        /** Evaluation result. */
        result: RemoteObject;
        /** Exception details. */
        exceptionDetails?: ExceptionDetails;
    };
    type GetPropertiesParameters = {
        /** Identifier of the object to return properties for. */
        objectId: RemoteObjectId;
        /** If true, returns properties belonging only to the element itself, not to its prototype
    chain. */
        ownProperties?: boolean;
        /** If true, returns accessor properties (with getter/setter) only; internal properties are not
    returned either. */
        accessorPropertiesOnly?: boolean;
        /** Whether preview should be generated for the results. */
        generatePreview?: boolean;
    };
    type GetPropertiesReturn = {
        /** Object properties. */
        result: PropertyDescriptor[];
        /** Internal object properties (only of the element itself). */
        internalProperties?: InternalPropertyDescriptor[];
        /** Exception details. */
        exceptionDetails?: ExceptionDetails;
    };
    type GlobalLexicalScopeNamesParameters = {
        /** Specifies in which execution context to lookup global scope variables. */
        executionContextId?: ExecutionContextId;
    };
    type GlobalLexicalScopeNamesReturn = {
        names: string[];
    };
    type QueryObjectsParameters = {
        /** Identifier of the prototype to return objects for. */
        prototypeObjectId: RemoteObjectId;
    };
    type QueryObjectsReturn = {
        /** Array with objects. */
        objects: RemoteObject;
    };
    type ReleaseObjectParameters = {
        /** Identifier of the object to release. */
        objectId: RemoteObjectId;
    };
    type ReleaseObjectGroupParameters = {
        /** Symbolic object group name. */
        objectGroup: string;
    };
    type RunScriptParameters = {
        /** Id of the script to run. */
        scriptId: ScriptId;
        /** Specifies in which execution context to perform script run. If the parameter is omitted the
    evaluation will be performed in the context of the inspected page. */
        executionContextId?: ExecutionContextId;
        /** Symbolic group name that can be used to release multiple objects. */
        objectGroup?: string;
        /** In silent mode exceptions thrown during evaluation are not reported and do not pause
    execution. Overrides `setPauseOnException` state. */
        silent?: boolean;
        /** Determines whether Command Line API should be available during the evaluation. */
        includeCommandLineAPI?: boolean;
        /** Whether the result is expected to be a JSON object which should be sent by value. */
        returnByValue?: boolean;
        /** Whether preview should be generated for the result. */
        generatePreview?: boolean;
        /** Whether execution should `await` for resulting value and return once awaited promise is
    resolved. */
        awaitPromise?: boolean;
    };
    type RunScriptReturn = {
        /** Run result. */
        result: RemoteObject;
        /** Exception details. */
        exceptionDetails?: ExceptionDetails;
    };
    type SetCustomObjectFormatterEnabledParameters = {
        enabled: boolean;
    };
}
/** This domain is deprecated. */
export declare class Schema {
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Returns supported domains. */
    getDomains(): Promise<Schema.GetDomainsReturn>;
}
export declare namespace Schema {
    /** Description of the protocol domain. */
    interface Domain {
        /** Domain name. */
        name: string;
        /** Domain version. */
        version: string;
    }
    type GetDomainsReturn = {
        /** List of supported domains. */
        domains: Domain[];
    };
}

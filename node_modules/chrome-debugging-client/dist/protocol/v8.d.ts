/**
 * Debugging Protocol 1.3 Domains
 * Generated on Mon Dec 11 2017 15:06:38 GMT-0800 (PST)
 */
import { IDebuggingProtocolClient } from "../lib/types";
/** This domain is deprecated - use Runtime or Log instead. */
export declare class Console {
    private _messageAdded;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Does nothing. */
    clearMessages(): Promise<void>;
    /** Disables console domain, prevents further console messages from being reported to the client. */
    disable(): Promise<void>;
    /** Enables console domain, sends the messages collected so far to the client by means of the
  `messageAdded` notification. */
    enable(): Promise<void>;
    /** Issued when new console message is added. */
    messageAdded: Console.MessageAddedHandler | null;
}
export declare namespace Console {
    /** Console message. */
    interface ConsoleMessage {
        /** Message source. */
        source: "xml" | "javascript" | "network" | "console-api" | "storage" | "appcache" | "rendering" | "security" | "other" | "deprecation" | "worker";
        /** Message severity. */
        level: "log" | "warning" | "error" | "debug" | "info";
        /** Message text. */
        text: string;
        /** URL of the message origin. */
        url?: string;
        /** Line number in the resource that generated this message (1-based). */
        line?: number;
        /** Column number in the resource that generated this message (1-based). */
        column?: number;
    }
    type MessageAddedParameters = {
        /** Console message that has been added. */
        message: ConsoleMessage;
    };
    type MessageAddedHandler = (params: MessageAddedParameters) => void;
}
/** Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing
breakpoints, stepping through execution, exploring stack traces, etc. */
export declare class Debugger {
    private _breakpointResolved;
    private _paused;
    private _resumed;
    private _scriptFailedToParse;
    private _scriptParsed;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Continues execution until specific location is reached. */
    continueToLocation(params: Debugger.ContinueToLocationParameters): Promise<void>;
    /** Disables debugger for given page. */
    disable(): Promise<void>;
    /** Enables debugger for the given page. Clients should not assume that the debugging has been
  enabled until the result for this command is received. */
    enable(): Promise<Debugger.EnableReturn>;
    /** Evaluates expression on a given call frame. */
    evaluateOnCallFrame(params: Debugger.EvaluateOnCallFrameParameters): Promise<Debugger.EvaluateOnCallFrameReturn>;
    /** Returns possible locations for breakpoint. scriptId in start and end range locations should be
  the same. */
    getPossibleBreakpoints(params: Debugger.GetPossibleBreakpointsParameters): Promise<Debugger.GetPossibleBreakpointsReturn>;
    /** Returns source for the script with given id. */
    getScriptSource(params: Debugger.GetScriptSourceParameters): Promise<Debugger.GetScriptSourceReturn>;
    /** Returns stack trace with given `stackTraceId`. */
    getStackTrace(params: Debugger.GetStackTraceParameters): Promise<Debugger.GetStackTraceReturn>;
    /** Stops on the next JavaScript statement. */
    pause(): Promise<void>;
    pauseOnAsyncCall(params: Debugger.PauseOnAsyncCallParameters): Promise<void>;
    /** Removes JavaScript breakpoint. */
    removeBreakpoint(params: Debugger.RemoveBreakpointParameters): Promise<void>;
    /** Restarts particular call frame from the beginning. */
    restartFrame(params: Debugger.RestartFrameParameters): Promise<Debugger.RestartFrameReturn>;
    /** Resumes JavaScript execution. */
    resume(): Promise<void>;
    /** This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and
  Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled
  before next pause. Returns success when async task is actually scheduled, returns error if no
  task were scheduled or another scheduleStepIntoAsync was called. */
    scheduleStepIntoAsync(): Promise<void>;
    /** Searches for given string in script content. */
    searchInContent(params: Debugger.SearchInContentParameters): Promise<Debugger.SearchInContentReturn>;
    /** Enables or disables async call stacks tracking. */
    setAsyncCallStackDepth(params: Debugger.SetAsyncCallStackDepthParameters): Promise<void>;
    /** Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in
  scripts with url matching one of the patterns. VM will try to leave blackboxed script by
  performing 'step in' several times, finally resorting to 'step out' if unsuccessful. */
    setBlackboxPatterns(params: Debugger.SetBlackboxPatternsParameters): Promise<void>;
    /** Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted
  scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.
  Positions array contains positions where blackbox state is changed. First interval isn't
  blackboxed. Array should be sorted. */
    setBlackboxedRanges(params: Debugger.SetBlackboxedRangesParameters): Promise<void>;
    /** Sets JavaScript breakpoint at a given location. */
    setBreakpoint(params: Debugger.SetBreakpointParameters): Promise<Debugger.SetBreakpointReturn>;
    /** Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this
  command is issued, all existing parsed scripts will have breakpoints resolved and returned in
  `locations` property. Further matching script parsing will result in subsequent
  `breakpointResolved` events issued. This logical breakpoint will survive page reloads. */
    setBreakpointByUrl(params: Debugger.SetBreakpointByUrlParameters): Promise<Debugger.SetBreakpointByUrlReturn>;
    /** Activates / deactivates all breakpoints on the page. */
    setBreakpointsActive(params: Debugger.SetBreakpointsActiveParameters): Promise<void>;
    /** Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or
  no exceptions. Initial pause on exceptions state is `none`. */
    setPauseOnExceptions(params: Debugger.SetPauseOnExceptionsParameters): Promise<void>;
    /** Changes return value in top frame. Available only at return break position. */
    setReturnValue(params: Debugger.SetReturnValueParameters): Promise<void>;
    /** Edits JavaScript source live. */
    setScriptSource(params: Debugger.SetScriptSourceParameters): Promise<Debugger.SetScriptSourceReturn>;
    /** Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc). */
    setSkipAllPauses(params: Debugger.SetSkipAllPausesParameters): Promise<void>;
    /** Changes value of variable in a callframe. Object-based scopes are not supported and must be
  mutated manually. */
    setVariableValue(params: Debugger.SetVariableValueParameters): Promise<void>;
    /** Steps into the function call. */
    stepInto(params: Debugger.StepIntoParameters): Promise<void>;
    /** Steps out of the function call. */
    stepOut(): Promise<void>;
    /** Steps over the statement. */
    stepOver(): Promise<void>;
    /** Fired when breakpoint is resolved to an actual script and location. */
    breakpointResolved: Debugger.BreakpointResolvedHandler | null;
    /** Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria. */
    paused: Debugger.PausedHandler | null;
    /** Fired when the virtual machine resumed execution. */
    resumed: Debugger.ResumedHandler | null;
    /** Fired when virtual machine fails to parse the script. */
    scriptFailedToParse: Debugger.ScriptFailedToParseHandler | null;
    /** Fired when virtual machine parses script. This event is also fired for all known and uncollected
  scripts upon enabling debugger. */
    scriptParsed: Debugger.ScriptParsedHandler | null;
}
export declare namespace Debugger {
    /** Breakpoint identifier. */
    type BreakpointId = string;
    /** Call frame identifier. */
    type CallFrameId = string;
    /** Location in the source code. */
    interface Location {
        /** Script identifier as reported in the `Debugger.scriptParsed`. */
        scriptId: Runtime.ScriptId;
        /** Line number in the script (0-based). */
        lineNumber: number;
        /** Column number in the script (0-based). */
        columnNumber?: number;
    }
    /** Location in the source code. */
    interface ScriptPosition {
        lineNumber: number;
        columnNumber: number;
    }
    /** JavaScript call frame. Array of call frames form the call stack. */
    interface CallFrame {
        /** Call frame identifier. This identifier is only valid while the virtual machine is paused. */
        callFrameId: CallFrameId;
        /** Name of the JavaScript function called on this call frame. */
        functionName: string;
        /** Location in the source code. */
        functionLocation?: Location;
        /** Location in the source code. */
        location: Location;
        /** JavaScript script name or url. */
        url: string;
        /** Scope chain for this call frame. */
        scopeChain: Scope[];
        /** `this` object for this call frame. */
        this: Runtime.RemoteObject;
        /** The value being returned, if the function is at return point. */
        returnValue?: Runtime.RemoteObject;
    }
    /** Scope description. */
    interface Scope {
        /** Scope type. */
        type: "global" | "local" | "with" | "closure" | "catch" | "block" | "script" | "eval" | "module";
        /** Object representing the scope. For `global` and `with` scopes it represents the actual
    object; for the rest of the scopes, it is artificial transient object enumerating scope
    variables as its properties. */
        object: Runtime.RemoteObject;
        name?: string;
        /** Location in the source code where scope starts */
        startLocation?: Location;
        /** Location in the source code where scope ends */
        endLocation?: Location;
    }
    /** Search match for resource. */
    interface SearchMatch {
        /** Line number in resource content. */
        lineNumber: number;
        /** Line with match content. */
        lineContent: string;
    }
    interface BreakLocation {
        /** Script identifier as reported in the `Debugger.scriptParsed`. */
        scriptId: Runtime.ScriptId;
        /** Line number in the script (0-based). */
        lineNumber: number;
        /** Column number in the script (0-based). */
        columnNumber?: number;
        type?: "debuggerStatement" | "call" | "return";
    }
    type BreakpointResolvedParameters = {
        /** Breakpoint unique identifier. */
        breakpointId: BreakpointId;
        /** Actual breakpoint location. */
        location: Location;
    };
    type BreakpointResolvedHandler = (params: BreakpointResolvedParameters) => void;
    type PausedParameters = {
        /** Call stack the virtual machine stopped on. */
        callFrames: CallFrame[];
        /** Pause reason. */
        reason: "XHR" | "DOM" | "EventListener" | "exception" | "assert" | "debugCommand" | "promiseRejection" | "OOM" | "other" | "ambiguous";
        /** Object containing break-specific auxiliary properties. */
        data?: any;
        /** Hit breakpoints IDs */
        hitBreakpoints?: string[];
        /** Async stack trace, if any. */
        asyncStackTrace?: Runtime.StackTrace;
        /** Async stack trace, if any. */
        asyncStackTraceId?: Runtime.StackTraceId;
        /** Just scheduled async call will have this stack trace as parent stack during async execution.
    This field is available only after `Debugger.stepInto` call with `breakOnAsynCall` flag. */
        asyncCallStackTraceId?: Runtime.StackTraceId;
    };
    type PausedHandler = (params: PausedParameters) => void;
    type ResumedHandler = () => void;
    type ScriptFailedToParseParameters = {
        /** Identifier of the script parsed. */
        scriptId: Runtime.ScriptId;
        /** URL or name of the script parsed (if any). */
        url: string;
        /** Line offset of the script within the resource with given URL (for script tags). */
        startLine: number;
        /** Column offset of the script within the resource with given URL. */
        startColumn: number;
        /** Last line of the script. */
        endLine: number;
        /** Length of the last line of the script. */
        endColumn: number;
        /** Specifies script creation context. */
        executionContextId: Runtime.ExecutionContextId;
        /** Content hash of the script. */
        hash: string;
        /** Embedder-specific auxiliary data. */
        executionContextAuxData?: any;
        /** URL of source map associated with script (if any). */
        sourceMapURL?: string;
        /** True, if this script has sourceURL. */
        hasSourceURL?: boolean;
        /** True, if this script is ES6 module. */
        isModule?: boolean;
        /** This script length. */
        length?: number;
        /** JavaScript top stack frame of where the script parsed event was triggered if available. */
        stackTrace?: Runtime.StackTrace;
    };
    type ScriptFailedToParseHandler = (params: ScriptFailedToParseParameters) => void;
    type ScriptParsedParameters = {
        /** Identifier of the script parsed. */
        scriptId: Runtime.ScriptId;
        /** URL or name of the script parsed (if any). */
        url: string;
        /** Line offset of the script within the resource with given URL (for script tags). */
        startLine: number;
        /** Column offset of the script within the resource with given URL. */
        startColumn: number;
        /** Last line of the script. */
        endLine: number;
        /** Length of the last line of the script. */
        endColumn: number;
        /** Specifies script creation context. */
        executionContextId: Runtime.ExecutionContextId;
        /** Content hash of the script. */
        hash: string;
        /** Embedder-specific auxiliary data. */
        executionContextAuxData?: any;
        /** True, if this script is generated as a result of the live edit operation. */
        isLiveEdit?: boolean;
        /** URL of source map associated with script (if any). */
        sourceMapURL?: string;
        /** True, if this script has sourceURL. */
        hasSourceURL?: boolean;
        /** True, if this script is ES6 module. */
        isModule?: boolean;
        /** This script length. */
        length?: number;
        /** JavaScript top stack frame of where the script parsed event was triggered if available. */
        stackTrace?: Runtime.StackTrace;
    };
    type ScriptParsedHandler = (params: ScriptParsedParameters) => void;
    type ContinueToLocationParameters = {
        /** Location to continue to. */
        location: Location;
        targetCallFrames?: "any" | "current";
    };
    type EnableReturn = {
        /** Unique identifier of the debugger. */
        debuggerId: Runtime.UniqueDebuggerId;
    };
    type EvaluateOnCallFrameParameters = {
        /** Call frame identifier to evaluate on. */
        callFrameId: CallFrameId;
        /** Expression to evaluate. */
        expression: string;
        /** String object group name to put result into (allows rapid releasing resulting object handles
    using `releaseObjectGroup`). */
        objectGroup?: string;
        /** Specifies whether command line API should be available to the evaluated expression, defaults
    to false. */
        includeCommandLineAPI?: boolean;
        /** In silent mode exceptions thrown during evaluation are not reported and do not pause
    execution. Overrides `setPauseOnException` state. */
        silent?: boolean;
        /** Whether the result is expected to be a JSON object that should be sent by value. */
        returnByValue?: boolean;
        /** Whether preview should be generated for the result. */
        generatePreview?: boolean;
        /** Whether to throw an exception if side effect cannot be ruled out during evaluation. */
        throwOnSideEffect?: boolean;
    };
    type EvaluateOnCallFrameReturn = {
        /** Object wrapper for the evaluation result. */
        result: Runtime.RemoteObject;
        /** Exception details. */
        exceptionDetails?: Runtime.ExceptionDetails;
    };
    type GetPossibleBreakpointsParameters = {
        /** Start of range to search possible breakpoint locations in. */
        start: Location;
        /** End of range to search possible breakpoint locations in (excluding). When not specified, end
    of scripts is used as end of range. */
        end?: Location;
        /** Only consider locations which are in the same (non-nested) function as start. */
        restrictToFunction?: boolean;
    };
    type GetPossibleBreakpointsReturn = {
        /** List of the possible breakpoint locations. */
        locations: BreakLocation[];
    };
    type GetScriptSourceParameters = {
        /** Id of the script to get source for. */
        scriptId: Runtime.ScriptId;
    };
    type GetScriptSourceReturn = {
        /** Script source. */
        scriptSource: string;
    };
    type GetStackTraceParameters = {
        stackTraceId: Runtime.StackTraceId;
    };
    type GetStackTraceReturn = {
        stackTrace: Runtime.StackTrace;
    };
    type PauseOnAsyncCallParameters = {
        /** Debugger will pause when async call with given stack trace is started. */
        parentStackTraceId: Runtime.StackTraceId;
    };
    type RemoveBreakpointParameters = {
        breakpointId: BreakpointId;
    };
    type RestartFrameParameters = {
        /** Call frame identifier to evaluate on. */
        callFrameId: CallFrameId;
    };
    type RestartFrameReturn = {
        /** New stack trace. */
        callFrames: CallFrame[];
        /** Async stack trace, if any. */
        asyncStackTrace?: Runtime.StackTrace;
        /** Async stack trace, if any. */
        asyncStackTraceId?: Runtime.StackTraceId;
    };
    type SearchInContentParameters = {
        /** Id of the script to search in. */
        scriptId: Runtime.ScriptId;
        /** String to search for. */
        query: string;
        /** If true, search is case sensitive. */
        caseSensitive?: boolean;
        /** If true, treats string parameter as regex. */
        isRegex?: boolean;
    };
    type SearchInContentReturn = {
        /** List of search matches. */
        result: SearchMatch[];
    };
    type SetAsyncCallStackDepthParameters = {
        /** Maximum depth of async call stacks. Setting to `0` will effectively disable collecting async
    call stacks (default). */
        maxDepth: number;
    };
    type SetBlackboxPatternsParameters = {
        /** Array of regexps that will be used to check script url for blackbox state. */
        patterns: string[];
    };
    type SetBlackboxedRangesParameters = {
        /** Id of the script. */
        scriptId: Runtime.ScriptId;
        positions: ScriptPosition[];
    };
    type SetBreakpointParameters = {
        /** Location to set breakpoint in. */
        location: Location;
        /** Expression to use as a breakpoint condition. When specified, debugger will only stop on the
    breakpoint if this expression evaluates to true. */
        condition?: string;
    };
    type SetBreakpointReturn = {
        /** Id of the created breakpoint for further reference. */
        breakpointId: BreakpointId;
        /** Location this breakpoint resolved into. */
        actualLocation: Location;
    };
    type SetBreakpointByUrlParameters = {
        /** Line number to set breakpoint at. */
        lineNumber: number;
        /** URL of the resources to set breakpoint on. */
        url?: string;
        /** Regex pattern for the URLs of the resources to set breakpoints on. Either `url` or
    `urlRegex` must be specified. */
        urlRegex?: string;
        /** Script hash of the resources to set breakpoint on. */
        scriptHash?: string;
        /** Offset in the line to set breakpoint at. */
        columnNumber?: number;
        /** Expression to use as a breakpoint condition. When specified, debugger will only stop on the
    breakpoint if this expression evaluates to true. */
        condition?: string;
    };
    type SetBreakpointByUrlReturn = {
        /** Id of the created breakpoint for further reference. */
        breakpointId: BreakpointId;
        /** List of the locations this breakpoint resolved into upon addition. */
        locations: Location[];
    };
    type SetBreakpointsActiveParameters = {
        /** New value for breakpoints active state. */
        active: boolean;
    };
    type SetPauseOnExceptionsParameters = {
        /** Pause on exceptions mode. */
        state: "none" | "uncaught" | "all";
    };
    type SetReturnValueParameters = {
        /** New return value. */
        newValue: Runtime.CallArgument;
    };
    type SetScriptSourceParameters = {
        /** Id of the script to edit. */
        scriptId: Runtime.ScriptId;
        /** New content of the script. */
        scriptSource: string;
        /** If true the change will not actually be applied. Dry run may be used to get result
    description without actually modifying the code. */
        dryRun?: boolean;
    };
    type SetScriptSourceReturn = {
        /** New stack trace in case editing has happened while VM was stopped. */
        callFrames?: CallFrame[];
        /** Whether current call stack  was modified after applying the changes. */
        stackChanged?: boolean;
        /** Async stack trace, if any. */
        asyncStackTrace?: Runtime.StackTrace;
        /** Async stack trace, if any. */
        asyncStackTraceId?: Runtime.StackTraceId;
        /** Exception details if any. */
        exceptionDetails?: Runtime.ExceptionDetails;
    };
    type SetSkipAllPausesParameters = {
        /** New value for skip pauses state. */
        skip: boolean;
    };
    type SetVariableValueParameters = {
        /** 0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch'
    scope types are allowed. Other scopes could be manipulated manually. */
        scopeNumber: number;
        /** Variable name. */
        variableName: string;
        /** New variable value. */
        newValue: Runtime.CallArgument;
        /** Id of callframe that holds variable. */
        callFrameId: CallFrameId;
    };
    type StepIntoParameters = {
        /** Debugger will issue additional Debugger.paused notification if any async task is scheduled
    before next pause. */
        breakOnAsyncCall?: boolean;
    };
}
export declare class HeapProfiler {
    private _addHeapSnapshotChunk;
    private _heapStatsUpdate;
    private _lastSeenObjectId;
    private _reportHeapSnapshotProgress;
    private _resetProfiles;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Enables console to refer to the node with given id via $x (see Command Line API for more details
  $x functions). */
    addInspectedHeapObject(params: HeapProfiler.AddInspectedHeapObjectParameters): Promise<void>;
    collectGarbage(): Promise<void>;
    disable(): Promise<void>;
    enable(): Promise<void>;
    getHeapObjectId(params: HeapProfiler.GetHeapObjectIdParameters): Promise<HeapProfiler.GetHeapObjectIdReturn>;
    getObjectByHeapObjectId(params: HeapProfiler.GetObjectByHeapObjectIdParameters): Promise<HeapProfiler.GetObjectByHeapObjectIdReturn>;
    getSamplingProfile(): Promise<HeapProfiler.GetSamplingProfileReturn>;
    startSampling(params: HeapProfiler.StartSamplingParameters): Promise<void>;
    startTrackingHeapObjects(params: HeapProfiler.StartTrackingHeapObjectsParameters): Promise<void>;
    stopSampling(): Promise<HeapProfiler.StopSamplingReturn>;
    stopTrackingHeapObjects(params: HeapProfiler.StopTrackingHeapObjectsParameters): Promise<void>;
    takeHeapSnapshot(params: HeapProfiler.TakeHeapSnapshotParameters): Promise<void>;
    addHeapSnapshotChunk: HeapProfiler.AddHeapSnapshotChunkHandler | null;
    /** If heap objects tracking has been started then backend may send update for one or more fragments */
    heapStatsUpdate: HeapProfiler.HeapStatsUpdateHandler | null;
    /** If heap objects tracking has been started then backend regularly sends a current value for last
  seen object id and corresponding timestamp. If the were changes in the heap since last event
  then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event. */
    lastSeenObjectId: HeapProfiler.LastSeenObjectIdHandler | null;
    reportHeapSnapshotProgress: HeapProfiler.ReportHeapSnapshotProgressHandler | null;
    resetProfiles: HeapProfiler.ResetProfilesHandler | null;
}
export declare namespace HeapProfiler {
    /** Heap snapshot object id. */
    type HeapSnapshotObjectId = string;
    /** Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes. */
    interface SamplingHeapProfileNode {
        /** Function location. */
        callFrame: Runtime.CallFrame;
        /** Allocations size in bytes for the node excluding children. */
        selfSize: number;
        /** Child nodes. */
        children: SamplingHeapProfileNode[];
    }
    /** Profile. */
    interface SamplingHeapProfile {
        head: SamplingHeapProfileNode;
    }
    type AddHeapSnapshotChunkParameters = {
        chunk: string;
    };
    type AddHeapSnapshotChunkHandler = (params: AddHeapSnapshotChunkParameters) => void;
    type HeapStatsUpdateParameters = {
        /** An array of triplets. Each triplet describes a fragment. The first integer is the fragment
    index, the second integer is a total count of objects for the fragment, the third integer is
    a total size of the objects for the fragment. */
        statsUpdate: number[];
    };
    type HeapStatsUpdateHandler = (params: HeapStatsUpdateParameters) => void;
    type LastSeenObjectIdParameters = {
        lastSeenObjectId: number;
        timestamp: number;
    };
    type LastSeenObjectIdHandler = (params: LastSeenObjectIdParameters) => void;
    type ReportHeapSnapshotProgressParameters = {
        done: number;
        total: number;
        finished?: boolean;
    };
    type ReportHeapSnapshotProgressHandler = (params: ReportHeapSnapshotProgressParameters) => void;
    type ResetProfilesHandler = () => void;
    type AddInspectedHeapObjectParameters = {
        /** Heap snapshot object id to be accessible by means of $x command line API. */
        heapObjectId: HeapSnapshotObjectId;
    };
    type GetHeapObjectIdParameters = {
        /** Identifier of the object to get heap object id for. */
        objectId: Runtime.RemoteObjectId;
    };
    type GetHeapObjectIdReturn = {
        /** Id of the heap snapshot object corresponding to the passed remote object id. */
        heapSnapshotObjectId: HeapSnapshotObjectId;
    };
    type GetObjectByHeapObjectIdParameters = {
        objectId: HeapSnapshotObjectId;
        /** Symbolic group name that can be used to release multiple objects. */
        objectGroup?: string;
    };
    type GetObjectByHeapObjectIdReturn = {
        /** Evaluation result. */
        result: Runtime.RemoteObject;
    };
    type GetSamplingProfileReturn = {
        /** Return the sampling profile being collected. */
        profile: SamplingHeapProfile;
    };
    type StartSamplingParameters = {
        /** Average sample interval in bytes. Poisson distribution is used for the intervals. The
    default value is 32768 bytes. */
        samplingInterval?: number;
    };
    type StartTrackingHeapObjectsParameters = {
        trackAllocations?: boolean;
    };
    type StopSamplingReturn = {
        /** Recorded sampling heap profile. */
        profile: SamplingHeapProfile;
    };
    type StopTrackingHeapObjectsParameters = {
        /** If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken
    when the tracking is stopped. */
        reportProgress?: boolean;
    };
    type TakeHeapSnapshotParameters = {
        /** If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken. */
        reportProgress?: boolean;
    };
}
export declare class Profiler {
    private _consoleProfileFinished;
    private _consoleProfileStarted;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    disable(): Promise<void>;
    enable(): Promise<void>;
    /** Collect coverage data for the current isolate. The coverage data may be incomplete due to
  garbage collection. */
    getBestEffortCoverage(): Promise<Profiler.GetBestEffortCoverageReturn>;
    /** Changes CPU profiler sampling interval. Must be called before CPU profiles recording started. */
    setSamplingInterval(params: Profiler.SetSamplingIntervalParameters): Promise<void>;
    start(): Promise<void>;
    /** Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code
  coverage may be incomplete. Enabling prevents running optimized code and resets execution
  counters. */
    startPreciseCoverage(params: Profiler.StartPreciseCoverageParameters): Promise<void>;
    /** Enable type profile. */
    startTypeProfile(): Promise<void>;
    stop(): Promise<Profiler.StopReturn>;
    /** Disable precise code coverage. Disabling releases unnecessary execution count records and allows
  executing optimized code. */
    stopPreciseCoverage(): Promise<void>;
    /** Disable type profile. Disabling releases type profile data collected so far. */
    stopTypeProfile(): Promise<void>;
    /** Collect coverage data for the current isolate, and resets execution counters. Precise code
  coverage needs to have started. */
    takePreciseCoverage(): Promise<Profiler.TakePreciseCoverageReturn>;
    /** Collect type profile. */
    takeTypeProfile(): Promise<Profiler.TakeTypeProfileReturn>;
    consoleProfileFinished: Profiler.ConsoleProfileFinishedHandler | null;
    /** Sent when new profile recording is started using console.profile() call. */
    consoleProfileStarted: Profiler.ConsoleProfileStartedHandler | null;
}
export declare namespace Profiler {
    /** Profile node. Holds callsite information, execution statistics and child nodes. */
    interface ProfileNode {
        /** Unique id of the node. */
        id: number;
        /** Function location. */
        callFrame: Runtime.CallFrame;
        /** Number of samples where this node was on top of the call stack. */
        hitCount?: number;
        /** Child node ids. */
        children?: number[];
        /** The reason of being not optimized. The function may be deoptimized or marked as don't
    optimize. */
        deoptReason?: string;
        /** An array of source position ticks. */
        positionTicks?: PositionTickInfo[];
    }
    /** Profile. */
    interface Profile {
        /** The list of profile nodes. First item is the root node. */
        nodes: ProfileNode[];
        /** Profiling start timestamp in microseconds. */
        startTime: number;
        /** Profiling end timestamp in microseconds. */
        endTime: number;
        /** Ids of samples top nodes. */
        samples?: number[];
        /** Time intervals between adjacent samples in microseconds. The first delta is relative to the
    profile startTime. */
        timeDeltas?: number[];
    }
    /** Specifies a number of samples attributed to a certain source position. */
    interface PositionTickInfo {
        /** Source line number (1-based). */
        line: number;
        /** Number of samples attributed to the source line. */
        ticks: number;
    }
    /** Coverage data for a source range. */
    interface CoverageRange {
        /** JavaScript script source offset for the range start. */
        startOffset: number;
        /** JavaScript script source offset for the range end. */
        endOffset: number;
        /** Collected execution count of the source range. */
        count: number;
    }
    /** Coverage data for a JavaScript function. */
    interface FunctionCoverage {
        /** JavaScript function name. */
        functionName: string;
        /** Source ranges inside the function with coverage data. */
        ranges: CoverageRange[];
        /** Whether coverage data for this function has block granularity. */
        isBlockCoverage: boolean;
    }
    /** Coverage data for a JavaScript script. */
    interface ScriptCoverage {
        /** JavaScript script id. */
        scriptId: Runtime.ScriptId;
        /** JavaScript script name or url. */
        url: string;
        /** Functions contained in the script that has coverage data. */
        functions: FunctionCoverage[];
    }
    /** Describes a type collected during runtime. */
    interface TypeObject {
        /** Name of a type collected with type profiling. */
        name: string;
    }
    /** Source offset and types for a parameter or return value. */
    interface TypeProfileEntry {
        /** Source offset of the parameter or end of function for return values. */
        offset: number;
        /** The types for this parameter or return value. */
        types: TypeObject[];
    }
    /** Type profile data collected during runtime for a JavaScript script. */
    interface ScriptTypeProfile {
        /** JavaScript script id. */
        scriptId: Runtime.ScriptId;
        /** JavaScript script name or url. */
        url: string;
        /** Type profile entries for parameters and return values of the functions in the script. */
        entries: TypeProfileEntry[];
    }
    type ConsoleProfileFinishedParameters = {
        id: string;
        /** Location of console.profileEnd(). */
        location: Debugger.Location;
        profile: Profile;
        /** Profile title passed as an argument to console.profile(). */
        title?: string;
    };
    type ConsoleProfileFinishedHandler = (params: ConsoleProfileFinishedParameters) => void;
    type ConsoleProfileStartedParameters = {
        id: string;
        /** Location of console.profile(). */
        location: Debugger.Location;
        /** Profile title passed as an argument to console.profile(). */
        title?: string;
    };
    type ConsoleProfileStartedHandler = (params: ConsoleProfileStartedParameters) => void;
    type GetBestEffortCoverageReturn = {
        /** Coverage data for the current isolate. */
        result: ScriptCoverage[];
    };
    type SetSamplingIntervalParameters = {
        /** New sampling interval in microseconds. */
        interval: number;
    };
    type StartPreciseCoverageParameters = {
        /** Collect accurate call counts beyond simple 'covered' or 'not covered'. */
        callCount?: boolean;
        /** Collect block-based coverage. */
        detailed?: boolean;
    };
    type StopReturn = {
        /** Recorded profile. */
        profile: Profile;
    };
    type TakePreciseCoverageReturn = {
        /** Coverage data for the current isolate. */
        result: ScriptCoverage[];
    };
    type TakeTypeProfileReturn = {
        /** Type profile for all scripts since startTypeProfile() was turned on. */
        result: ScriptTypeProfile[];
    };
}
/** Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects.
Evaluation results are returned as mirror object that expose object type, string representation
and unique identifier that can be used for further object reference. Original objects are
maintained in memory unless they are either explicitly released or are released along with the
other objects in their object group. */
export declare class Runtime {
    private _consoleAPICalled;
    private _exceptionRevoked;
    private _exceptionThrown;
    private _executionContextCreated;
    private _executionContextDestroyed;
    private _executionContextsCleared;
    private _inspectRequested;
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Add handler to promise with given promise object id. */
    awaitPromise(params: Runtime.AwaitPromiseParameters): Promise<Runtime.AwaitPromiseReturn>;
    /** Calls function with given declaration on the given object. Object group of the result is
  inherited from the target object. */
    callFunctionOn(params: Runtime.CallFunctionOnParameters): Promise<Runtime.CallFunctionOnReturn>;
    /** Compiles expression. */
    compileScript(params: Runtime.CompileScriptParameters): Promise<Runtime.CompileScriptReturn>;
    /** Disables reporting of execution contexts creation. */
    disable(): Promise<void>;
    /** Discards collected exceptions and console API calls. */
    discardConsoleEntries(): Promise<void>;
    /** Enables reporting of execution contexts creation by means of `executionContextCreated` event.
  When the reporting gets enabled the event will be sent immediately for each existing execution
  context. */
    enable(): Promise<void>;
    /** Evaluates expression on global object. */
    evaluate(params: Runtime.EvaluateParameters): Promise<Runtime.EvaluateReturn>;
    /** Returns properties of a given object. Object group of the result is inherited from the target
  object. */
    getProperties(params: Runtime.GetPropertiesParameters): Promise<Runtime.GetPropertiesReturn>;
    /** Returns all let, const and class variables from global scope. */
    globalLexicalScopeNames(params: Runtime.GlobalLexicalScopeNamesParameters): Promise<Runtime.GlobalLexicalScopeNamesReturn>;
    queryObjects(params: Runtime.QueryObjectsParameters): Promise<Runtime.QueryObjectsReturn>;
    /** Releases remote object with given id. */
    releaseObject(params: Runtime.ReleaseObjectParameters): Promise<void>;
    /** Releases all remote objects that belong to a given group. */
    releaseObjectGroup(params: Runtime.ReleaseObjectGroupParameters): Promise<void>;
    /** Tells inspected instance to run if it was waiting for debugger to attach. */
    runIfWaitingForDebugger(): Promise<void>;
    /** Runs script with given id in a given context. */
    runScript(params: Runtime.RunScriptParameters): Promise<Runtime.RunScriptReturn>;
    setCustomObjectFormatterEnabled(params: Runtime.SetCustomObjectFormatterEnabledParameters): Promise<void>;
    /** Issued when console API was called. */
    consoleAPICalled: Runtime.ConsoleAPICalledHandler | null;
    /** Issued when unhandled exception was revoked. */
    exceptionRevoked: Runtime.ExceptionRevokedHandler | null;
    /** Issued when exception was thrown and unhandled. */
    exceptionThrown: Runtime.ExceptionThrownHandler | null;
    /** Issued when new execution context is created. */
    executionContextCreated: Runtime.ExecutionContextCreatedHandler | null;
    /** Issued when execution context is destroyed. */
    executionContextDestroyed: Runtime.ExecutionContextDestroyedHandler | null;
    /** Issued when all executionContexts were cleared in browser */
    executionContextsCleared: Runtime.ExecutionContextsClearedHandler | null;
    /** Issued when object should be inspected (for example, as a result of inspect() command line API
  call). */
    inspectRequested: Runtime.InspectRequestedHandler | null;
}
export declare namespace Runtime {
    /** Unique script identifier. */
    type ScriptId = string;
    /** Unique object identifier. */
    type RemoteObjectId = string;
    /** Primitive value which cannot be JSON-stringified. */
    type UnserializableValue = "Infinity" | "NaN" | "-Infinity" | "-0";
    /** Mirror object referencing original JavaScript object. */
    interface RemoteObject {
        /** Object type. */
        type: "object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol";
        /** Object subtype hint. Specified for `object` type values only. */
        subtype?: "array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "iterator" | "generator" | "error" | "proxy" | "promise" | "typedarray";
        /** Object class (constructor) name. Specified for `object` type values only. */
        className?: string;
        /** Remote object value in case of primitive values or JSON values (if it was requested). */
        value?: any;
        /** Primitive value which can not be JSON-stringified does not have `value`, but gets this
    property. */
        unserializableValue?: UnserializableValue;
        /** String representation of the object. */
        description?: string;
        /** Unique object identifier (for non-primitive values). */
        objectId?: RemoteObjectId;
        /** Preview containing abbreviated property values. Specified for `object` type values only. */
        preview?: ObjectPreview;
        customPreview?: CustomPreview;
    }
    interface CustomPreview {
        header: string;
        hasBody: boolean;
        formatterObjectId: RemoteObjectId;
        bindRemoteObjectFunctionId: RemoteObjectId;
        configObjectId?: RemoteObjectId;
    }
    /** Object containing abbreviated remote object value. */
    interface ObjectPreview {
        /** Object type. */
        type: "object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol";
        /** Object subtype hint. Specified for `object` type values only. */
        subtype?: "array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "iterator" | "generator" | "error";
        /** String representation of the object. */
        description?: string;
        /** True iff some of the properties or entries of the original object did not fit. */
        overflow: boolean;
        /** List of the properties. */
        properties: PropertyPreview[];
        /** List of the entries. Specified for `map` and `set` subtype values only. */
        entries?: EntryPreview[];
    }
    interface PropertyPreview {
        /** Property name. */
        name: string;
        /** Object type. Accessor means that the property itself is an accessor property. */
        type: "object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "accessor";
        /** User-friendly property value string. */
        value?: string;
        /** Nested value preview. */
        valuePreview?: ObjectPreview;
        /** Object subtype hint. Specified for `object` type values only. */
        subtype?: "array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "iterator" | "generator" | "error";
    }
    interface EntryPreview {
        /** Preview of the key. Specified for map-like collection entries. */
        key?: ObjectPreview;
        /** Preview of the value. */
        value: ObjectPreview;
    }
    /** Object property descriptor. */
    interface PropertyDescriptor {
        /** Property name or symbol description. */
        name: string;
        /** The value associated with the property. */
        value?: RemoteObject;
        /** True if the value associated with the property may be changed (data descriptors only). */
        writable?: boolean;
        /** A function which serves as a getter for the property, or `undefined` if there is no getter
    (accessor descriptors only). */
        get?: RemoteObject;
        /** A function which serves as a setter for the property, or `undefined` if there is no setter
    (accessor descriptors only). */
        set?: RemoteObject;
        /** True if the type of this property descriptor may be changed and if the property may be
    deleted from the corresponding object. */
        configurable: boolean;
        /** True if this property shows up during enumeration of the properties on the corresponding
    object. */
        enumerable: boolean;
        /** True if the result was thrown during the evaluation. */
        wasThrown?: boolean;
        /** True if the property is owned for the object. */
        isOwn?: boolean;
        /** Property symbol object, if the property is of the `symbol` type. */
        symbol?: RemoteObject;
    }
    /** Object internal property descriptor. This property isn't normally visible in JavaScript code. */
    interface InternalPropertyDescriptor {
        /** Conventional property name. */
        name: string;
        /** The value associated with the property. */
        value?: RemoteObject;
    }
    /** Represents function call argument. Either remote object id `objectId`, primitive `value`,
  unserializable primitive value or neither of (for undefined) them should be specified. */
    interface CallArgument {
        /** Primitive value or serializable javascript object. */
        value?: any;
        /** Primitive value which can not be JSON-stringified. */
        unserializableValue?: UnserializableValue;
        /** Remote object handle. */
        objectId?: RemoteObjectId;
    }
    /** Id of an execution context. */
    type ExecutionContextId = number;
    /** Description of an isolated world. */
    interface ExecutionContextDescription {
        /** Unique id of the execution context. It can be used to specify in which execution context
    script evaluation should be performed. */
        id: ExecutionContextId;
        /** Execution context origin. */
        origin: string;
        /** Human readable name describing given context. */
        name: string;
        /** Embedder-specific auxiliary data. */
        auxData?: any;
    }
    /** Detailed information about exception (or error) that was thrown during script compilation or
  execution. */
    interface ExceptionDetails {
        /** Exception id. */
        exceptionId: number;
        /** Exception text, which should be used together with exception object when available. */
        text: string;
        /** Line number of the exception location (0-based). */
        lineNumber: number;
        /** Column number of the exception location (0-based). */
        columnNumber: number;
        /** Script ID of the exception location. */
        scriptId?: ScriptId;
        /** URL of the exception location, to be used when the script was not reported. */
        url?: string;
        /** JavaScript stack trace if available. */
        stackTrace?: StackTrace;
        /** Exception object if available. */
        exception?: RemoteObject;
        /** Identifier of the context where exception happened. */
        executionContextId?: ExecutionContextId;
    }
    /** Number of milliseconds since epoch. */
    type Timestamp = number;
    /** Stack entry for runtime errors and assertions. */
    interface CallFrame {
        /** JavaScript function name. */
        functionName: string;
        /** JavaScript script id. */
        scriptId: ScriptId;
        /** JavaScript script name or url. */
        url: string;
        /** JavaScript script line number (0-based). */
        lineNumber: number;
        /** JavaScript script column number (0-based). */
        columnNumber: number;
    }
    /** Call frames for assertions or error messages. */
    interface StackTrace {
        /** String label of this stack trace. For async traces this may be a name of the function that
    initiated the async call. */
        description?: string;
        /** JavaScript function name. */
        callFrames: CallFrame[];
        /** Asynchronous JavaScript stack trace that preceded this stack, if available. */
        parent?: StackTrace;
        /** Asynchronous JavaScript stack trace that preceded this stack, if available. */
        parentId?: StackTraceId;
    }
    /** Unique identifier of current debugger. */
    type UniqueDebuggerId = string;
    /** If `debuggerId` is set stack trace comes from another debugger and can be resolved there. This
  allows to track cross-debugger calls. See `Runtime.StackTrace` and `Debugger.paused` for usages. */
    interface StackTraceId {
        id: string;
        debuggerId?: UniqueDebuggerId;
    }
    type ConsoleAPICalledParameters = {
        /** Type of the call. */
        type: "log" | "debug" | "info" | "error" | "warning" | "dir" | "dirxml" | "table" | "trace" | "clear" | "startGroup" | "startGroupCollapsed" | "endGroup" | "assert" | "profile" | "profileEnd" | "count" | "timeEnd";
        /** Call arguments. */
        args: RemoteObject[];
        /** Identifier of the context where the call was made. */
        executionContextId: ExecutionContextId;
        /** Call timestamp. */
        timestamp: Timestamp;
        /** Stack trace captured when the call was made. */
        stackTrace?: StackTrace;
        /** Console context descriptor for calls on non-default console context (not console.*):
    'anonymous#unique-logger-id' for call on unnamed context, 'name#unique-logger-id' for call
    on named context. */
        context?: string;
    };
    type ConsoleAPICalledHandler = (params: ConsoleAPICalledParameters) => void;
    type ExceptionRevokedParameters = {
        /** Reason describing why exception was revoked. */
        reason: string;
        /** The id of revoked exception, as reported in `exceptionThrown`. */
        exceptionId: number;
    };
    type ExceptionRevokedHandler = (params: ExceptionRevokedParameters) => void;
    type ExceptionThrownParameters = {
        /** Timestamp of the exception. */
        timestamp: Timestamp;
        exceptionDetails: ExceptionDetails;
    };
    type ExceptionThrownHandler = (params: ExceptionThrownParameters) => void;
    type ExecutionContextCreatedParameters = {
        /** A newly created execution context. */
        context: ExecutionContextDescription;
    };
    type ExecutionContextCreatedHandler = (params: ExecutionContextCreatedParameters) => void;
    type ExecutionContextDestroyedParameters = {
        /** Id of the destroyed context */
        executionContextId: ExecutionContextId;
    };
    type ExecutionContextDestroyedHandler = (params: ExecutionContextDestroyedParameters) => void;
    type ExecutionContextsClearedHandler = () => void;
    type InspectRequestedParameters = {
        object: RemoteObject;
        hints: any;
    };
    type InspectRequestedHandler = (params: InspectRequestedParameters) => void;
    type AwaitPromiseParameters = {
        /** Identifier of the promise. */
        promiseObjectId: RemoteObjectId;
        /** Whether the result is expected to be a JSON object that should be sent by value. */
        returnByValue?: boolean;
        /** Whether preview should be generated for the result. */
        generatePreview?: boolean;
    };
    type AwaitPromiseReturn = {
        /** Promise result. Will contain rejected value if promise was rejected. */
        result: RemoteObject;
        /** Exception details if stack strace is available. */
        exceptionDetails?: ExceptionDetails;
    };
    type CallFunctionOnParameters = {
        /** Declaration of the function to call. */
        functionDeclaration: string;
        /** Identifier of the object to call function on. Either objectId or executionContextId should
    be specified. */
        objectId?: RemoteObjectId;
        /** Call arguments. All call arguments must belong to the same JavaScript world as the target
    object. */
        arguments?: CallArgument[];
        /** In silent mode exceptions thrown during evaluation are not reported and do not pause
    execution. Overrides `setPauseOnException` state. */
        silent?: boolean;
        /** Whether the result is expected to be a JSON object which should be sent by value. */
        returnByValue?: boolean;
        /** Whether preview should be generated for the result. */
        generatePreview?: boolean;
        /** Whether execution should be treated as initiated by user in the UI. */
        userGesture?: boolean;
        /** Whether execution should `await` for resulting value and return once awaited promise is
    resolved. */
        awaitPromise?: boolean;
        /** Specifies execution context which global object will be used to call function on. Either
    executionContextId or objectId should be specified. */
        executionContextId?: ExecutionContextId;
        /** Symbolic group name that can be used to release multiple objects. If objectGroup is not
    specified and objectId is, objectGroup will be inherited from object. */
        objectGroup?: string;
    };
    type CallFunctionOnReturn = {
        /** Call result. */
        result: RemoteObject;
        /** Exception details. */
        exceptionDetails?: ExceptionDetails;
    };
    type CompileScriptParameters = {
        /** Expression to compile. */
        expression: string;
        /** Source url to be set for the script. */
        sourceURL: string;
        /** Specifies whether the compiled script should be persisted. */
        persistScript: boolean;
        /** Specifies in which execution context to perform script run. If the parameter is omitted the
    evaluation will be performed in the context of the inspected page. */
        executionContextId?: ExecutionContextId;
    };
    type CompileScriptReturn = {
        /** Id of the script. */
        scriptId?: ScriptId;
        /** Exception details. */
        exceptionDetails?: ExceptionDetails;
    };
    type EvaluateParameters = {
        /** Expression to evaluate. */
        expression: string;
        /** Symbolic group name that can be used to release multiple objects. */
        objectGroup?: string;
        /** Determines whether Command Line API should be available during the evaluation. */
        includeCommandLineAPI?: boolean;
        /** In silent mode exceptions thrown during evaluation are not reported and do not pause
    execution. Overrides `setPauseOnException` state. */
        silent?: boolean;
        /** Specifies in which execution context to perform evaluation. If the parameter is omitted the
    evaluation will be performed in the context of the inspected page. */
        contextId?: ExecutionContextId;
        /** Whether the result is expected to be a JSON object that should be sent by value. */
        returnByValue?: boolean;
        /** Whether preview should be generated for the result. */
        generatePreview?: boolean;
        /** Whether execution should be treated as initiated by user in the UI. */
        userGesture?: boolean;
        /** Whether execution should `await` for resulting value and return once awaited promise is
    resolved. */
        awaitPromise?: boolean;
    };
    type EvaluateReturn = {
        /** Evaluation result. */
        result: RemoteObject;
        /** Exception details. */
        exceptionDetails?: ExceptionDetails;
    };
    type GetPropertiesParameters = {
        /** Identifier of the object to return properties for. */
        objectId: RemoteObjectId;
        /** If true, returns properties belonging only to the element itself, not to its prototype
    chain. */
        ownProperties?: boolean;
        /** If true, returns accessor properties (with getter/setter) only; internal properties are not
    returned either. */
        accessorPropertiesOnly?: boolean;
        /** Whether preview should be generated for the results. */
        generatePreview?: boolean;
    };
    type GetPropertiesReturn = {
        /** Object properties. */
        result: PropertyDescriptor[];
        /** Internal object properties (only of the element itself). */
        internalProperties?: InternalPropertyDescriptor[];
        /** Exception details. */
        exceptionDetails?: ExceptionDetails;
    };
    type GlobalLexicalScopeNamesParameters = {
        /** Specifies in which execution context to lookup global scope variables. */
        executionContextId?: ExecutionContextId;
    };
    type GlobalLexicalScopeNamesReturn = {
        names: string[];
    };
    type QueryObjectsParameters = {
        /** Identifier of the prototype to return objects for. */
        prototypeObjectId: RemoteObjectId;
    };
    type QueryObjectsReturn = {
        /** Array with objects. */
        objects: RemoteObject;
    };
    type ReleaseObjectParameters = {
        /** Identifier of the object to release. */
        objectId: RemoteObjectId;
    };
    type ReleaseObjectGroupParameters = {
        /** Symbolic object group name. */
        objectGroup: string;
    };
    type RunScriptParameters = {
        /** Id of the script to run. */
        scriptId: ScriptId;
        /** Specifies in which execution context to perform script run. If the parameter is omitted the
    evaluation will be performed in the context of the inspected page. */
        executionContextId?: ExecutionContextId;
        /** Symbolic group name that can be used to release multiple objects. */
        objectGroup?: string;
        /** In silent mode exceptions thrown during evaluation are not reported and do not pause
    execution. Overrides `setPauseOnException` state. */
        silent?: boolean;
        /** Determines whether Command Line API should be available during the evaluation. */
        includeCommandLineAPI?: boolean;
        /** Whether the result is expected to be a JSON object which should be sent by value. */
        returnByValue?: boolean;
        /** Whether preview should be generated for the result. */
        generatePreview?: boolean;
        /** Whether execution should `await` for resulting value and return once awaited promise is
    resolved. */
        awaitPromise?: boolean;
    };
    type RunScriptReturn = {
        /** Run result. */
        result: RemoteObject;
        /** Exception details. */
        exceptionDetails?: ExceptionDetails;
    };
    type SetCustomObjectFormatterEnabledParameters = {
        enabled: boolean;
    };
}
/** This domain is deprecated. */
export declare class Schema {
    private _client;
    constructor(client: IDebuggingProtocolClient);
    /** Returns supported domains. */
    getDomains(): Promise<Schema.GetDomainsReturn>;
}
export declare namespace Schema {
    /** Description of the protocol domain. */
    interface Domain {
        /** Domain name. */
        name: string;
        /** Domain version. */
        version: string;
    }
    type GetDomainsReturn = {
        /** List of supported domains. */
        domains: Domain[];
    };
}

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const WebSocket = require("ws");
const event_promise_1 = require("./event-promise");
function openWebSocket(url, delegate) {
    return __awaiter(this, void 0, void 0, function* () {
        const ws = new WebSocket(url);
        yield event_promise_1.eventPromise(ws, "open", "error");
        const onMessage = delegate.onMessage.bind(delegate);
        const onError = delegate.onError.bind(delegate);
        ws.addListener("message", onMessage);
        ws.addListener("error", onError);
        function removeListeners() {
            ws.removeListener("message", onMessage);
            ws.removeListener("error", onError);
        }
        const closed = new Promise((resolveClose) => {
            const onClose = () => {
                ws.removeListener("close", onClose);
                resolveClose();
            };
            ws.addListener("close", onClose);
        }).then(() => {
            removeListeners();
            delegate.onClose();
        });
        function close() {
            if (ws.readyState === WebSocket.OPEN) {
                ws.close();
            }
        }
        function dispose() {
            return __awaiter(this, void 0, void 0, function* () {
                close();
                yield closed;
            });
        }
        function send(data) {
            ws.send(data);
        }
        return delegate.socket = { send, close, dispose };
    });
}
exports.default = openWebSocket;
//# sourceMappingURL=open-web-socket.js.map